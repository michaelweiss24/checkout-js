{"version":3,"file":"shipping-b20c335e.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/shipping/hasPromotionalItems.tsx","webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/core/src/app/address/SingleLineStaticAddress.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/core/src/app/shipping/utils/setRecommendedOrMissingShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentAddressSelector.tsx","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemSplitTooltip.tsx","webpack://checkout/./packages/core/src/app/shipping/AllocatedItemsList.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItem.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItemsTable.tsx","webpack://checkout/./packages/core/src/app/shipping/MultishippingV2Type.ts","webpack://checkout/./packages/core/src/app/shipping/AllocateItemsModal.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useDeallocateItem.ts","webpack://checkout/./packages/core/src/app/shipping/utils/generateItemHash.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useMultishippingConsignmentItems.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentLineItem.tsx","webpack://checkout/./packages/ui/src/loading/LoadingSpinner.tsx","webpack://checkout/./packages/ui/src/loading/LoadingOverlay.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListItemV2.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListV2.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsV2.tsx","webpack://checkout/./packages/core/src/app/shipping/ConsignmentListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormV2Footer.tsx","webpack://checkout/./packages/core/src/app/shipping/NewConsignment.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormV2.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingGuestForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormFieldType.ts","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/ui/src/button/Button.tsx","webpack://checkout/./packages/ui/src/icon/IconClose.tsx","webpack://checkout/./packages/ui/src/modal/Modal.tsx","webpack://checkout/./packages/ui/src/modal/ModalHeader.tsx","webpack://checkout/./packages/ui/src/modal/ConfirmationModal.tsx"],"sourcesContent":["import { Address } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\r\n\r\nimport { AddressFormValues } from './mapAddressToFormValues';\r\n\r\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\r\n    const { customFields, ...address } = formValues;\r\n    const shouldSaveAddress = formValues.shouldSaveAddress;\r\n\r\n    return {\r\n        ...address,\r\n        shouldSaveAddress,\r\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\r\n    };\r\n}\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    BillingAddress,\r\n    CustomerAddress,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { isEqual, omit } from 'lodash';\r\n\r\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\r\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\r\n\r\nexport default function isEqualAddress(\r\n    address1?: ComparableAddress,\r\n    address2?: ComparableAddress,\r\n): boolean {\r\n    if (!address1 || !address2) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\r\n        isSameState(address1, address2)\r\n    );\r\n}\r\n\r\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\r\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        address1.stateOrProvinceCode &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        address1.stateOrProvince === address2.stateOrProvince &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    );\r\n}\r\n\r\nfunction normalizeAddress(address: ComparableAddress) {\r\n    const ignoredFields: ComparableAddressFields[] = [\r\n        'id',\r\n        'shouldSaveAddress',\r\n        'stateOrProvince',\r\n        'stateOrProvinceCode',\r\n        'type',\r\n        'email',\r\n        'country',\r\n    ];\r\n\r\n    return omit(\r\n        {\r\n            ...address,\r\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\r\n        },\r\n        ignoredFields,\r\n    );\r\n}\r\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CustomError, setPrototypeOf } from '../../common/error';\r\n\r\nexport default class UnassignItemError extends CustomError {\r\n    constructor(data: Error) {\r\n        super({\r\n            name: 'UNASSIGN_ITEM_FAILED',\r\n            message: getLanguageService().translate('shipping.unassign_item_error'),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, UnassignItemError.prototype);\r\n    }\r\n}\r\n","import { Cart } from '@bigcommerce/checkout-sdk';\r\n\r\nimport getLineItemsCount from './getLineItemsCount';\r\n\r\nexport default function getShippableItemsCount(\r\n    cart: Cart,\r\n    isNewMultiShippingUIEnabled = false\r\n): number {\r\n    if (isNewMultiShippingUIEnabled) {\r\n        return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion && !item.parentId));\r\n    }\r\n\r\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\r\n}\r\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { getPreselectedPayment } from '../payment';\r\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\r\nimport { PaymentMethodId } from '../payment/paymentMethod';\r\n\r\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\r\n    const SHIPPING_METHOD_IDS: string[] = [\r\n        PaymentMethodId.AmazonPay,\r\n        PaymentMethodId.BraintreeAcceleratedCheckout,\r\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\r\n    ];\r\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\r\n        config.checkoutSettings?.providerWithCustomCheckout,\r\n    );\r\n    const preselectedPayment = getPreselectedPayment(checkout);\r\n\r\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\r\n        return preselectedPayment.providerId;\r\n    }\r\n\r\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\r\n        ? providerWithCustomCheckout\r\n        : undefined;\r\n}\r\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { isGiftCertificatePayment } from '../giftCertificate';\r\n\r\nimport { isStoreCreditPayment } from './storeCredit';\r\n\r\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\r\n    const payments = checkout && checkout.payments ? checkout.payments : [];\r\n\r\n    return payments.find(\r\n        (payment) =>\r\n            !isGiftCertificatePayment(payment) &&\r\n            !isStoreCreditPayment(payment) &&\r\n            !!payment.providerId,\r\n    );\r\n}\r\n","import { Cart } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function hasPromotionalItems(cart: Cart): boolean {\r\n    const { digitalItems = [], physicalItems } = cart.lineItems;\r\n    \r\n    return [...digitalItems, ...physicalItems].filter((item) => item.addedByPromotion)?.length > 0;\r\n}\r\n","import { AddressKeyMap } from './address';\r\n\r\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\r\n    address1: 'addressLine1',\r\n    address2: 'addressLine2',\r\n    postalCode: 'postCode',\r\n    stateOrProvince: 'province',\r\n    stateOrProvinceCode: 'provinceCode',\r\n};\r\n\r\nexport function getAddressFormFieldLegacyName(name: string): string {\r\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\r\n}\r\n\r\nexport function getAddressFormFieldInputId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Input`;\r\n}\r\n\r\nexport function getAddressFormFieldLabelId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Label`;\r\n}\r\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\r\n\r\nexport default class AddressSelector {\r\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\r\n    protected _name: string;\r\n\r\n    constructor(googlePlace: google.maps.places.PlaceResult) {\r\n        const { address_components, name } = googlePlace;\r\n\r\n        this._name = name;\r\n        this._address = address_components;\r\n    }\r\n\r\n    getState(): string {\r\n        return this._get('administrative_area_level_1', 'short_name');\r\n    }\r\n\r\n    getStreet(): string {\r\n        return this._name;\r\n    }\r\n\r\n    getStreet2(): string {\r\n        if (this.getCountry() === 'NZ') {\r\n            return this._get('sublocality', 'short_name');\r\n        }\r\n\r\n        return this._get('subpremise', 'short_name');\r\n    }\r\n\r\n    getCity(): string {\r\n        return (\r\n            this._get('postal_town', 'long_name') ||\r\n            this._get('locality', 'long_name') ||\r\n            this._get('neighborhood', 'short_name')\r\n        );\r\n    }\r\n\r\n    getCountry(): string {\r\n        return this._get('country', 'short_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return this._get('postal_code', 'short_name');\r\n    }\r\n\r\n    protected _get(\r\n        type: GoogleAddressFieldType,\r\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\r\n    ): string {\r\n        const element =\r\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\r\n\r\n        if (element) {\r\n            return element[access];\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\n\r\nexport default class AddressSelectorCA extends AddressSelector {\r\n    getCity(): string {\r\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\n\r\nexport default class AddressSelectorUK extends AddressSelector {\r\n    getState(): string {\r\n        return '';\r\n    }\r\n\r\n    getStreet2(): string {\r\n        return this._get('locality', 'long_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\nimport AddressSelectorCA from './AddressSelectorCA';\r\nimport AddressSelectorUK from './AddressSelectorUk';\r\n\r\nexport default class AddressSelectorFactory {\r\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\r\n        const countryComponent = autocompleteData.address_components?.find(\r\n            component => component.types.indexOf('country') >= 0);\r\n        const countryShortName = countryComponent?.short_name || '';\r\n\r\n        switch (countryShortName) {\r\n            case 'GB':\r\n                return new AddressSelectorUK(autocompleteData);\r\n\r\n            case 'CA':\r\n                return new AddressSelectorCA(autocompleteData);\r\n\r\n            default:\r\n                return new AddressSelector(autocompleteData);\r\n        }\r\n    }\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './Popover.scss';\r\n\r\nexport interface PopoverProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\r\n    return <div className=\"popover\">{children}</div>;\r\n};\r\n\r\nexport default Popover;\r\n","import React, { FunctionComponent, memo } from 'react';\r\n\r\nimport './PopoverList.scss';\r\n\r\nexport interface PopoverListProps {\r\n    menuProps?: any;\r\n    highlightedIndex?: number;\r\n    getItemProps?: any;\r\n    items: PopoverListItem[];\r\n    testId?: string;\r\n}\r\n\r\nexport interface PopoverListItem {\r\n    id: string;\r\n    content: React.ReactChild[] | React.ReactChild;\r\n}\r\n\r\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\r\n    highlightedIndex = -1,\r\n    testId,\r\n     \r\n    getItemProps = (props: any) => props,\r\n    menuProps = {},\r\n    items,\r\n}) => {\r\n    if (!items.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\r\n            {items.map((item, index) => (\r\n                <li\r\n                    className={getItemClassName(highlightedIndex, index)}\r\n                    data-test={testId && `${testId}-item`}\r\n                     \r\n                    {...getItemProps({\r\n                        key: item.id,\r\n                        index,\r\n                        item,\r\n                    })}\r\n                    key={index}\r\n                >\r\n                    {item.content}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nfunction getItemClassName(highlightedIndex: number, index: number): string {\r\n    const classes = ['popoverList-item'];\r\n\r\n    if (highlightedIndex === index) {\r\n        classes.push('is-active');\r\n    }\r\n\r\n    return classes.join(' ');\r\n}\r\n\r\nexport default memo(PopoverList);\r\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\r\nimport { includes, isNumber, noop } from 'lodash';\r\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\r\n\r\nimport { Label } from '../form';\r\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\r\n\r\nimport AutocompleteItem from './autocomplete-item';\r\n\r\nexport interface AutocompleteProps {\r\n    initialValue?: string;\r\n    initialHighlightedIndex?: number;\r\n    defaultHighlightedIndex?: number;\r\n    children?: ReactNode;\r\n    items: AutocompleteItem[];\r\n    inputProps?: any;\r\n    listTestId?: string;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onSelect?(item: AutocompleteItem | null): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\nclass Autocomplete extends PureComponent<AutocompleteProps> {\r\n    render(): ReactNode {\r\n        const {\r\n            inputProps,\r\n            initialValue,\r\n            initialHighlightedIndex,\r\n            defaultHighlightedIndex,\r\n            items,\r\n            children,\r\n            onSelect,\r\n            listTestId,\r\n        } = this.props;\r\n\r\n        return (\r\n            <Downshift\r\n                defaultHighlightedIndex={defaultHighlightedIndex}\r\n                initialHighlightedIndex={initialHighlightedIndex}\r\n                initialInputValue={initialValue}\r\n                itemToString={this.itemToString}\r\n                labelId={\r\n                    inputProps && inputProps['aria-labelledby']\r\n                        ? inputProps['aria-labelledby']\r\n                        : null\r\n                }\r\n                onChange={onSelect}\r\n                onStateChange={this.handleStateChange}\r\n                stateReducer={this.stateReducer}\r\n            >\r\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\r\n                    const validInputProps = { ...getInputProps(), ...inputProps };\r\n\r\n                    delete validInputProps.labelText;\r\n\r\n                    return (\r\n                        <div>\r\n                            <input {...validInputProps} />\r\n                            {inputProps && includes(inputProps.className, 'floating') && (\r\n                                <Label\r\n                                    htmlFor={inputProps.id}\r\n                                    id={inputProps['aria-labelledby']}\r\n                                    isFloatingLabelEnabled={true}\r\n                                >\r\n                                    {inputProps.labelText}\r\n                                </Label>\r\n                            )}\r\n                            {isOpen && !!items.length && (\r\n                                <Popover>\r\n                                    <PopoverList\r\n                                        getItemProps={getItemProps}\r\n                                        highlightedIndex={\r\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\r\n                                        }\r\n                                        items={items.map((item) => this.toPopoverItem(item))}\r\n                                        menuProps={getMenuProps()}\r\n                                        testId={listTestId}\r\n                                    />\r\n                                    {children}\r\n                                </Popover>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Downshift>\r\n        );\r\n    }\r\n\r\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\r\n        return {\r\n            ...item,\r\n            content: this.highlightItem(item),\r\n        };\r\n    }\r\n\r\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\r\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\r\n            return item.label;\r\n        }\r\n\r\n        let lastIndex = 0;\r\n        let key = 0;\r\n\r\n        return item.highlightedSlices.reduce((node, slice, i) => {\r\n            const { label } = item;\r\n            const { offset, length } = slice;\r\n            const notHighlightedLength = offset - lastIndex;\r\n\r\n            if (notHighlightedLength) {\r\n                node.push(\r\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\r\n                );\r\n                key += 1;\r\n            }\r\n\r\n            lastIndex = offset + length;\r\n\r\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\r\n            key += 1;\r\n\r\n            if (i === (item.highlightedSlices || []).length - 1) {\r\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\r\n                key += 1;\r\n            }\r\n\r\n            return node;\r\n        }, [] as ReactChild[]);\r\n    }\r\n\r\n    private itemToString(item?: AutocompleteItem | null): string {\r\n        return (item && item.value) || '';\r\n    }\r\n\r\n    private stateReducer: (\r\n        state: DownshiftState<AutocompleteItem>,\r\n        changes: StateChangeOptions<AutocompleteItem>,\r\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\r\n        const { onChange } = this.props;\r\n\r\n        switch (changes.type) {\r\n            case Downshift.stateChangeTypes.blurInput:\r\n            case Downshift.stateChangeTypes.blurButton:\r\n            case Downshift.stateChangeTypes.mouseUp:\r\n            case Downshift.stateChangeTypes.touchEnd:\r\n                return {\r\n                    ...changes,\r\n                    inputValue: state.inputValue,\r\n                };\r\n\r\n            case Downshift.stateChangeTypes.changeInput:\r\n                if (changes.inputValue !== state.inputValue && onChange) {\r\n                    onChange(changes.inputValue || '', state.isOpen);\r\n                }\r\n\r\n                return changes;\r\n\r\n            case Downshift.stateChangeTypes.keyDownEnter:\r\n                return changes;\r\n\r\n            default:\r\n                return changes;\r\n        }\r\n    };\r\n\r\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\r\n        const { onToggleOpen = noop } = this.props;\r\n\r\n        if (isOpen !== undefined) {\r\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\r\n        }\r\n    };\r\n}\r\n\r\nexport default Autocomplete;\r\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\r\n\r\nexport default class GoogleAutocompleteScriptLoader {\r\n    private _scriptLoader: ScriptLoader;\r\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\r\n\r\n    constructor() {\r\n        this._scriptLoader = getScriptLoader();\r\n    }\r\n\r\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\r\n        if (this._googleAutoComplete) {\r\n            return this._googleAutoComplete;\r\n        }\r\n\r\n        this._googleAutoComplete = new Promise((resolve, reject) => {\r\n            const callbackName = 'initAutoComplete';\r\n            const params = [\r\n                'language=en',\r\n                `key=${apiKey}`,\r\n                'libraries=places',\r\n                `callback=${callbackName}`,\r\n            ].join('&');\r\n\r\n            (window as GoogleCallbackWindow)[callbackName] = () => {\r\n                if (isAutocompleteWindow(window)) {\r\n                    resolve(window.google.maps);\r\n                }\r\n\r\n                reject();\r\n            };\r\n\r\n            this._scriptLoader\r\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\r\n                .catch((e) => {\r\n                    this._googleAutoComplete = undefined;\r\n                    throw e;\r\n                });\r\n        });\r\n\r\n        return this._googleAutoComplete;\r\n    }\r\n}\r\n\r\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\r\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\r\n\r\n    return Boolean(\r\n        autocompleteWindow.google &&\r\n            autocompleteWindow.google.maps &&\r\n            autocompleteWindow.google.maps.places,\r\n    );\r\n}\r\n\r\nexport interface GoogleCallbackWindow extends Window {\r\n    initAutoComplete?(): void;\r\n}\r\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nlet instance: GoogleAutocompleteScriptLoader;\r\n\r\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\r\n    if (!instance) {\r\n        instance = new GoogleAutocompleteScriptLoader();\r\n    }\r\n\r\n    return instance;\r\n}\r\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\r\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nexport default class GoogleAutocompleteService {\r\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\r\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\r\n\r\n    constructor(\r\n        private _apiKey: string,\r\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\r\n    ) {}\r\n\r\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\r\n        if (!this._autocompletePromise) {\r\n            this._autocompletePromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.AutocompleteService) {\r\n                        throw new Error('`AutocompleteService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.AutocompleteService();\r\n                });\r\n        }\r\n\r\n        return this._autocompletePromise;\r\n    }\r\n\r\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\r\n        const node = document.createElement('div');\r\n\r\n        if (!this._placesPromise) {\r\n            this._placesPromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.PlacesService) {\r\n                        throw new Error('`PlacesService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.PlacesService(node);\r\n                });\r\n        }\r\n\r\n        return this._placesPromise;\r\n    }\r\n}\r\n","import { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\r\n\r\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\r\nimport './GoogleAutocomplete.scss';\r\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\r\n\r\nexport interface GoogleAutocompleteProps {\r\n    initialValue?: string;\r\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\r\n    fields?: string[];\r\n    apiKey: string;\r\n    nextElement?: HTMLElement;\r\n    inputProps?: any;\r\n    isAutocompleteEnabled?: boolean;\r\n    types?: GoogleAutocompleteOptionTypes[];\r\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\ninterface GoogleAutocompleteState {\r\n    items: AutocompleteItem[];\r\n    autoComplete: string;\r\n}\r\n\r\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\r\n    googleAutocompleteService: GoogleAutocompleteService;\r\n\r\n    constructor(props: GoogleAutocompleteProps) {\r\n        super(props);\r\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\r\n        this.state = {\r\n            items: [],\r\n            autoComplete: 'off',\r\n        };\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\r\n\r\n        const { autoComplete, items } = this.state;\r\n\r\n        return (\r\n            <Autocomplete\r\n                defaultHighlightedIndex={-1}\r\n                initialHighlightedIndex={-1}\r\n                initialValue={initialValue}\r\n                inputProps={{\r\n                    ...inputProps,\r\n                    autoComplete,\r\n                }}\r\n                items={items}\r\n                listTestId=\"address-autocomplete-suggestions\"\r\n                onChange={this.onChange}\r\n                onSelect={this.onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            >\r\n                <div className=\"co-googleAutocomplete-footer\" />\r\n            </Autocomplete>\r\n        );\r\n    }\r\n\r\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\r\n        const { fields, onSelect = noop, nextElement } = this.props;\r\n\r\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\r\n            service.getDetails(\r\n                {\r\n                    placeId: item.id,\r\n                    fields: fields || ['address_components', 'name'],\r\n                },\r\n                (result) => {\r\n                    if (nextElement) {\r\n                        nextElement.focus();\r\n                    }\r\n\r\n                    onSelect(result, item);\r\n                },\r\n            );\r\n        });\r\n    };\r\n\r\n    private onChange: (input: string) => void = (input) => {\r\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\r\n\r\n        onChange(input, false);\r\n\r\n        if (!isAutocompleteEnabled) {\r\n            return this.resetAutocomplete();\r\n        }\r\n\r\n        this.setAutocomplete(input);\r\n        this.setItems(input);\r\n    };\r\n\r\n    private setItems(input: string): void {\r\n        if (!input) {\r\n            this.setState({ items: [] });\r\n\r\n            return;\r\n        }\r\n\r\n        const { componentRestrictions, types } = this.props;\r\n\r\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\r\n            service.getPlacePredictions(\r\n                {\r\n                    input,\r\n                    types: types || ['geocode'],\r\n                    componentRestrictions,\r\n                },\r\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\r\n            );\r\n        });\r\n    }\r\n\r\n    private resetAutocomplete(): void {\r\n        this.setState({\r\n            items: [],\r\n            autoComplete: 'off',\r\n        });\r\n    }\r\n\r\n    private setAutocomplete(input: string): void {\r\n        this.setState({\r\n            ...this.state,\r\n            autoComplete: input && input.length ? 'nope' : 'off',\r\n        });\r\n    }\r\n\r\n    private toAutocompleteItems(\r\n        results?: google.maps.places.AutocompletePrediction[],\r\n    ): AutocompleteItem[] {\r\n        return (results || []).map((result) => ({\r\n            label: result.description,\r\n            value: result.structured_formatting.main_text,\r\n            highlightedSlices: result.matched_substrings,\r\n            id: result.place_id,\r\n        }));\r\n    }\r\n}\r\n\r\nexport default GoogleAutocomplete;\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { AutocompleteItem } from '../../ui/autocomplete';\r\nimport { FormField, Label } from '../../ui/form';\r\nimport {\r\n    getAddressFormFieldInputId,\r\n    getAddressFormFieldLabelId,\r\n} from '../getAddressFormFieldInputId';\r\n\r\nimport GoogleAutocomplete from './GoogleAutocomplete';\r\n\r\nexport interface GoogleAutocompleteFormFieldProps {\r\n    apiKey: string;\r\n    field: FormFieldType;\r\n    countryCode?: string;\r\n    supportedCountries: string[];\r\n    nextElement?: HTMLElement;\r\n    parentFieldName?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange(value: string, isOpen: boolean): void;\r\n}\r\n\r\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\r\n    field: { default: placeholder, name, maxLength },\r\n    countryCode,\r\n    supportedCountries,\r\n    parentFieldName,\r\n    nextElement,\r\n    apiKey,\r\n    onSelect,\r\n    onChange,\r\n    onToggleOpen,\r\n    isFloatingLabelEnabled,\r\n}) => {\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n\r\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\r\n\r\n    const labelId = getAddressFormFieldLabelId(name);\r\n\r\n    const inputProps = useMemo(\r\n        () => ({\r\n            className: classNames(\r\n                'form-input optimizedCheckout-form-input',\r\n                { 'floating-input': isFloatingLabelEnabled },\r\n            ),\r\n            id: getAddressFormFieldInputId(name),\r\n            'aria-labelledby': labelId,\r\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\r\n            labelText: isFloatingLabelEnabled ? labelContent : null,\r\n            maxLength: maxLength || undefined,\r\n        }),\r\n        [name, labelId, placeholder, labelContent, maxLength],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => (\r\n            <GoogleAutocomplete\r\n                apiKey={apiKey}\r\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\r\n                initialValue={field.value}\r\n                inputProps={inputProps}\r\n                isAutocompleteEnabled={\r\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\r\n                }\r\n                nextElement={nextElement}\r\n                onChange={onChange}\r\n                onSelect={onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            />\r\n        ),\r\n        [\r\n            apiKey,\r\n            countryCode,\r\n            inputProps,\r\n            nextElement,\r\n            onChange,\r\n            onSelect,\r\n            onToggleOpen,\r\n            supportedCountries,\r\n        ],\r\n    );\r\n\r\n    const renderLabel = isFloatingLabelEnabled ? null : (\r\n        <Label htmlFor={inputProps.id} id={labelId} isFloatingLabelEnabled={isFloatingLabelEnabled}>\r\n            {labelContent}\r\n        </Label>\r\n    );\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\r\n                { 'floating-form-field': isFloatingLabelEnabled },\r\n            )}\r\n            data-test=\"google-autocomplete-form-field\"\r\n        >\r\n            <FormField\r\n                input={renderInput}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                label={renderLabel}\r\n                name={fieldName}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(GoogleAutocompleteFormField);\r\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { memoize } from '@bigcommerce/memoize';\r\nimport { forIn, noop } from 'lodash';\r\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport { AutocompleteItem } from '../ui/autocomplete';\r\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\r\n\r\nimport { AddressKeyMap } from './address';\r\nimport {\r\n    getAddressFormFieldInputId,\r\n    getAddressFormFieldLegacyName,\r\n} from './getAddressFormFieldInputId';\r\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\r\nimport './AddressForm.scss';\r\n\r\nexport interface AddressFormProps {\r\n    fieldName?: string;\r\n    countryCode?: string;\r\n    countriesWithAutocomplete?: string[];\r\n    countries?: Country[];\r\n    formFields: FormField[];\r\n    googleMapsApiKey?: string;\r\n    shouldShowSaveAddress?: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    onAutocompleteSelect?(address: Partial<Address>): void;\r\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange?(fieldName: string, value: string | string[]): void;\r\n    setFieldValue?(fieldName: string, value: string | string[]): void;\r\n}\r\n\r\nconst LABEL: AddressKeyMap = {\r\n    address1: 'address.address_line_1_label',\r\n    address2: 'address.address_line_2_label',\r\n    city: 'address.city_label',\r\n    company: 'address.company_name_label',\r\n    countryCode: 'address.country_label',\r\n    firstName: 'address.first_name_label',\r\n    lastName: 'address.last_name_label',\r\n    phone: 'address.phone_number_label',\r\n    postalCode: 'address.postal_code_label',\r\n    stateOrProvince: 'address.state_label',\r\n    stateOrProvinceCode: 'address.state_label',\r\n};\r\n\r\nconst AUTOCOMPLETE: AddressKeyMap = {\r\n    address1: 'address-line1',\r\n    address2: 'address-line2',\r\n    city: 'address-level2',\r\n    company: 'organization',\r\n    countryCode: 'country',\r\n    firstName: 'given-name',\r\n    lastName: 'family-name',\r\n    phone: 'tel',\r\n    postalCode: 'postal-code',\r\n    stateOrProvince: 'address-level1',\r\n    stateOrProvinceCode: 'address-level1',\r\n};\r\n\r\nconst PLACEHOLDER: AddressKeyMap = {\r\n    countryCode: 'address.select_country_action',\r\n    stateOrProvince: 'address.select_state_action',\r\n    stateOrProvinceCode: 'address.select_state_action',\r\n    firstName: 'Wikus',\r\n    lastName: 'van de Merwe',\r\n};\r\n\r\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\r\n\r\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\r\n    private containerRef: RefObject<HTMLElement> = createRef();\r\n    private nextElement?: HTMLElement | null;\r\n\r\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\r\n        memoize((name) => (value) => {\r\n            this.syncNonFormikValue(name, value);\r\n        });\r\n\r\n    componentDidMount(): void {\r\n        const { current } = this.containerRef;\r\n\r\n        if (current) {\r\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            formFields,\r\n            fieldName,\r\n            countriesWithAutocomplete,\r\n            countryCode,\r\n            googleMapsApiKey,\r\n            onAutocompleteToggle,\r\n            shouldShowSaveAddress,\r\n            isFloatingLabelEnabled,\r\n        } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Fieldset>\r\n                    <div\r\n                        className=\"checkout-address\"\r\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\r\n                    >\r\n                        {formFields.map((field) => {\r\n                            const addressFieldName = field.name;\r\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\r\n\r\n                            if (\r\n                                addressFieldName === 'address1' &&\r\n                                googleMapsApiKey &&\r\n                                countriesWithAutocomplete\r\n                            ) {\r\n                                return (\r\n                                    <GoogleAutocompleteFormField\r\n                                        apiKey={googleMapsApiKey}\r\n                                        countryCode={countryCode}\r\n                                        field={field}\r\n                                        isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                                        key={field.id}\r\n                                        nextElement={this.nextElement || undefined}\r\n                                        onChange={this.handleAutocompleteChange}\r\n                                        onSelect={this.handleAutocompleteSelect}\r\n                                        onToggleOpen={onAutocompleteToggle}\r\n                                        parentFieldName={fieldName}\r\n                                        supportedCountries={countriesWithAutocomplete}\r\n                                    />\r\n                                );\r\n                            }\r\n\r\n                            return (\r\n                                <DynamicFormField\r\n                                    autocomplete={AUTOCOMPLETE[field.name]}\r\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\r\n                                        addressFieldName,\r\n                                    )}`}\r\n                                    field={field}\r\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\r\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\r\n                                    isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                                    key={`${field.id}-${field.name}`}\r\n                                    label={\r\n                                        field.custom ? (\r\n                                            field.label\r\n                                        ) : (\r\n                                            <TranslatedString id={LABEL[field.name]} />\r\n                                        )\r\n                                    }\r\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\r\n                                    parentFieldName={\r\n                                        field.custom\r\n                                            ? fieldName\r\n                                                ? `${fieldName}.customFields`\r\n                                                : 'customFields'\r\n                                            : fieldName\r\n                                    }\r\n                                    placeholder={this.getPlaceholderValue(\r\n                                        field,\r\n                                        translatedPlaceholderId,\r\n                                    )}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </Fieldset>\r\n                {shouldShowSaveAddress && (\r\n                    <CheckboxFormField\r\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\r\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\r\n                    />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\r\n        const { language } = this.props;\r\n\r\n        if (field.default && field.fieldType !== 'dropdown') {\r\n            return field.default;\r\n        }\r\n\r\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\r\n    }\r\n\r\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\r\n        value,\r\n        isOpen,\r\n    ) => {\r\n        if (!isOpen) {\r\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\r\n        }\r\n    };\r\n\r\n    private handleAutocompleteSelect: (\r\n        place: google.maps.places.PlaceResult,\r\n        item: AutocompleteItem,\r\n    ) => void = (place, { value: autocompleteValue }) => {\r\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n        const address = mapToAddress(place, countries);\r\n\r\n        forIn(address, (value, fieldName) => {\r\n            setFieldValue(fieldName, value as string);\r\n            onChange(fieldName, value as string);\r\n        });\r\n\r\n        if (autocompleteValue) {\r\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\r\n        }\r\n    };\r\n\r\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\r\n    // value in sync when autocomplete value changes\r\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\r\n        fieldName,\r\n        value,\r\n    ) => {\r\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n        const dateFormFieldNames = formFields\r\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\r\n            .map((field) => field.name);\r\n\r\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\r\n            setFieldValue(fieldName, value);\r\n        }\r\n\r\n        onChange(fieldName, value);\r\n    };\r\n}\r\n\r\nexport default withLanguage(AddressForm);\r\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\r\n\r\nimport AddressSelectorFactory from './AddressSelectorFactory';\r\n\r\nexport default function mapToAddress(\r\n    autocompleteData: google.maps.places.PlaceResult,\r\n    countries: Country[] = [],\r\n): Partial<Address> {\r\n    if (!autocompleteData || !autocompleteData.address_components) {\r\n        return {};\r\n    }\r\n\r\n    const accessor = AddressSelectorFactory.create(autocompleteData);\r\n    const state = accessor.getState();\r\n    const countryCode = accessor.getCountry();\r\n    const country = countries && countries.find((c) => countryCode === c.code);\r\n    const street2 = accessor.getStreet2();\r\n\r\n    return {\r\n        address2: street2,\r\n        city: accessor.getCity(),\r\n        countryCode,\r\n        postalCode: accessor.getPostCode(),\r\n        ...(state ? getState(state, country && country.subdivisions) : {}),\r\n    };\r\n}\r\n\r\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\r\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\r\n\r\n    if (!state) {\r\n        return {\r\n            stateOrProvince: !states.length ? stateName : '',\r\n            stateOrProvinceCode: '',\r\n        };\r\n    }\r\n\r\n    return {\r\n        stateOrProvince: state.name,\r\n        stateOrProvinceCode: state.code,\r\n    };\r\n}\r\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { lazy } from 'yup';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Form } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\nimport { Modal, ModalHeader } from '../ui/modal';\r\n\r\nimport AddressForm from './AddressForm';\r\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\r\nimport { AddressFormValues } from './mapAddressToFormValues';\r\n\r\nexport interface AddressFormModalProps extends AddressFormProps {\r\n    isOpen: boolean;\r\n    onAfterOpen?(): void;\r\n}\r\n\r\nexport interface AddressFormProps {\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    shouldShowSaveAddress?: boolean;\r\n    defaultCountryCode?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSaveAddress(address: AddressFormValues): void;\r\n    onRequestClose?(): void;\r\n}\r\n\r\nconst SaveAddress: FunctionComponent<\r\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\r\n> = ({\r\n    googleMapsApiKey,\r\n    getFields,\r\n    countriesWithAutocomplete,\r\n    countries,\r\n    values,\r\n    setFieldValue,\r\n    isLoading,\r\n    onRequestClose,\r\n    isFloatingLabelEnabled,\r\n}) => (\r\n    <Form autoComplete=\"on\">\r\n        <LoadingOverlay isLoading={isLoading}>\r\n            <AddressForm\r\n                countries={countries}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                countryCode={values.countryCode}\r\n                formFields={getFields(values.countryCode)}\r\n                googleMapsApiKey={googleMapsApiKey}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                setFieldValue={setFieldValue}\r\n                shouldShowSaveAddress={false}\r\n            />\r\n            <div className=\"form-actions\">\r\n                <Button\r\n                    onClick={onRequestClose}\r\n                    variant={ButtonVariant.Secondary}>\r\n                    <TranslatedString id=\"common.cancel_action\" />\r\n                </Button>\r\n\r\n\r\n                <Button\r\n                    disabled={isLoading}\r\n                    id=\"checkout-save-address\"\r\n                    type=\"submit\"\r\n                    variant={ButtonVariant.Primary}\r\n                >\r\n                    <TranslatedString id=\"address.save_address_action\" />\r\n                </Button>\r\n            </div>\r\n        </LoadingOverlay>\r\n    </Form>\r\n);\r\n\r\nconst SaveAddressForm = withLanguage(\r\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\r\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\r\n            onSaveAddress(values);\r\n        },\r\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\r\n            firstName: '',\r\n            lastName: '',\r\n            address1: '',\r\n            address2: '',\r\n            customFields: {},\r\n            country: '',\r\n            countryCode: defaultCountryCode,\r\n            stateOrProvince: '',\r\n            stateOrProvinceCode: '',\r\n            postalCode: '',\r\n            phone: '',\r\n            city: '',\r\n            company: '',\r\n            shouldSaveAddress: false,\r\n        }),\r\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\r\n            lazy<Partial<AddressFormValues>>((values) =>\r\n                getAddressFormFieldsValidationSchema({\r\n                    language,\r\n                    formFields: getFields(values && values.countryCode),\r\n                }),\r\n            ),\r\n    })(SaveAddress),\r\n);\r\n\r\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\r\n    isOpen,\r\n    onAfterOpen,\r\n    onRequestClose,\r\n    ...addressFormProps\r\n}) => (\r\n    <Modal\r\n        additionalModalClassName=\"modal--medium\"\r\n        header={\r\n            <ModalHeader>\r\n                <TranslatedString id=\"address.add_address_heading\" />\r\n            </ModalHeader>\r\n        }\r\n        isOpen={isOpen}\r\n        onAfterOpen={onAfterOpen}\r\n        onRequestClose={onRequestClose}\r\n        shouldShowCloseButton={true}\r\n    >\r\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\r\n    </Modal>\r\n);\r\n\r\nexport default AddressFormModal;\r\n","import { FormikProps, FormikValues, withFormik, WithFormikConfig } from 'formik';\r\nimport React, { ComponentType, useEffect, useRef } from 'react';\r\n\r\nexport interface WithFormikExtendedProps {\r\n    isInitialValueLoaded?: boolean;\r\n}\r\n\r\n/**\r\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\r\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\r\n * initial value is fully loaded.\r\n */\r\nexport default function withFormikExtended<TOuterProps, TValues extends FormikValues, TPayload = TValues>(\r\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\r\n) {\r\n    return (OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>) => {\r\n        const DecoratedComponent: ComponentType<TOuterProps & FormikProps<TValues> & WithFormikExtendedProps> = (props) => {\r\n            const { resetForm, isInitialValueLoaded } = props;\r\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\r\n\r\n            useEffect(() => {\r\n                if (\r\n                    previousIsInitialValueLoadedRef.current === false && \r\n                    isInitialValueLoaded === true\r\n                ) {\r\n                    resetForm();\r\n                }\r\n\r\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\r\n            }, [isInitialValueLoaded]);\r\n\r\n            return <OriginalComponent {...props} />;\r\n        };\r\n\r\n        DecoratedComponent.displayName = `WithFormikExtended(${\r\n            OriginalComponent.displayName || OriginalComponent.name\r\n        })`;\r\n\r\n        return withFormik(config)(DecoratedComponent);\r\n    };\r\n}\r\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CustomError, setPrototypeOf } from '../../common/error';\r\n\r\nexport default class AssignItemInvalidAddressError extends CustomError {\r\n    constructor(data?: Error) {\r\n        super({\r\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\r\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\r\n            title: getLanguageService().translate(\r\n                'shipping.assign_item_invalid_address_error_heading',\r\n            ),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\r\n    }\r\n}\r\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CustomError, setPrototypeOf } from '../../common/error';\r\n\r\nexport default class AssignItemFailedError extends CustomError {\r\n    constructor(data: Error) {\r\n        super({\r\n            name: 'ASSIGN_ITEM_FAILED',\r\n            message: getLanguageService().translate('shipping.assign_item_error'),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, AssignItemFailedError.prototype);\r\n    }\r\n}\r\n","import { Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { find, includes } from 'lodash';\r\n\r\nexport default function findConsignment(\r\n    consignments: Consignment[],\r\n    itemId: string,\r\n): Consignment | undefined {\r\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\r\n}\r\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\r\nimport { isNil, reduce } from 'lodash';\r\n\r\nimport findConsignment from './findConsignment';\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport default function getShippableLineItems(\r\n    cart: Cart,\r\n    consignments: Consignment[],\r\n): ShippableItem[] {\r\n    return reduce(\r\n        (cart && cart.lineItems.physicalItems) || [],\r\n        (result, item, i) =>\r\n            !item.addedByPromotion && isNil(item.parentId)\r\n                ? result.concat(...splitItem(item, consignments, i))\r\n                : result,\r\n        [] as ShippableItem[],\r\n    );\r\n}\r\n\r\nfunction splitItem(\r\n    item: PhysicalItem,\r\n    consignments: Consignment[],\r\n    lineItemIndex: number,\r\n): ShippableItem[] {\r\n    let splitItems: ShippableItem[] = [];\r\n    const consignment = findConsignment(consignments, item.id as string);\r\n\r\n    for (let i = 0; i < item.quantity; i++) {\r\n        splitItems = splitItems.concat({\r\n            ...item,\r\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\r\n            consignment,\r\n            quantity: 1,\r\n        });\r\n    }\r\n\r\n    return splitItems;\r\n}\r\n","import { Placement } from 'popper.js';\r\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\r\nimport { Manager, Popper, Reference } from 'react-popper';\r\n\r\nimport {\r\n    CHECKOUT_ROOT_NODE_ID,\r\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\r\n} from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nexport interface DropdownTriggerProps {\r\n    placement?: Placement;\r\n    dropdown: ReactNode;\r\n}\r\n\r\nexport interface DropdownTriggerState {\r\n    shouldShow: boolean;\r\n}\r\n\r\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\r\n    static defaultProps = {\r\n        placement: 'bottom-start',\r\n    };\r\n\r\n    state: Readonly<DropdownTriggerState> = {\r\n        shouldShow: false,\r\n    };\r\n\r\n    componentWillUnmount(): void {\r\n        document.removeEventListener('click', this.handleClose);\r\n    }\r\n\r\n    render() {\r\n        const { children, placement, dropdown } = this.props;\r\n        const { shouldShow } = this.state;\r\n\r\n        return (\r\n            <Manager>\r\n                <Reference>\r\n                    {({ ref }) => (\r\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                </Reference>\r\n\r\n                <Popper\r\n                    modifiers={{\r\n                        hide: { enabled: false },\r\n                        flip: { enabled: false },\r\n                        preventOverflow: { enabled: false },\r\n                    }}\r\n                    placement={placement}\r\n                >\r\n                    {({ ref, style }) =>\r\n                        !shouldShow ? null : (\r\n                            <div\r\n                                className=\"dropdownMenu\"\r\n                                ref={ref}\r\n                                style={{\r\n                                    ...style,\r\n                                    width: '100%',\r\n                                    zIndex: 1,\r\n                                }}\r\n                            >\r\n                                {dropdown}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popper>\r\n            </Manager>\r\n        );\r\n    }\r\n\r\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            this.handleClose(event.nativeEvent);\r\n        } else {\r\n            this.handleOpen(event.nativeEvent);\r\n        }\r\n    };\r\n\r\n    private handleOpen: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: true }, () => {\r\n            this.getRootElement()?.addEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n\r\n    private handleClose: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (!shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: false }, () => {\r\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n\r\n    private getRootElement() {\r\n        return (\r\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\r\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\r\n        );\r\n    }\r\n}\r\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\r\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\r\n","import { Address } from '@bigcommerce/checkout-sdk';\r\nimport React from \"react\";\r\n\r\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\r\n\r\nimport { isExperimentEnabled } from '../common/utility';\r\n\r\nimport AddressType from \"./AddressType\";\r\nimport isValidStaticAddress from './isValidStaticAddress';\r\n\r\nexport interface SingleLineStaticAddressProps {\r\n    address: Address;\r\n    type?: AddressType;\r\n}\r\n\r\nexport const getAddressContent: (value: Address) => string = ({\r\n    firstName,\r\n    lastName,\r\n    address1,\r\n    address2,\r\n    city,\r\n    countryCode,\r\n    stateOrProvince,\r\n    postalCode,\r\n}: Address): string => {\r\n    const addressParts = [address1, address2, city, stateOrProvince, countryCode, postalCode];\r\n    const nonEmptyAddressParts = addressParts.filter(Boolean);\r\n    const address = nonEmptyAddressParts.join(', ');\r\n\r\n    if (!firstName || !lastName || !address) {\r\n        return '';\r\n    }\r\n\r\n    return `${firstName} ${lastName}, ${address}`;\r\n};\r\n\r\nconst SingleLineStaticAddress = ({ address, type }: SingleLineStaticAddressProps) => {\r\n    const {\r\n        checkoutState: {\r\n            data: { getConfig, getBillingAddressFields, getShippingAddressFields },\r\n        }\r\n    } = useCheckout();\r\n\r\n    const config = getConfig();\r\n    const validateAddressFields =\r\n        isExperimentEnabled(\r\n            config?.checkoutSettings,\r\n            'CHECKOUT-7560.address_fields_max_length_validation',\r\n        );\r\n\r\n    const fields =\r\n        type === AddressType.Billing\r\n            ? getBillingAddressFields(address.countryCode)\r\n            : type === AddressType.Shipping\r\n                ? getShippingAddressFields(address.countryCode)\r\n                : undefined;\r\n\r\n    const isValid = isValidStaticAddress(address, validateAddressFields, fields);\r\n\r\n    return !isValid ? null : (\r\n        <div className=\"vcard checkout-address--static\" data-test=\"static-address\">\r\n            <p className=\"address-entry\">\r\n                {getAddressContent(address)}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleLineStaticAddress;\r\n","import React, { FunctionComponent, useState } from 'react';\r\n\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\n\r\nimport { AddressSelectProps } from './AddressSelect';\r\nimport SingleLineStaticAddress from './SingleLineStaticAddress';\r\nimport StaticAddress from './StaticAddress';\r\n\r\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses' | 'type' | 'showSingleLineAddress' | 'placeholderText'>;\r\n\r\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\r\n    selectedAddress,\r\n    language,\r\n    type,\r\n    showSingleLineAddress,\r\n    placeholderText,\r\n}) => {\r\n    const [ariaExpanded, setAriaExpanded] = useState(false);\r\n\r\n    const SelectedAddress = () => {\r\n        if (!selectedAddress) {\r\n            return placeholderText ?? <TranslatedString id=\"address.enter_address_action\" />;\r\n        }\r\n\r\n        return showSingleLineAddress\r\n            ? <SingleLineStaticAddress address={selectedAddress} type={type} />\r\n            : <StaticAddress address={selectedAddress} type={type} />;\r\n    }\r\n\r\n    return (\r\n        <a\r\n            aria-controls=\"addressDropdown\"\r\n            aria-describedby={language.translate('address.enter_or_select_address_action')}\r\n            aria-expanded={ariaExpanded}\r\n            className=\"button dropdown-button dropdown-toggle--select\"\r\n            data-test=\"address-select-button\"\r\n            href=\"#\"\r\n            id=\"addressToggle\"\r\n            onBlur={() => setAriaExpanded(false)}\r\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\r\n        >\r\n            <SelectedAddress />\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default withLanguage(AddressSelectButton);\r\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo } from 'react';\r\n\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { PoweredByPayPalFastlaneLabel, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\r\n\r\nimport { DropdownTrigger } from '../ui/dropdown';\r\n\r\nimport AddressSelectButton from './AddressSelectButton';\r\nimport AddressType from './AddressType';\r\nimport isEqualAddress from './isEqualAddress';\r\nimport StaticAddress from './StaticAddress';\r\n\r\nimport './AddressSelect.scss';\r\n\r\nexport interface AddressSelectProps {\r\n    addresses: CustomerAddress[];\r\n    selectedAddress?: Address;\r\n    type: AddressType;\r\n    showSingleLineAddress?: boolean;\r\n    onSelectAddress(address: Address): void;\r\n    onUseNewAddress(currentAddress?: Address): void;\r\n    placeholderText?: React.JSX.Element;\r\n}\r\n\r\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\r\n    addresses,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n    selectedAddress,\r\n    type,\r\n}) => (\r\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\r\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\r\n            <a\r\n                data-test=\"add-new-address\"\r\n                href=\"#\"\r\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\r\n            >\r\n                <TranslatedString id=\"address.enter_address_action\" />\r\n            </a>\r\n        </li>\r\n        {addresses.map((address) => (\r\n            <li\r\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\r\n                data-test=\"address-select-option\"\r\n                key={address.id}\r\n            >\r\n                <a\r\n                    data-test=\"address-select-option-action\"\r\n                    href=\"#\"\r\n                    onClick={preventDefault(() => onSelectAddress(address))}\r\n                >\r\n                    <StaticAddress address={address} type={type} />\r\n                </a>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nconst AddressSelect = ({\r\n    addresses,\r\n    selectedAddress,\r\n    type,\r\n    showSingleLineAddress,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n    placeholderText,\r\n}: AddressSelectProps) => {\r\n    const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\r\n\r\n    const handleSelectAddress = (newAddress: Address) => {\r\n        if (!isEqualAddress(selectedAddress, newAddress)) {\r\n            onSelectAddress(newAddress);\r\n        }\r\n    };\r\n\r\n    const handleUseNewAddress = () => {\r\n        onUseNewAddress(selectedAddress);\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-field\">\r\n            <div className=\"dropdown--select\">\r\n                <DropdownTrigger\r\n                    dropdown={\r\n                        <AddressSelectMenu\r\n                            addresses={addresses}\r\n                            onSelectAddress={handleSelectAddress}\r\n                            onUseNewAddress={handleUseNewAddress}\r\n                            selectedAddress={selectedAddress}\r\n                            type={type}\r\n                        />\r\n                    }\r\n                >\r\n                    <AddressSelectButton\r\n                        addresses={addresses}\r\n                        placeholderText={placeholderText}\r\n                        selectedAddress={selectedAddress}\r\n                        showSingleLineAddress={showSingleLineAddress}\r\n                        type={type}\r\n                    />\r\n                </DropdownTrigger>\r\n            </div>\r\n\r\n            {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(AddressSelect);\r\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\n\r\nimport { AddressSelect, AddressType } from '../address';\r\n\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport interface ItemAddressSelectProps {\r\n    item: ShippableItem;\r\n    addresses: CustomerAddress[];\r\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\r\n    onUseNewAddress(itemId: string, itemKey: string): void;\r\n}\r\n\r\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\r\n    item: { id, key, imageUrl, quantity, name, options, consignment },\r\n    addresses,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n}) => {\r\n    const handleUseNewAddress = useCallback(\r\n        () => {\r\n            onUseNewAddress(id as string, key);\r\n        },\r\n        [id, onUseNewAddress, key],\r\n    );\r\n\r\n    const handleSelectAddress = useCallback(\r\n        (address: Address) => {\r\n            onSelectAddress(address, id as string, key);\r\n        },\r\n        [id, key, onSelectAddress],\r\n    );\r\n\r\n    return (\r\n        <div className=\"consignment\">\r\n            <figure className=\"consignment-product-figure\">\r\n                {imageUrl && <img alt={name} src={imageUrl} />}\r\n            </figure>\r\n\r\n            <div className=\"consignment-product-body\">\r\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\r\n\r\n                {(options || []).map(({ name: optionName, value, nameId }) => (\r\n                    <ul\r\n                        className=\"product-options optimizedCheckout-contentSecondary\"\r\n                        data-test=\"consigment-item-product-options\"\r\n                        key={nameId}\r\n                    >\r\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\r\n                    </ul>\r\n                ))}\r\n\r\n                <AddressSelect\r\n                    addresses={addresses}\r\n                    onSelectAddress={handleSelectAddress}\r\n                    onUseNewAddress={handleUseNewAddress}\r\n                    selectedAddress={consignment && consignment.shippingAddress}\r\n                    type={AddressType.Shipping}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(ItemAddressSelect);\r\n","import { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\r\n\r\nconst OrderComments: FunctionComponent = () => {\r\n    const renderLabel = useCallback(\r\n        (name) => (\r\n            <Label hidden htmlFor={name}>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Label>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" maxLength={2000} />,\r\n        [],\r\n    );\r\n\r\n    const legend = useMemo(\r\n        () => (\r\n            <Legend>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Legend>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\r\n            <FormField id=\"orderComment\" input={renderInput} label={renderLabel} name=\"orderComment\" />\r\n        </Fieldset>\r\n    );\r\n};\r\n\r\nexport default OrderComments;\r\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function getRecommendedShippingOption(\r\n    availableShippingOptions: ShippingOption[],\r\n): ShippingOption | undefined {\r\n    if (!availableShippingOptions) {\r\n        return;\r\n    }\r\n\r\n    return availableShippingOptions.find(\r\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\r\n    );\r\n}\r\n","import { noop } from 'lodash';\r\nimport { createContext } from 'react';\r\n\r\nexport interface AccordionContextProps {\r\n    selectedItemId?: string;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\r\n\r\nexport default AccordionContext;\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionItemProps {\r\n    bodyClassName?: string;\r\n    children?: ReactNode;\r\n    className?: string;\r\n    classNameSelected?: string;\r\n    headerClassName?: string;\r\n    headerClassNameSelected?: string;\r\n    itemId: string;\r\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\r\n}\r\n\r\nexport interface AccordionItemHeaderProps {\r\n    isSelected: boolean;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\r\n    bodyClassName = 'accordion-item-body',\r\n    children,\r\n    className = 'accordion-item',\r\n    classNameSelected = 'accordion-item--selected',\r\n    headerClassName = 'accordion-item-header',\r\n    headerClassNameSelected = 'accordion-item-header--selected',\r\n    headerContent,\r\n    itemId,\r\n}) => {\r\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\r\n    const isSelected = selectedItemId === itemId;\r\n\r\n    const transitionEndListener = useCallback((node: Node, done) => {\r\n        node.addEventListener('transitionend', ({ target }: Event) => {\r\n            if (target === node) {\r\n                done();\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\r\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\r\n                {headerContent({ isSelected, onToggle })}\r\n            </div>\r\n\r\n            {children ? (\r\n                <CSSTransition\r\n                    addEndListener={transitionEndListener}\r\n                    classNames={bodyClassName}\r\n                    in={isSelected}\r\n                    mountOnEnter\r\n                    timeout={{}}\r\n                    unmountOnExit\r\n                >\r\n                    <div className={bodyClassName}>{children}</div>\r\n                </CSSTransition>\r\n            ) : null}\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default memo(AccordionItem);\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { noop } from 'lodash';\r\nimport React, { ReactNode, useState } from 'react';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionProps {\r\n    children: ReactNode;\r\n    className?: string;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    onSelect?(id: string): void;\r\n}\r\n\r\nconst Accordion = ({\r\n    children,\r\n    className = 'accordion',\r\n    defaultSelectedItemId,\r\n    isDisabled,\r\n    onSelect = noop,\r\n}: AccordionProps) => {\r\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\r\n\r\n    const handleToggleItem: (id: string) => void = (id) => {\r\n        if (isDisabled) {\r\n            return;\r\n        }\r\n\r\n        setSelectedItemId(id);\r\n        onSelect(id);\r\n    };\r\n\r\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\r\n        return {\r\n            onToggle: handleToggleItem,\r\n            selectedItemId: newSelectedItemId,\r\n        };\r\n    });\r\n\r\n    return (\r\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\r\n            <ul className={className}>{children}</ul>\r\n        </AccordionContext.Provider>\r\n    );\r\n};\r\n\r\nexport default Accordion;\r\n","import { connect } from 'formik';\r\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\r\nimport shallowEqual from 'shallowequal';\r\n\r\nimport ConnectFormikProps from './ConnectFormikProps';\r\n\r\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\r\n    OriginalComponent: ComponentType<TProps>,\r\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\r\n    const InnerComponent: FunctionComponent<TProps> = memo(\r\n        (props) => <OriginalComponent {...props} />,\r\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\r\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\r\n    );\r\n\r\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\r\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\r\n    >;\r\n\r\n    DecoratedComponent.displayName = `ConnectFormik(${\r\n        OriginalComponent.displayName || OriginalComponent.name\r\n    })`;\r\n\r\n    return DecoratedComponent;\r\n}\r\n","import { noop } from 'lodash';\r\nimport React, {\r\n    createContext,\r\n    FunctionComponent,\r\n    memo,\r\n    ReactNode,\r\n    useCallback,\r\n    useMemo,\r\n} from 'react';\r\n\r\nimport { Accordion } from '@bigcommerce/checkout/ui';\r\n\r\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\r\n\r\nexport interface ChecklistProps {\r\n    children: ReactNode;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    name: string;\r\n    onSelect?(value: string): void;\r\n}\r\n\r\nexport interface ChecklistContextProps {\r\n    name: string;\r\n}\r\n\r\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\r\n\r\nconst Checklist: FunctionComponent<\r\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\r\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\r\n    const handleSelect = useCallback(\r\n        (value: string) => {\r\n            setFieldValue(name, value);\r\n            onSelect(value);\r\n        },\r\n        [name, onSelect, setFieldValue],\r\n    );\r\n\r\n    const contextValue = useMemo(() => ({ name }), [name]);\r\n\r\n    return (\r\n        <ChecklistContext.Provider value={contextValue}>\r\n            <Accordion\r\n                {...props}\r\n                className=\"form-checklist optimizedCheckout-form-checklist\"\r\n                onSelect={handleSelect}\r\n            />\r\n        </ChecklistContext.Provider>\r\n    );\r\n};\r\n\r\nexport default connectFormik(memo(Checklist));\r\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\r\n\r\nimport Input from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    isSelected: boolean;\r\n}\r\n\r\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\r\n    id,\r\n    isSelected,\r\n    children,\r\n    ...props\r\n}) => (\r\n    <>\r\n        <Input\r\n            {...props}\r\n            checked={isSelected}\r\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\r\n            id={id}\r\n            type=\"radio\"\r\n        />\r\n\r\n        <Label htmlFor={id}>{children}</Label>\r\n    </>\r\n);\r\n\r\nexport default ChecklistItemInput;\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\r\n\r\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport { ChecklistContext } from './Checklist';\r\nimport ChecklistItemInput from './ChecklistItemInput';\r\n\r\nexport interface ChecklistItemProps {\r\n    content?: ReactNode;\r\n    htmlId?: string;\r\n    isDisabled?: boolean;\r\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\r\n    value: string;\r\n}\r\n\r\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\r\n    isDisabled,\r\n    value,\r\n    content,\r\n    htmlId = kebabCase(value),\r\n    label,\r\n    ...rest\r\n}) => {\r\n    const { name = '' } = useContext(ChecklistContext) || {};\r\n\r\n    const renderInput = useCallback(\r\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\r\n            <ChecklistItemInput\r\n                {...field}\r\n                disabled={isDisabled}\r\n                id={htmlId}\r\n                isSelected={field.value === value}\r\n                value={value}\r\n            >\r\n                {label instanceof Function ? label(isSelected) : label}\r\n            </ChecklistItemInput>\r\n        )),\r\n        [htmlId, isDisabled, label, value],\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\r\n            if (value === selectedValue) {\r\n                onToggle(value);\r\n            }\r\n        }),\r\n        [],\r\n    );\r\n\r\n    const renderHeaderContent = useCallback(\r\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\r\n            <BasicFormField\r\n                className=\"form-checklist-option\"\r\n                name={name}\r\n                onChange={handleChange(onToggle)}\r\n                render={renderInput(isSelected)}\r\n            />\r\n        ),\r\n        [handleChange, name, renderInput],\r\n    );\r\n\r\n    return (\r\n        <AccordionItem\r\n            {...rest}\r\n            bodyClassName=\"form-checklist-body\"\r\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\r\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\r\n            headerClassName=\"form-checklist-header\"\r\n            headerClassNameSelected=\"form-checklist-header--selected\"\r\n            headerContent={renderHeaderContent}\r\n            itemId={value}\r\n        >\r\n            {content}\r\n        </AccordionItem>\r\n    );\r\n};\r\n\r\nexport default memo(ChecklistItem);\r\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\n\r\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\r\n\r\nimport { EMPTY_ARRAY } from '../../common/utility';\r\nimport { Checklist, ChecklistItem } from '../../ui/form';\r\nimport { LoadingOverlay } from '../../ui/loading';\r\n\r\nimport StaticShippingOption from './StaticShippingOption';\r\n\r\ninterface ShippingOptionListItemProps {\r\n    consignmentId: string;\r\n    isMultiShippingMode: boolean;\r\n    selectedShippingOptionId?: string;\r\n    shippingOption: ShippingOption;\r\n}\r\n\r\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\r\n    consignmentId,\r\n    isMultiShippingMode,\r\n    selectedShippingOptionId,\r\n    shippingOption,\r\n}) => {\r\n    const isSelected = selectedShippingOptionId === shippingOption.id;\r\n\r\n    const renderLabel = useCallback(\r\n        () => (\r\n            <div className=\"shippingOptionLabel\">\r\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\r\n                {(isSelected && !isMultiShippingMode) && (\r\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\r\n                )}\r\n            </div>\r\n        ),\r\n        [isSelected, isMultiShippingMode, shippingOption],\r\n    );\r\n\r\n\r\n    return (\r\n        <ChecklistItem\r\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\r\n            label={renderLabel}\r\n            value={shippingOption.id}\r\n        />\r\n    );\r\n};\r\n\r\nexport interface ShippingOptionListProps {\r\n    consignmentId: string;\r\n    inputName: string;\r\n    isLoading: boolean;\r\n    isMultiShippingMode: boolean;\r\n    selectedShippingOptionId?: string;\r\n    shippingOptions?: ShippingOption[];\r\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\r\n}\r\n\r\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\r\n    consignmentId,\r\n    inputName,\r\n    isLoading,\r\n    isMultiShippingMode,\r\n    shippingOptions = EMPTY_ARRAY,\r\n    selectedShippingOptionId,\r\n    onSelectedOption,\r\n}) => {\r\n    const handleSelect = useCallback(\r\n        (value: string) => {\r\n            onSelectedOption(consignmentId, value);\r\n        },\r\n        [consignmentId, onSelectedOption],\r\n    );\r\n\r\n    if (!shippingOptions.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <LoadingOverlay isLoading={isLoading}>\r\n            <Checklist\r\n                aria-live=\"polite\"\r\n                defaultSelectedItemId={selectedShippingOptionId}\r\n                name={inputName}\r\n                onSelect={handleSelect}\r\n            >\r\n                {shippingOptions.map((shippingOption) => (\r\n                    <ShippingOptionListItem\r\n                        consignmentId={consignmentId}\r\n                        isMultiShippingMode={isMultiShippingMode}\r\n                        key={shippingOption.id}\r\n                        selectedShippingOptionId={selectedShippingOptionId}\r\n                        shippingOption={shippingOption}\r\n                    />\r\n                ))}\r\n            </Checklist>\r\n        </LoadingOverlay>\r\n    );\r\n};\r\n\r\nexport default memo(ShippingOptionsList);\r\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport { AddressType, StaticAddress } from '../../address';\r\nimport { withAnalytics } from '../../analytics';\r\nimport { withFormikExtended } from '../../common/form';\r\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\r\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\r\n\r\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\r\nimport './ShippingOptionsForm.scss';\r\nimport ShippingOptionsList from './ShippingOptionsList';\r\n\r\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\r\n\r\nclass ShippingOptionsForm extends PureComponent<\r\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\r\n> {\r\n    private unsubscribe?: () => void;\r\n\r\n    componentDidMount(): void {\r\n        const { subscribeToConsignments } = this.props;\r\n\r\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        const {\r\n            analyticsTracker,\r\n            consignments,\r\n            shouldShowShippingOptions\r\n        } = this.props;\r\n\r\n        if (consignments?.length && shouldShowShippingOptions) {\r\n            analyticsTracker.showShippingMethods();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        if (this.unsubscribe) {\r\n            this.unsubscribe();\r\n            this.unsubscribe = undefined;\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            consignments,\r\n            isMultiShippingMode,\r\n            selectShippingOption,\r\n            isLoading,\r\n            shouldShowShippingOptions,\r\n            invalidShippingMessage,\r\n            methodId\r\n        } = this.props;\r\n\r\n        if (!consignments?.length || !shouldShowShippingOptions) {\r\n            return (\r\n                <ChecklistSkeleton\r\n                    additionalClassName=\"shippingOptions-skeleton\"\r\n                    isLoading={isLoading()}\r\n                    rows={2}\r\n                >\r\n                    {this.renderNoShippingOptions(\r\n                        <TranslatedString\r\n                            id={\r\n                                methodId || isMultiShippingMode\r\n                                    ? 'shipping.select_shipping_address_text'\r\n                                    : 'shipping.enter_shipping_address_text'\r\n                            }\r\n                        />,\r\n                    )}\r\n                </ChecklistSkeleton>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {consignments.map((consignment) => (\r\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\r\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\r\n\r\n                        <ShippingOptionsList\r\n                            consignmentId={consignment.id}\r\n                            inputName={getRadioInputName(consignment.id)}\r\n                            isLoading={isLoading(consignment.id)}\r\n                            isMultiShippingMode = {isMultiShippingMode}\r\n                            onSelectedOption={selectShippingOption}\r\n                            selectedShippingOptionId={\r\n                                consignment.selectedShippingOption &&\r\n                                consignment.selectedShippingOption.id\r\n                            }\r\n                            shippingOptions={consignment.availableShippingOptions}\r\n                        />\r\n\r\n                        {(!consignment.availableShippingOptions ||\r\n                            !consignment.availableShippingOptions.length) && (\r\n                            <ChecklistSkeleton\r\n                                additionalClassName=\"shippingOptions-skeleton\"\r\n                                isLoading={isLoading(consignment.id)}\r\n                                rows={2}\r\n                            >\r\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\r\n                            </ChecklistSkeleton>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\r\n        const { selectShippingOption, setFieldValue } = this.props;\r\n\r\n        const consignment = (data.getConsignments() || []).find(\r\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\r\n                !selectedShippingOption && shippingOptions,\r\n        );\r\n\r\n        if (!consignment || !consignment.availableShippingOptions) {\r\n            return;\r\n        }\r\n\r\n        const { availableShippingOptions, id } = consignment;\r\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\r\n        const singleShippingOption =\r\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\r\n        const defaultShippingOption = recommendedOption || singleShippingOption;\r\n\r\n        if (!defaultShippingOption) {\r\n            return;\r\n        }\r\n\r\n        await selectShippingOption(id, defaultShippingOption.id);\r\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\r\n    };\r\n\r\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\r\n        return (\r\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\r\n                <p\r\n                    aria-live=\"polite\"\r\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\r\n                    role=\"alert\"\r\n                >\r\n                    {message}\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderConsignment(consignment: Consignment): ReactNode {\r\n        const { cart } = this.props;\r\n\r\n        return (\r\n            <div className=\"staticConsignment\">\r\n                <strong>\r\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\r\n                </strong>\r\n\r\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\r\n\r\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getRadioInputName(consignmentId: string): string {\r\n    return `shippingOptionIds.${consignmentId}`;\r\n}\r\n\r\nexport interface ShippingOptionsFormValues {\r\n    shippingOptionIds: {\r\n        [shippingOptionIds: string]: string;\r\n    };\r\n}\r\n\r\nexport default withAnalytics(withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\r\n    handleSubmit: noop,\r\n    mapPropsToValues({ consignments }) {\r\n        const shippingOptionIds: { [id: string]: string } = {};\r\n\r\n        (consignments || []).forEach((consignment) => {\r\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\r\n                ? consignment.selectedShippingOption.id\r\n                : '';\r\n        });\r\n\r\n        return { shippingOptionIds };\r\n    },\r\n})(ShippingOptionsForm));\r\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { map, sortBy, uniq } from 'lodash';\r\nimport { createSelector } from 'reselect';\r\n\r\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport { withCheckout } from '../../checkout';\r\nimport getShippableLineItems from '../getShippableLineItems';\r\nimport getShippingMethodId from '../getShippingMethodId';\r\n\r\nimport ShippingOptionsForm from './ShippingOptionsForm';\r\n\r\nexport interface ShippingOptionsProps {\r\n    isInitialValueLoaded: boolean;\r\n    isMultiShippingMode: boolean;\r\n    isUpdatingAddress?: boolean;\r\n    shouldShowShippingOptions: boolean;\r\n}\r\n\r\nexport interface WithCheckoutShippingOptionsProps {\r\n    invalidShippingMessage: string;\r\n    methodId?: string;\r\n    consignments?: Consignment[];\r\n    cart: Cart;\r\n    isSelectingShippingOption(consignmentId?: string): boolean;\r\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\r\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\r\n    isLoading(consignmentId?: string): boolean;\r\n}\r\n\r\nconst subscribeToConsignmentsSelector = createSelector(\r\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\r\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\r\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\r\n    },\r\n);\r\n\r\nexport const isLoadingSelector = createSelector(\r\n    (_: CheckoutSelectors, isUpdatingAddress?: boolean) => isUpdatingAddress,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\r\n    (\r\n        isUpdatingAddress,\r\n        isLoadingShippingOptions,\r\n        isSelectingShippingOption,\r\n        isUpdatingConsignment,\r\n        isCreatingConsignments,\r\n    ) => {\r\n        return (consignmentId?: string) => {\r\n            return (\r\n                isUpdatingAddress ||\r\n                isLoadingShippingOptions() ||\r\n                isSelectingShippingOption(consignmentId) ||\r\n                isUpdatingConsignment(consignmentId) ||\r\n                isCreatingConsignments()\r\n            );\r\n        };\r\n    },\r\n);\r\n\r\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\r\n    if (unsortedConsignments.length < 2) {\r\n        return unsortedConsignments;\r\n    }\r\n\r\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\r\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\r\n\r\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\r\n};\r\n\r\nexport function mapToShippingOptions(\r\n    { checkoutService, checkoutState }: CheckoutContextProps,\r\n    props: ShippingOptionsProps,\r\n): WithCheckoutShippingOptionsProps | null {\r\n    const {\r\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\r\n        statuses: { isSelectingShippingOption },\r\n    } = checkoutState;\r\n\r\n    const customer = getCustomer();\r\n    const cart = getCart();\r\n    const config = getConfig();\r\n    const checkout = getCheckout();\r\n\r\n    if (!config || !checkout || !customer || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const consignments = sortConsignments(cart, getConsignments() || []);\r\n    const methodId = getShippingMethodId(checkout, config);\r\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\r\n\r\n    return {\r\n        cart,\r\n        consignments,\r\n        invalidShippingMessage: shippingQuoteFailedMessage,\r\n        isLoading: isLoadingSelector(checkoutState, props.isUpdatingAddress),\r\n        isSelectingShippingOption,\r\n        methodId,\r\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\r\n        subscribeToConsignments: subscribeToConsignmentsSelector({\r\n            checkoutService,\r\n            checkoutState,\r\n        }),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\r\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { OrderComments } from '../orderComments';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Legend } from '../ui/form';\r\n\r\nimport { ShippingOptions } from './shippingOption';\r\n\r\nexport interface ShippingFormFooterProps {\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    shouldShowShippingOptions?: boolean;\r\n    shouldDisableSubmit: boolean;\r\n    isInitialValueLoaded: boolean;\r\n    isLoading: boolean;\r\n}\r\n\r\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\r\n    cartHasChanged,\r\n    isMultiShippingMode,\r\n    shouldShowOrderComments,\r\n    shouldShowShippingOptions = false,\r\n    shouldDisableSubmit,\r\n    isInitialValueLoaded,\r\n    isLoading,\r\n}) => {\r\n    return (\r\n        <>\r\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\r\n            <Fieldset\r\n                id=\"checkout-shipping-options\"\r\n                legend={\r\n                    <>\r\n                        <Legend>\r\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\r\n                        </Legend>\r\n\r\n                        {cartHasChanged && (\r\n                            <Alert type={AlertType.Error}>\r\n                                <strong>\r\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\r\n                                </strong>\r\n                            </Alert>\r\n                        )}\r\n                    </>\r\n                }\r\n            >\r\n                <ShippingOptions\r\n                    isInitialValueLoaded={isInitialValueLoaded}\r\n                    isMultiShippingMode={isMultiShippingMode}\r\n                    isUpdatingAddress={isLoading}\r\n                    shouldShowShippingOptions={shouldShowShippingOptions}\r\n                />\r\n            </Fieldset>\r\n\r\n            {shouldShowOrderComments && <OrderComments />}\r\n\r\n            <div className=\"form-actions\">\r\n                <Button\r\n                    disabled={shouldDisableSubmit}\r\n                    id=\"checkout-shipping-continue\"\r\n                    isLoading={isLoading}\r\n                    type=\"submit\"\r\n                    variant={ButtonVariant.Primary}\r\n                >\r\n                    <TranslatedString id=\"common.continue_action\" />\r\n                </Button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShippingFormFooter;\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    Cart,\r\n    CheckoutSelectors,\r\n    CheckoutStoreSelector,\r\n    Consignment,\r\n    ConsignmentAssignmentRequestBody,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps } from 'formik';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport {\r\n    AddressFormModal,\r\n    AddressFormValues,\r\n    isValidAddress,\r\n    mapAddressFromFormValues,\r\n} from '../address';\r\nimport { ErrorModal } from '../common/error';\r\nimport { withFormikExtended } from '../common/form';\r\nimport { Form } from '../ui/form';\r\n\r\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\r\nimport getShippableItemsCount from './getShippableItemsCount';\r\nimport getShippableLineItems from './getShippableLineItems';\r\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\r\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\r\nimport ItemAddressSelect from './ItemAddressSelect';\r\nimport ShippableItem from './ShippableItem';\r\nimport ShippingFormFooter from './ShippingFormFooter';\r\nimport updateShippableItems from './updateShippableItems';\r\n\r\nexport interface MultiShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    cart: Cart;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    customerMessage: string;\r\n    isLoading: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    defaultCountryCode?: string;\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    isInitialValueLoaded: boolean;\r\n    validateAddressFields: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    createCustomerAddress(address: AddressRequestBody): void;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSubmit(values: MultiShippingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    onUseNewAddress(address: Address, itemId: string): void;\r\n}\r\n\r\ninterface ShippableItemId {\r\n    key: string;\r\n    itemId: string;\r\n}\r\n\r\nexport interface MultiShippingFormState {\r\n    items: ShippableItem[];\r\n    itemAddingAddress?: ShippableItemId;\r\n    createCustomerAddressError?: Error;\r\n}\r\n\r\nclass MultiShippingForm extends PureComponent<\r\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\r\n    MultiShippingFormState\r\n> {\r\n    static getDerivedStateFromProps(\r\n        { cart, consignments }: MultiShippingFormProps,\r\n        state: MultiShippingFormState,\r\n    ) {\r\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\r\n            return { items: getShippableLineItems(cart, consignments) };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    state: MultiShippingFormState = { items: [] };\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            consignments,\r\n            cart,\r\n            cartHasChanged,\r\n            shouldShowOrderComments,\r\n            isInitialValueLoaded,\r\n            isLoading,\r\n            getFields,\r\n            defaultCountryCode,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            googleMapsApiKey,\r\n            isFloatingLabelEnabled,\r\n        } = this.props;\r\n\r\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <ErrorModal\r\n                    error={createCustomerAddressError}\r\n                    message={\r\n                        <>\r\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\r\n                            <TranslatedString id=\"customer.create_address_error\" />\r\n                        </>\r\n                    }\r\n                    onClose={this.handleCloseErrorModal}\r\n                    shouldShowErrorCode={false}\r\n                />\r\n                <AddressFormModal\r\n                    countries={countries}\r\n                    countriesWithAutocomplete={countriesWithAutocomplete}\r\n                    defaultCountryCode={defaultCountryCode}\r\n                    getFields={getFields}\r\n                    googleMapsApiKey={googleMapsApiKey}\r\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                    isLoading={isLoading}\r\n                    isOpen={!!itemAddingAddress}\r\n                    onRequestClose={this.handleCloseAddAddressForm}\r\n                    onSaveAddress={this.handleSaveAddress}\r\n                />\r\n\r\n                <Form>\r\n                    <ul className=\"consignmentList\">\r\n                        {items.map((item) => (\r\n                            <li key={item.key}>\r\n                                <ItemAddressSelect\r\n                                    addresses={addresses}\r\n                                    item={item}\r\n                                    onSelectAddress={this.handleSelectAddress}\r\n                                    onUseNewAddress={this.handleUseNewAddress}\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <ShippingFormFooter\r\n                        cartHasChanged={cartHasChanged}\r\n                        isInitialValueLoaded={isInitialValueLoaded}\r\n                        isLoading={isLoading}\r\n                        isMultiShippingMode={true}\r\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                        shouldShowOrderComments={shouldShowOrderComments}\r\n                        shouldShowShippingOptions={\r\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\r\n                        }\r\n                    />\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n    private handleCloseErrorModal: () => void = () => {\r\n        this.setState({ createCustomerAddressError: undefined });\r\n    };\r\n\r\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\r\n        const { createCustomerAddress } = this.props;\r\n        const { itemAddingAddress } = this.state;\r\n\r\n        if (!itemAddingAddress) {\r\n            return;\r\n        }\r\n\r\n        const shippingAddress = mapAddressFromFormValues(address);\r\n\r\n        await this.handleSelectAddress(\r\n            shippingAddress,\r\n            itemAddingAddress.itemId,\r\n            itemAddingAddress.key,\r\n        );\r\n\r\n        try {\r\n            await createCustomerAddress(shippingAddress);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                this.setState({ createCustomerAddressError: error });\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            itemAddingAddress: undefined,\r\n        });\r\n    };\r\n\r\n    private handleUseNewAddress: (itemId: string, itemKey: string) => void = (\r\n        itemId,\r\n        itemKey,\r\n    ) => {\r\n        this.setState({\r\n            itemAddingAddress: {\r\n                key: itemKey,\r\n                itemId,\r\n            },\r\n        });\r\n    };\r\n\r\n    private handleCloseAddAddressForm: () => void = () => {\r\n        this.setState({\r\n            itemAddingAddress: undefined,\r\n        });\r\n    };\r\n\r\n    private handleSelectAddress: (\r\n        address: Address,\r\n        itemId: string,\r\n        itemKey: string,\r\n    ) => Promise<void> = async (address, itemId, itemKey) => {\r\n        const { assignItem, onUnhandledError, getFields, validateAddressFields } = this.props;\r\n\r\n        if (!isValidAddress(address, getFields(address.countryCode), validateAddressFields)) {\r\n            return onUnhandledError(new AssignItemInvalidAddressError());\r\n        }\r\n\r\n        try {\r\n            const { data } = await assignItem({\r\n                address,\r\n                lineItems: [\r\n                    {\r\n                        itemId,\r\n                        quantity: 1,\r\n                    },\r\n                ],\r\n            });\r\n\r\n            this.syncItems(itemKey, address, data);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(new AssignItemFailedError(error));\r\n            }\r\n        }\r\n    };\r\n\r\n    private shouldDisableSubmit: () => boolean = () => {\r\n        const { isLoading, consignments } = this.props;\r\n\r\n        return isLoading || !hasSelectedShippingOptions(consignments);\r\n    };\r\n\r\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\r\n        key,\r\n        address,\r\n        data,\r\n    ) => {\r\n        const { items: currentItems } = this.state;\r\n        const items = updateShippableItems(\r\n            currentItems,\r\n            {\r\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\r\n                address,\r\n            },\r\n            {\r\n                cart: data.getCart(),\r\n                consignments: data.getConsignments(),\r\n            },\r\n        );\r\n\r\n        if (items) {\r\n            this.setState({ items });\r\n        }\r\n    };\r\n}\r\n\r\nexport interface MultiShippingFormValues {\r\n    orderComment: string;\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({ customerMessage }) => ({\r\n            orderComment: customerMessage,\r\n        }),\r\n        enableReinitialize: true,\r\n    })(MultiShippingForm),\r\n);\r\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { isEqualAddress } from '../address';\r\n\r\nimport findConsignment from './findConsignment';\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport interface UpdateItemParams {\r\n    updatedItemIndex: number;\r\n    address: Address;\r\n}\r\n\r\nexport default function updateShippableItems(\r\n    items: ShippableItem[],\r\n    { updatedItemIndex, address }: UpdateItemParams,\r\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\r\n): ShippableItem[] | undefined {\r\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\r\n        return;\r\n    }\r\n\r\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\r\n\r\n    const updatedConsignment = (consignments || []).find((consignment) =>\r\n        isEqualAddress(consignment.shippingAddress, address),\r\n    );\r\n\r\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\r\n\r\n    return items.map((item, i) => {\r\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\r\n            const itemId = newId ?? item.id;\r\n\r\n            return {\r\n                ...item,\r\n                id: itemId,\r\n                consignment: findConsignment(consignments || [], itemId as string),\r\n            };\r\n        }\r\n\r\n        return item;\r\n    });\r\n}\r\n\r\nfunction findNewItemId(\r\n    item: ShippableItem,\r\n    cart?: Cart,\r\n    consignment?: Consignment,\r\n): string | undefined {\r\n    if (!cart || !consignment) {\r\n        return;\r\n    }\r\n\r\n    const { physicalItems } = cart.lineItems;\r\n    const matchingCartItems = physicalItems.filter(\r\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\r\n    );\r\n\r\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\r\n\r\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconError: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconError);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconSuccess: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconSuccess);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconInfo: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconInfo);\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, ReactNode } from 'react';\r\n\r\nimport { IconError, IconInfo, IconSuccess } from '../icon';\r\n\r\nexport interface AlertProps {\r\n    additionalClassName?: string;\r\n    icon?: ReactNode;\r\n    testId?: string;\r\n    type?: AlertType;\r\n}\r\n\r\nexport enum AlertType {\r\n    Error = 'error',\r\n    Info = 'info',\r\n    Success = 'success',\r\n    Warning = 'warning',\r\n}\r\n\r\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\r\n    switch (type) {\r\n        case AlertType.Error:\r\n        case AlertType.Warning:\r\n            return <IconError />;\r\n\r\n        case AlertType.Success:\r\n            return <IconSuccess />;\r\n\r\n        case AlertType.Info:\r\n        default:\r\n            return <IconInfo />;\r\n    }\r\n}\r\n\r\nconst Alert: FunctionComponent<AlertProps> = ({\r\n    additionalClassName,\r\n    children,\r\n    icon,\r\n    testId,\r\n    type,\r\n}) => (\r\n    <div\r\n        className={classNames(\r\n            'alertBox',\r\n            additionalClassName,\r\n            { 'alertBox--info': type === AlertType.Info || !type },\r\n            { 'alertBox--error': type === AlertType.Error },\r\n            { 'alertBox--success': type === AlertType.Success },\r\n            { 'alertBox--warning': type === AlertType.Warning },\r\n        )}\r\n        data-test={testId}\r\n    >\r\n        <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\r\n\r\n        <div aria-live=\"assertive\" className=\"alertBox-column alertBox-message\" role=\"alert\">\r\n            {children}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Alert;\r\n","import { CheckoutSelectors, Consignment, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\n\r\nconst createShippingOptionsMap = (consignments: Consignment[]): Map<string, string | undefined> => {\r\n    return new Map(\r\n        consignments.map((consignment) => [consignment.id, consignment.selectedShippingOption?.id]),\r\n    );\r\n};\r\n\r\nexport const setRecommendedOrMissingShippingOption = async (\r\n    previousConsignment: Consignment[],\r\n    currentConsignments: Consignment[],\r\n    selectConsignmentShippingOption: (\r\n        consignmentId: string,\r\n        shippingOptionId: string,\r\n        options?: ShippingRequestOptions<object> | undefined,\r\n    ) => Promise<CheckoutSelectors>,\r\n): Promise<void> => {\r\n    const previousShippingOptions = createShippingOptionsMap(previousConsignment);\r\n\r\n    for (const consignment of currentConsignments) {\r\n        if (!consignment.selectedShippingOption) {\r\n            const previousShippingOptionId = previousShippingOptions.get(consignment.id);\r\n\r\n            if (previousShippingOptionId) {\r\n                // eslint-disable-next-line no-await-in-loop\r\n                await selectConsignmentShippingOption(consignment.id, previousShippingOptionId);\r\n\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            const recommendedOption = consignment.availableShippingOptions?.find(\r\n                (option) => option.isRecommended,\r\n            );\r\n\r\n            if (recommendedOption) {\r\n                // eslint-disable-next-line no-await-in-loop\r\n                await selectConsignmentShippingOption(consignment.id, recommendedOption.id);\r\n            }\r\n        }\r\n    }\r\n};\r\n","import { Address, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\r\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\r\n\r\nimport { AddressFormModal, AddressFormValues, AddressSelect, AddressType, isValidAddress, mapAddressFromFormValues } from \"../address\";\r\nimport { ErrorModal } from \"../common/error\";\r\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from \"../common/utility\";\r\n\r\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from \"./errors\";\r\nimport { MultiShippingConsignmentData } from \"./MultishippingV2Type\";\r\nimport { setRecommendedOrMissingShippingOption } from './utils';\r\n\r\ninterface ConsignmentAddressSelectorProps {\r\n    consignment?: MultiShippingConsignmentData;\r\n    defaultCountryCode?: string;\r\n    countriesWithAutocomplete: string[];\r\n    isLoading: boolean;\r\n    onUnhandledError(error: Error): void;\r\n    setConsignmentRequest?(consignmentRequest: ConsignmentCreateRequestBody): void;\r\n    selectedAddress?: Address;\r\n}\r\n\r\nconst ConsignmentAddressSelector = ({\r\n    consignment,\r\n    countriesWithAutocomplete,\r\n    defaultCountryCode,\r\n    isLoading,\r\n    onUnhandledError,\r\n    selectedAddress,\r\n    setConsignmentRequest,\r\n}: ConsignmentAddressSelectorProps) => {\r\n    const [isOpenNewAddressModal, setIsOpenNewAddressModal] = useState(false);\r\n    const [createCustomerAddressError, setCreateCustomerAddressError] = useState<Error>();\r\n\r\n    const {\r\n        checkoutState: {\r\n            data: {\r\n                getShippingCountries,\r\n                getCustomer,\r\n                getConfig,\r\n                getConsignments: getPreviousConsignments,\r\n                getShippingAddressFields: getFields,\r\n            },\r\n        },\r\n        checkoutService: {\r\n            updateConsignment,\r\n            createCustomerAddress,\r\n            selectConsignmentShippingOption,\r\n        },\r\n    } = useCheckout();\r\n\r\n    const countries = getShippingCountries() || EMPTY_ARRAY;\r\n    const customer = getCustomer();\r\n    const config = getConfig();\r\n\r\n    if (!config || !customer) {\r\n        return null;\r\n    }\r\n\r\n    const isFloatingLabelEnabledFlag = isFloatingLabelEnabled(config.checkoutSettings);\r\n    // TODO: add filter for addresses\r\n    const addresses = customer.addresses || EMPTY_ARRAY;\r\n    const {\r\n        checkoutSettings: {\r\n            googleMapsApiKey,\r\n        },\r\n    } = config;\r\n\r\n    const validateAddressFields =\r\n        isExperimentEnabled(\r\n            config.checkoutSettings,\r\n            'CHECKOUT-7560.address_fields_max_length_validation',\r\n        );\r\n\r\n    const handleSelectAddress = async (address: Address) => {\r\n        if (!isValidAddress(address, getFields(address.countryCode), validateAddressFields)) {\r\n            return onUnhandledError(new AssignItemInvalidAddressError());\r\n        }\r\n\r\n        if (!consignment) {\r\n            setConsignmentRequest?.({\r\n                address,\r\n                shippingAddress: address,\r\n                lineItems: [],\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const {\r\n                data: { getConsignments },\r\n            } = await updateConsignment({\r\n                id: consignment.id,\r\n                address,\r\n                shippingAddress: address,\r\n                lineItems: consignment.lineItems.map(({ id, quantity }) => ({ itemId: id, quantity })),\r\n            });\r\n\r\n            const currentConsignments = getConsignments();\r\n\r\n            if (currentConsignments && currentConsignments.length > 0) {\r\n                await setRecommendedOrMissingShippingOption(\r\n                    getPreviousConsignments() ?? [],\r\n                    currentConsignments,\r\n                    selectConsignmentShippingOption,\r\n                );\r\n            }\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(new AssignItemFailedError(error));\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUseNewAddress = () => {\r\n        setIsOpenNewAddressModal(true);\r\n    }\r\n\r\n    const handleCloseAddAddressForm = () => {\r\n        setIsOpenNewAddressModal(false);\r\n    }\r\n\r\n    const handleSaveAddress = async (addressFormValues: AddressFormValues) => {\r\n        const address = mapAddressFromFormValues(addressFormValues);\r\n\r\n        await handleSelectAddress(address);\r\n\r\n        try {\r\n            await createCustomerAddress(address);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                setCreateCustomerAddressError(error);\r\n            }\r\n        }\r\n\r\n        setIsOpenNewAddressModal(false);\r\n    }\r\n\r\n    const handleCloseErrorModal = () => {\r\n        setCreateCustomerAddressError(undefined);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorModal\r\n                error={createCustomerAddressError}\r\n                message={\r\n                    <>\r\n                        <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\r\n                        <TranslatedString id=\"customer.create_address_error\" />\r\n                    </>\r\n                }\r\n                onClose={handleCloseErrorModal}\r\n                shouldShowErrorCode={false}\r\n            />\r\n            <AddressFormModal\r\n                countries={countries}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                defaultCountryCode={defaultCountryCode}\r\n                getFields={getFields}\r\n                googleMapsApiKey={googleMapsApiKey}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabledFlag}\r\n                isLoading={isLoading}\r\n                isOpen={isOpenNewAddressModal}\r\n                onRequestClose={handleCloseAddAddressForm}\r\n                onSaveAddress={handleSaveAddress}\r\n            />\r\n            <AddressSelect\r\n                addresses={addresses}\r\n                onSelectAddress={handleSelectAddress}\r\n                onUseNewAddress={handleUseNewAddress}\r\n                placeholderText={<TranslatedString id=\"shipping.choose_shipping_address\" />}\r\n                selectedAddress={selectedAddress}\r\n                showSingleLineAddress\r\n                type={AddressType.Shipping}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConsignmentAddressSelector;\r\n","// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { Placement } from 'popper.js';\r\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\r\nimport { Manager, Popper, Reference } from 'react-popper';\r\n\r\nexport interface TooltipTriggerProps {\r\n    placement?: Placement;\r\n    tooltip: ReactNode;\r\n}\r\n\r\nexport interface TooltipTriggerState {\r\n    shouldShow: boolean;\r\n}\r\n\r\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\r\n    static defaultProps = {\r\n        placement: 'bottom',\r\n    };\r\n\r\n    state: Readonly<TooltipTriggerState> = {\r\n        shouldShow: false,\r\n    };\r\n\r\n    render() {\r\n        const { children, placement, tooltip } = this.props;\r\n        const { shouldShow } = this.state;\r\n\r\n        return (\r\n            <Manager>\r\n                <Reference>\r\n                    {({ ref }) => (\r\n                        <span\r\n                            onBlur={this.handleHide}\r\n                            onFocus={this.handleShow}\r\n                            onMouseEnter={this.handleShow}\r\n                            onMouseLeave={this.handleHide}\r\n                            ref={ref}\r\n                        >\r\n                            {children}\r\n                        </span>\r\n                    )}\r\n                </Reference>\r\n\r\n                <Popper\r\n                    modifiers={{\r\n                        hide: { enabled: false },\r\n                        flip: { enabled: false },\r\n                        preventOverflow: { enabled: false },\r\n                    }}\r\n                    placement={placement}\r\n                >\r\n                    {({ ref, style }) =>\r\n                        shouldShow && (\r\n                            <div ref={ref} style={style}>\r\n                                {tooltip}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popper>\r\n            </Manager>\r\n        );\r\n    }\r\n\r\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\r\n        this.setState({ shouldShow: true });\r\n    };\r\n\r\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\r\n        this.setState({ shouldShow: false });\r\n    };\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconHelp: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconHelp);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './Tooltip.scss';\r\n\r\nexport interface TooltipProps {\r\n    testId?: string;\r\n}\r\n\r\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\r\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\r\n        {children}\r\n    </span>\r\n);\r\n\r\nexport default Tooltip;\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\r\nimport { IconHelp, TooltipTrigger } from \"@bigcommerce/checkout/ui\";\r\n\r\nimport { Tooltip } from \"../ui/tooltip\";\r\nimport \"./ItemSplitTooltip.scss\";\r\n\r\nexport const ItemSplitTooltip: FunctionComponent = () => {\r\n    return (\r\n        <TooltipTrigger\r\n            placement=\"right-start\"\r\n            tooltip={\r\n                <Tooltip>\r\n                    <TranslatedString\r\n                        id=\"shipping.multishipping_item_split_tooltip_message\"\r\n                    />\r\n                </Tooltip>\r\n            }\r\n        >\r\n            <span className=\"item-split-tooltip\" data-test=\"split-item-tooltip\">\r\n                <IconHelp />\r\n            </span>\r\n        </TooltipTrigger>\r\n    )\r\n};\r\n","import React from \"react\";\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { IconClose } from \"../ui/icon\";\r\n\r\nimport { renderItemContent } from \"./ConsignmentLineItemDetail\";\r\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\r\nimport { MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\r\n\r\ninterface AllocatedItemsListProps {\r\n    assignedItems: MultiShippingTableData;\r\n    onUnassignItem(itemToDelete: MultiShippingTableItemWithType): void;\r\n}\r\n\r\nconst AllocatedItemsList = ({ assignedItems, onUnassignItem }: AllocatedItemsListProps) => {\r\n    return (\r\n        <div className=\"allocated-line-items\">\r\n            <h3>\r\n                <TranslatedString data={{ count: assignedItems.shippableItemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\r\n                {assignedItems.hasSplitItems && (\r\n                    <ItemSplitTooltip />\r\n                )}\r\n            </h3>\r\n            <ul className=\"allocated-line-items-list\">\r\n                {assignedItems.lineItems.map(item => (\r\n                    <li key={item.id}>\r\n                        {renderItemContent(item)}\r\n                        <span data-test={`remove-${item.id.toString()}-button`} onClick={() => onUnassignItem(item)}>\r\n                            <IconClose />\r\n                        </span>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AllocatedItemsList;\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\r\n\r\nimport { FormField, TextInput } from \"../ui/form\";\r\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\r\n\r\nimport { MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\r\n\r\ninterface LeftToAllocateItemProps {\r\n    item: MultiShippingTableItemWithType;\r\n    error?: string;\r\n}\r\n\r\nconst LeftToAllocateItem: FunctionComponent<LeftToAllocateItemProps> = ({ item, error }: LeftToAllocateItemProps) => {\r\n    const isMobileView = isMobileViewUI();\r\n\r\n    return (\r\n        <tr>\r\n            <td className=\"left-to-allocate-item-name-container\">\r\n                <figure className=\"left-to-allocate-item-figure\">\r\n                    {item.imageUrl && <img alt={item.name} src={item.imageUrl} />}\r\n                </figure>\r\n                <div>\r\n                    <p className=\"left-to-allocate-item-name\">{item.name}</p>\r\n                    {item.options?.map(option => (\r\n                        <p className=\"left-to-allocate-item-option\" key={option.nameId}>{option.name}: {option.value}</p>\r\n                    ))}\r\n                </div>\r\n            </td>\r\n            {!isMobileView && <td>{item.quantity}</td>}\r\n            <td>\r\n                {isMobileView && <TranslatedString data={{ count: item.quantity }} id=\"shipping.multishipping_left_to_allocate_message\" />}\r\n                <FormField\r\n                    additionalClassName={error ? \"form-field--error\" : \"\"}\r\n                    input={({ field }) => <TextInput\r\n                        {...field}\r\n                        aria-label={`Quantity of ${item.name}`}\r\n                        disabled={item.quantity === 0}\r\n                        id={field.name}\r\n                        min={0}\r\n                        type=\"number\"\r\n                    />}\r\n                    name={item.id.toString()}\r\n                />\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default LeftToAllocateItem;\r\n","import { FormikErrors } from \"formik\";\r\nimport React, { FunctionComponent } from \"react\";\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\r\n\r\nimport { AllocateItemsModalFormValues } from \"./AllocateItemsModal\";\r\nimport LeftToAllocateItem from \"./LeftToAllocateItem\";\r\nimport { MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\r\n\r\ninterface LeftToAllocateItemsTableProps {\r\n    items: MultiShippingTableItemWithType[];\r\n    formErrors: FormikErrors<AllocateItemsModalFormValues>;\r\n}\r\n\r\nconst LeftToAllocateItemsTable: FunctionComponent<LeftToAllocateItemsTableProps> = ({ items, formErrors }: LeftToAllocateItemsTableProps) => {\r\n    const isMobileView = isMobileViewUI();\r\n\r\n    return (\r\n        <table className=\"table left-to-allocate-items-table\">\r\n            <thead>\r\n                <tr>\r\n                    <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_item\" /></th>\r\n                    {!isMobileView && <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_left_to_allocate\" /></th>}\r\n                    <th><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_quantity\" /></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {items.map(item => (\r\n                    <LeftToAllocateItem\r\n                        error={formErrors[item.id.toString()]}\r\n                        item={item}\r\n                        key={item.id}\r\n                    />      \r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default LeftToAllocateItemsTable;\r\n","import { Consignment, LineItemOption, PhysicalItem } from \"@bigcommerce/checkout-sdk\";\r\n\r\nexport enum LineItemType {\r\n    Physical,\r\n    Digital,\r\n    GiftCertificate,\r\n    Custom,\r\n}\r\n\r\nexport interface MultiShippingTableItem {\r\n    name: string;\r\n    options?: LineItemOption[];\r\n    giftWrapping?: PhysicalItem['giftWrapping'];\r\n    sku: string;\r\n    quantity: number;\r\n    id: string | number;\r\n    imageUrl?: string;\r\n}\r\n\r\nexport interface MultiShippingTableItemWithType extends MultiShippingTableItem {\r\n    type: LineItemType;\r\n}\r\n\r\nexport interface MultiShippingTableData {\r\n    lineItems: MultiShippingTableItemWithType[];\r\n    hasDigitalItems: boolean;\r\n    hasSplitItems: boolean;\r\n    shippableItemsCount: number;\r\n};\r\n\r\nexport interface MultiShippingConsignmentData extends Consignment, MultiShippingTableData {\r\n    consignmentNumber: number;\r\n}\r\n","import { Address, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\r\nimport { FormikProps } from \"formik\";\r\nimport React, { FunctionComponent, useMemo } from \"react\";\r\nimport { number, object } from \"yup\";\r\n\r\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from \"@bigcommerce/checkout/locale\";\r\nimport { Alert, AlertType, ButtonVariant } from \"@bigcommerce/checkout/ui\";\r\n\r\nimport { getAddressContent } from \"../address/SingleLineStaticAddress\";\r\nimport { withFormikExtended } from \"../common/form\";\r\nimport { Button } from \"../ui/button\";\r\nimport { Form } from \"../ui/form\";\r\nimport { Modal, ModalHeader } from \"../ui/modal\";\r\n\r\nimport AllocatedItemsList from \"./AllocatedItemsList\";\r\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\r\nimport LeftToAllocateItemsTable from \"./LeftToAllocateItemsTable\";\r\nimport { LineItemType, MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\r\n\r\nexport interface AllocateItemsModalFormValues {\r\n    [key: string]: number;\r\n}\r\n\r\ninterface AllocateItemsModalProps {\r\n    consignmentNumber: number;\r\n    isOpen: boolean;\r\n    onRequestClose?(): void;\r\n    address: Address;\r\n    unassignedItems: MultiShippingTableData;\r\n    assignedItems?: MultiShippingTableData;\r\n    onAllocateItems(consignmentLineItems: ConsignmentLineItem[]): void;\r\n    onUnassignItem?(itemToDelete: MultiShippingTableItemWithType): void;\r\n    isLoading: boolean;\r\n}\r\n\r\nconst AllocateItemsModal: FunctionComponent<AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>> = ({\r\n    consignmentNumber,\r\n    isOpen,\r\n    onRequestClose,\r\n    address,\r\n    assignedItems,\r\n    unassignedItems,\r\n    setValues,\r\n    values,\r\n    dirty,\r\n    submitForm,\r\n    errors,\r\n    onUnassignItem,\r\n    isLoading,\r\n}: AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>) => {\r\n\r\n    const allocatedOrSelectedItemsMessage = useMemo(() => {\r\n        const leftItemsTotal = unassignedItems.shippableItemsCount;\r\n\r\n        if (values && dirty) {\r\n            const selectedItems = Object.keys(values).reduce((acc, key) => {\r\n                if (values[key] > 0) {\r\n                    acc += values[key];\r\n                }\r\n\r\n                return acc;\r\n            }, 0);\r\n\r\n            return <TranslatedString data={{ count: `${selectedItems}/${leftItemsTotal}` }} id=\"shipping.multishipping_items_selected_message\" />;\r\n        }\r\n\r\n        return <TranslatedString data={{ count: leftItemsTotal }} id=\"shipping.multishipping_item_to_allocate_message\" />;\r\n    }, [values]);\r\n\r\n    const handleSelectAll = () => {\r\n        const values: AllocateItemsModalFormValues = {};\r\n\r\n        unassignedItems.lineItems.forEach(item => {\r\n            values[item.id.toString()] = item.quantity;\r\n        });\r\n        setValues(values);\r\n    };\r\n\r\n    const handleClearAll = () => {\r\n        const values: AllocateItemsModalFormValues = {};\r\n\r\n        unassignedItems.lineItems.forEach(item => {\r\n            values[item.id.toString()] = 0;\r\n        });\r\n        setValues(values);\r\n    }\r\n\r\n    const formErrors = useMemo(() => {\r\n        const errorKeys = Object.keys(errors);\r\n\r\n        return errorKeys.reduce((acc: string[], key: string) => {\r\n            const error = errors[key];\r\n\r\n            if (error) {\r\n                acc.push(error);\r\n            }\r\n\r\n            return Array.from(new Set(acc));\r\n        }, []);\r\n    }, [errors]);\r\n\r\n    const hasItemsAssigned = !!assignedItems && assignedItems.lineItems.length > 0 && !!onUnassignItem;\r\n    const hasUnassignedItems = !!unassignedItems && unassignedItems.lineItems.length > 0;\r\n\r\n    const modalFooter = (\r\n        <>\r\n            <Button\r\n                disabled={isLoading}\r\n                onClick={onRequestClose}\r\n                variant={ButtonVariant.Secondary}\r\n            >\r\n                <TranslatedString id=\"shipping.multishipping_items_allocate_cancel\" />\r\n            </Button>\r\n            <Button\r\n                disabled={!hasItemsAssigned && !dirty}\r\n                isLoading={isLoading}\r\n                onClick={submitForm}\r\n                type=\"submit\"\r\n                variant={ButtonVariant.Primary}\r\n            >\r\n                {hasItemsAssigned \r\n                    ? <TranslatedString id=\"shipping.multishipping_items_allocate_save\" /> \r\n                    : <TranslatedString id=\"shipping.multishipping_items_allocate_allocate\" />\r\n                }\r\n            </Button>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <Modal\r\n            additionalModalClassName=\"allocate-items-modal\"\r\n            footer={modalFooter}\r\n            header={\r\n                <>\r\n                    <ModalHeader>\r\n                        <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\r\n                    </ModalHeader>\r\n                    <h4>{getAddressContent(address)}</h4>\r\n                </>\r\n            }\r\n            isOpen={isOpen}\r\n            onRequestClose={onRequestClose}\r\n        > \r\n            <Form>\r\n                {formErrors.length > 0 && (\r\n                    <div className=\"form-errors\">\r\n                        {formErrors.map((error, index) => (\r\n                            <Alert key={index} type={AlertType.Error}>{error}</Alert>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n                {unassignedItems.hasDigitalItems && (\r\n                            <Alert type={AlertType.Info}>\r\n                                <TranslatedString id=\"shipping.multishipping_digital_item_no_shipping_banner\" />\r\n                                </Alert>\r\n                )}\r\n                {hasItemsAssigned && (\r\n                    <AllocatedItemsList assignedItems={assignedItems} onUnassignItem={onUnassignItem} />\r\n                )}\r\n                {hasUnassignedItems\r\n                    ? <>\r\n                        <div className=\"left-to-allocate-items-table-actions\">\r\n                            <p>\r\n                                {allocatedOrSelectedItemsMessage}\r\n                                {unassignedItems.hasSplitItems && (\r\n                                    <ItemSplitTooltip />\r\n                                )}\r\n                            </p>\r\n\r\n                            <div className=\"button-group\">\r\n                                <a\r\n                                    data-test=\"clear-all-items-button\"\r\n                                    href=\"#\"\r\n                                    onClick={preventDefault(handleClearAll)}\r\n                                >\r\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_clear_all\" />\r\n                                </a>\r\n                                <a\r\n                                    data-test=\"allocate-all-items-button\"\r\n                                    href=\"#\"\r\n                                    onClick={preventDefault(handleSelectAll)}\r\n                                >\r\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_select_all_items_left\" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <LeftToAllocateItemsTable\r\n                            formErrors={errors}\r\n                            items={unassignedItems.lineItems}\r\n                        />\r\n                    </>\r\n                    : null\r\n                }\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormikExtended<AllocateItemsModalProps & WithLanguageProps, AllocateItemsModalFormValues>({\r\n        handleSubmit: (values, { props: { onAllocateItems } }) => {\r\n            const consignmentLineItems = Object.keys(values).filter(key => values[key] > 0).map((lineItemId: string) => ({\r\n                itemId: lineItemId,\r\n                quantity: values[lineItemId],\r\n            }));\r\n\r\n            onAllocateItems(consignmentLineItems);\r\n        },\r\n        mapPropsToValues: ({ unassignedItems }) => {\r\n            const values: AllocateItemsModalFormValues = {};\r\n\r\n            unassignedItems.lineItems.forEach(item => {\r\n                values[item.id.toString()] = 0;\r\n            });\r\n\r\n            return values;\r\n        },\r\n        enableReinitialize: true,\r\n        validationSchema: ({ language, unassignedItems }: AllocateItemsModalProps & WithLanguageProps) => {\r\n            const createItemSchema = (item: MultiShippingTableItemWithType) => {\r\n                const baseSchema = number()\r\n                    .required(language.translate('shipping.quantity_required_error'))\r\n                    .integer(language.translate('shipping.quantity_invalid_error'))\r\n                    .min(0, language.translate('shipping.quantity_min_error'))\r\n                    .max(item.quantity, language.translate('shipping.quantity_max_error'))\r\n\r\n                if (item.type === LineItemType.Custom) {\r\n                    return baseSchema\r\n                        .oneOf([0, item.quantity], language.translate('shipping.custom_item_quantity_error'))\r\n                }\r\n\r\n                return baseSchema;\r\n            };\r\n\r\n            const schemaObject = Object.fromEntries(\r\n                unassignedItems.lineItems.map((item) => [item.id.toString(), createItemSchema(item)]),\r\n            );\r\n\r\n            return object().shape(schemaObject);\r\n        },\r\n        validateOnBlur: true,\r\n        validateOnChange: false,\r\n    })(AllocateItemsModal),\r\n);\r\n","import { Consignment, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\r\n\r\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\r\n\r\n\r\nexport const useDeallocateItem = () => {\r\n    const {\r\n        checkoutService: { createConsignments, deleteConsignment },\r\n    } = useCheckout();\r\n\r\n    // this is a workaround to handle removing an item from a consignment\r\n    // current consignment API does not support removing an item directly - Oct 2024\r\n\r\n    const deleteItem = async (consignmentRequest: ConsignmentCreateRequestBody, itemId: string, consignment: Consignment) => {\r\n        let consignmentIdToBeDeleted: string | undefined = consignment.id;\r\n\r\n        if (consignment.lineItemIds.length > 1) {\r\n            const checkoutResponse = await createConsignments([consignmentRequest]);\r\n\r\n            const consignmentsReponse = checkoutResponse.data.getConsignments();\r\n\r\n            consignmentIdToBeDeleted = consignmentsReponse?.find((c) =>\r\n                c.lineItemIds.find((lineItemId) => lineItemId === itemId),\r\n            )?.id;\r\n        }\r\n\r\n        if (!consignmentIdToBeDeleted) {\r\n            throw new Error('Unable to find consignment to delete');\r\n        }\r\n\r\n        deleteConsignment(consignmentIdToBeDeleted);\r\n    }\r\n\r\n    return deleteItem;\r\n}\r\n","import { LineItem, LineItemOption } from \"@bigcommerce/checkout-sdk\";\r\n\r\nconst generateHash = (values: string[]): string => {\r\n  return btoa(encodeURIComponent(values.join('-')));\r\n};\r\n\r\nconst generateProductOptionsHash = (options: LineItemOption[] | undefined): string => {\r\n  if (!options) {\r\n    return '';\r\n  }\r\n\r\n  return generateHash(\r\n    options.map((option) =>\r\n      generateHash([\r\n        option.name,\r\n        option.nameId.toString(),\r\n        option.value,\r\n        option.valueId ? option.valueId.toString() : '',\r\n      ]),\r\n    ),\r\n  );\r\n};\r\n\r\nexport const generateItemHash = (item: LineItem): string => {\r\n  return generateHash([\r\n    item.productId.toString(),\r\n    item.variantId.toString(),\r\n    item.sku,\r\n    generateProductOptionsHash(item.options),\r\n  ]);\r\n};\r\n","import { Consignment, LineItemMap } from \"@bigcommerce/checkout-sdk\";\r\n\r\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\r\n\r\nimport { LineItemType, MultiShippingConsignmentData, MultiShippingTableData, MultiShippingTableItemWithType } from \"../MultishippingV2Type\";\r\nimport { generateItemHash } from \"../utils\";\r\n\r\ninterface MultiShippingConsignmentItemsHook {\r\n    unassignedItems: MultiShippingTableData;\r\n    consignmentList: MultiShippingConsignmentData[];\r\n}\r\n\r\n// TODO: consolidate this from /app/order/removeBundledItems\r\nfunction removeBundledItems(lineItems: LineItemMap): LineItemMap {\r\n    return {\r\n        ...lineItems,\r\n        physicalItems: lineItems.physicalItems.filter((item) => typeof item.parentId !== 'string'),\r\n        digitalItems: lineItems.digitalItems.filter((item) => typeof item.parentId !== 'string'),\r\n    };\r\n}\r\n\r\nconst calculateShippableItemsCount = (items: MultiShippingTableItemWithType[]): number => {\r\n    return items.reduce((total, item) => total + item.quantity, 0);\r\n};\r\n\r\nconst hasSplitItem = (\r\n    items: MultiShippingTableItemWithType[],\r\n    itemHashMap: Map<string, string>,\r\n  ): boolean => {\r\n    const processedHashes = new Set<string>();\r\n  \r\n    for (const item of items) {\r\n      const hash = itemHashMap.get(item.id.toString());\r\n\r\n      if (!hash) continue;\r\n  \r\n      if (processedHashes.has(hash)) {\r\n        return true;\r\n      }\r\n  \r\n      processedHashes.add(hash);\r\n    }\r\n  \r\n    return false;\r\n  };\r\n\r\nfunction mapConsignmentsItems(\r\n    lineItems: LineItemMap,\r\n    consignments: Consignment[],\r\n): {\r\n        consignmentList: MultiShippingConsignmentData[];\r\n        unassignedItems: MultiShippingTableData;\r\n    } {\r\n    const unassignedItemsMap = new Map<string, MultiShippingTableItemWithType>();\r\n    const digitalItemsMap = new Map<string, MultiShippingTableItemWithType>();\r\n\r\n    const itemHashMap = new Map<string, string>();\r\n\r\n    const consignmentList: MultiShippingConsignmentData[] = [];\r\n\r\n    lineItems.physicalItems.forEach((item) => {\r\n        unassignedItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Physical });\r\n        itemHashMap.set(item.id.toString(), generateItemHash(item));\r\n    });\r\n    lineItems.customItems?.forEach((item) =>\r\n        unassignedItemsMap.set(item.id, { ...item, type: LineItemType.Custom }),\r\n    );\r\n    lineItems.digitalItems.forEach((item) =>\r\n        digitalItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Digital }),\r\n    );\r\n\r\n    consignments.forEach((consignment, index) => {\r\n        const consignmentLineItems: MultiShippingTableItemWithType[] = [];\r\n\r\n        consignment.lineItemIds.forEach((itemId) => {\r\n            const item = unassignedItemsMap.get(itemId);\r\n\r\n            if (item) {\r\n                consignmentLineItems.push(item);\r\n                unassignedItemsMap.delete(itemId);\r\n            }\r\n        });\r\n\r\n        consignmentList.push({\r\n            ...consignment,\r\n            consignmentNumber: index + 1,\r\n            hasDigitalItems: false,\r\n            hasSplitItems: hasSplitItem(consignmentLineItems, itemHashMap),\r\n            shippableItemsCount: calculateShippableItemsCount(consignmentLineItems),\r\n            lineItems: consignmentLineItems,\r\n        });\r\n    });\r\n\r\n    const unassignedItemsList = Array.from(unassignedItemsMap.values());\r\n\r\n    const unassignedItems: MultiShippingTableData = {\r\n        lineItems: unassignedItemsList,\r\n        hasDigitalItems: digitalItemsMap.size > 0,\r\n        hasSplitItems: hasSplitItem(unassignedItemsList, itemHashMap),\r\n        shippableItemsCount: calculateShippableItemsCount(unassignedItemsList),\r\n    };\r\n\r\n    return { consignmentList, unassignedItems };\r\n}\r\n\r\nconst defaultMultiShippingConsignmentItems: MultiShippingConsignmentItemsHook = {\r\n    unassignedItems: {\r\n        lineItems: [],\r\n        hasDigitalItems: false,\r\n        hasSplitItems: false,\r\n        shippableItemsCount: 0,\r\n    },\r\n    consignmentList: [],\r\n};\r\n\r\nexport const useMultiShippingConsignmentItems = (): MultiShippingConsignmentItemsHook => {\r\n    const { checkoutState: {\r\n        data: { getCheckout },\r\n    },\r\n    } = useCheckout();\r\n\r\n    const checkout = getCheckout();\r\n\r\n    if (!checkout) {\r\n        return defaultMultiShippingConsignmentItems;\r\n    }\r\n\r\n    const {\r\n        cart: { lineItems },\r\n        consignments,\r\n    } = checkout;\r\n\r\n    const nonBundledLineItems = removeBundledItems(lineItems);\r\n\r\n    const { consignmentList, unassignedItems } =\r\n        mapConsignmentsItems(nonBundledLineItems, consignments);\r\n\r\n    return {\r\n        unassignedItems,\r\n        consignmentList,\r\n    };\r\n};\r\n","import { ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\n\r\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\r\n\r\nimport { IconChevronDown, IconChevronUp } from \"../ui/icon\";\r\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\r\n\r\nimport AllocateItemsModal from \"./AllocateItemsModal\";\r\nimport ConsignmentLineItemDetail from \"./ConsignmentLineItemDetail\";\r\nimport { AssignItemFailedError, UnassignItemError } from \"./errors\";\r\nimport { useDeallocateItem } from \"./hooks/useDeallocateItem\";\r\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\r\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\r\nimport { MultiShippingConsignmentData, MultiShippingTableItemWithType } from \"./MultishippingV2Type\";\r\n\r\ninterface ConsignmentLineItemProps {\r\n    consignmentNumber: number;\r\n    consignment: MultiShippingConsignmentData;\r\n    onUnhandledError(error: Error): void;\r\n    isLoading: boolean;\r\n}\r\n\r\nconst ConsignmentLineItem: FunctionComponent<ConsignmentLineItemProps> = ({ consignmentNumber, consignment, onUnhandledError, isLoading }: ConsignmentLineItemProps) => {\r\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\r\n    const [showItems, setShowItems] = useState(true);\r\n\r\n    const { unassignedItems } = useMultiShippingConsignmentItems();\r\n    const { checkoutService: { assignItemsToAddress: assignItem } } = useCheckout();\r\n    const deleteItem = useDeallocateItem();\r\n\r\n    const toggleAllocateItemsModal = () => {\r\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\r\n    }\r\n\r\n    const handleAssignItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\r\n        try {\r\n            await assignItem({\r\n                address: consignment.address,\r\n                lineItems: consignmentLineItems,\r\n            });\r\n\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(new AssignItemFailedError(error));\r\n            }\r\n        } finally {\r\n            toggleAllocateItemsModal();\r\n        }\r\n    }\r\n\r\n    const handleUnassignItems = async (itemToDelete: MultiShippingTableItemWithType) => {\r\n        try {\r\n            const consignmentRequest = {\r\n                address: consignment.address,\r\n                shippingAddress: consignment.shippingAddress,\r\n                lineItems: [\r\n                    {\r\n                        quantity: itemToDelete.quantity,\r\n                        itemId: itemToDelete.id,\r\n                    },\r\n                ],\r\n            }\r\n\r\n            await deleteItem(consignmentRequest, itemToDelete.id.toString(), consignment);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(new UnassignItemError(error));\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleShowItems = () => {\r\n        setShowItems(!showItems);\r\n    }\r\n\r\n    const isMobileView = isMobileViewUI();\r\n\r\n    const itemsCount = consignment.shippableItemsCount;\r\n\r\n    return (\r\n        <div>\r\n            <AllocateItemsModal\r\n                address={consignment.shippingAddress}\r\n                assignedItems={consignment}\r\n                consignmentNumber={consignmentNumber}\r\n                isLoading={isLoading}\r\n                isOpen={isOpenAllocateItemsModal}\r\n                onAllocateItems={handleAssignItems}\r\n                onRequestClose={toggleAllocateItemsModal}\r\n                onUnassignItem={handleUnassignItems}\r\n                unassignedItems={unassignedItems}\r\n            />\r\n            <div className=\"consignment-line-item-header\">\r\n                <div>\r\n                    <h3>{itemsCount > 1 ? `${itemsCount} items` : `${itemsCount} item`} allocated </h3>\r\n\r\n                    {consignment.hasSplitItems && (\r\n                        <ItemSplitTooltip />\r\n                    )}\r\n                    \r\n                    <a\r\n                        className=\"expand-items-button\"\r\n                        data-test=\"expand-items-button\"\r\n                        href=\"#\"\r\n                        onClick={preventDefault(toggleShowItems)}\r\n                    >\r\n                        {showItems ? (\r\n                            <>\r\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_hide_items_message\" />}\r\n                                <IconChevronUp />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_show_items_message\" />}\r\n                                <IconChevronDown />\r\n                            </>\r\n                        )}\r\n                    </a>\r\n                </div>\r\n                <a\r\n                    data-test=\"reallocate-items-button\"\r\n                    href=\"#\"\r\n                    onClick={preventDefault(toggleAllocateItemsModal)}\r\n                >\r\n                    <TranslatedString id=\"shipping.multishipping_item_reallocated_message\" />\r\n                </a>\r\n            </div>\r\n            {showItems\r\n                ? <ConsignmentLineItemDetail lineItems={consignment.lineItems} />\r\n                : null\r\n            }       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConsignmentLineItem;\r\n","import React, { FunctionComponent, memo } from 'react';\r\n\r\nexport interface LoadingSpinnerProps {\r\n    isLoading: boolean;\r\n}\r\n\r\nconst LoadingSpinner: FunctionComponent<LoadingSpinnerProps> = ({ isLoading }) => {\r\n    if (!isLoading) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            aria-busy=\"true\"\r\n            className=\"loadingSpinner loadingOverlay-container\"\r\n            role=\"status\"\r\n            style={{ height: 100 }}\r\n        >\r\n            <div className=\"loadingOverlay optimizedCheckout-overlay\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(LoadingSpinner);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nexport interface LoadingOverlayProps {\r\n    isLoading: boolean;\r\n    hideContentWhenLoading?: boolean;\r\n    unmountContentWhenLoading?: boolean;\r\n}\r\n\r\nconst LoadingOverlay: FunctionComponent<LoadingOverlayProps> = ({\r\n    children,\r\n    hideContentWhenLoading,\r\n    unmountContentWhenLoading,\r\n    isLoading,\r\n}) => {\r\n    if (hideContentWhenLoading || unmountContentWhenLoading) {\r\n        return (\r\n            <>\r\n                <LoadingSpinner isLoading={isLoading} />\r\n                {unmountContentWhenLoading && isLoading ? null : (\r\n                    <div\r\n                        style={{\r\n                            display: hideContentWhenLoading && isLoading ? 'none' : undefined,\r\n                        }}\r\n                    >\r\n                        {children}\r\n                    </div>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"loadingOverlay-container\">\r\n            {children}\r\n            {isLoading && (\r\n                <div\r\n                    className=\"loadingOverlay optimizedCheckout-overlay\"\r\n                    data-test=\"loading-overlay\"\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingOverlay;\r\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\r\n\r\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    testId?: string;\r\n}\r\n\r\nconst Input = forwardRef(({ testId, ...rest }: InputProps, ref: Ref<HTMLInputElement>) => (\r\n    <input {...rest} data-test={testId} ref={ref} />\r\n));\r\n\r\nexport default Input;\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\r\n\r\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\r\n    testId?: string;\r\n    hidden?: boolean;\r\n}\r\n\r\nconst Label: FunctionComponent<LabelProps> = ({ children, className, hidden, testId, ...rest }) => (\r\n    <label\r\n        {...rest}\r\n        className={classNames(\r\n            className || 'form-label',\r\n            { 'is-srOnly': hidden },\r\n            'optimizedCheckout-form-label',\r\n        )}\r\n        data-test={testId}\r\n    >\r\n        {children}\r\n    </label>\r\n);\r\n\r\nexport default Label;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from '../Input/Input';\r\nimport Label from '../Label/Label';\r\n\r\nexport interface RadioInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst RadioInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                checked={checked}\r\n                className={classNames(\r\n                    'form-radio',\r\n                    'optimizedCheckout-form-radio',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"radio\"\r\n                value={value}\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default RadioInput;\r\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nimport { RadioInput } from '@bigcommerce/checkout/ui';\r\n\r\nimport { ShopperCurrency } from '../../currency';\r\n\r\ninterface MultiShippingOptionsListItemV2Props {\r\n    consignmentId: string;\r\n    selectedShippingOptionId?: string;\r\n    shippingOption: ShippingOption;\r\n    handleSelect: (consignmentId: string, shippingOptionId: string) => void;\r\n}\r\n\r\nexport const MultiShippingOptionsListItemV2: FunctionComponent<\r\n    MultiShippingOptionsListItemV2Props\r\n> = ({ consignmentId, selectedShippingOptionId, shippingOption, handleSelect }) => {\r\n    const label = (\r\n        <>\r\n            {`${shippingOption.description} - `}\r\n            <ShopperCurrency amount={shippingOption.cost} />\r\n        </>\r\n    );\r\n\r\n    const selectThisOption = () => {\r\n        handleSelect(consignmentId, shippingOption.id);\r\n    };\r\n\r\n    return (\r\n        <ul className=\"shipping-option-item\">\r\n            <RadioInput\r\n                checked={selectedShippingOptionId === shippingOption.id}\r\n                id={`shippingOption-${consignmentId}-${shippingOption.id}`}\r\n                key={`key-${consignmentId}-${shippingOption.id}`}\r\n                label={label}\r\n                name={`${consignmentId}-shippingMethod`}\r\n                onClick={selectThisOption}\r\n                readOnly\r\n                value={shippingOption.id}\r\n            />\r\n        </ul>\r\n    );\r\n};\r\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo } from 'react';\r\n\r\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\r\n\r\nimport { MultiShippingOptionsListItemV2 } from './MultiShippingOptionsListItemV2';\r\n\r\ninterface MultiShippingOptionsListV2Props {\r\n    consignmentId: string;\r\n    isLoading: boolean;\r\n    selectedShippingOptionId?: string;\r\n    shippingOptions: ShippingOption[];\r\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\r\n}\r\n\r\nconst MultiShippingOptionsListV2: FunctionComponent<MultiShippingOptionsListV2Props> = ({\r\n    consignmentId,\r\n    isLoading,\r\n    shippingOptions,\r\n    selectedShippingOptionId,\r\n    onSelectedOption,\r\n}) => {\r\n    return (\r\n        <LoadingOverlay isLoading={isLoading}>\r\n            {shippingOptions.map((shippingOption) => (\r\n                <MultiShippingOptionsListItemV2\r\n                    consignmentId={consignmentId}\r\n                    handleSelect={onSelectedOption}\r\n                    key={shippingOption.id}\r\n                    selectedShippingOptionId={selectedShippingOptionId}\r\n                    shippingOption={shippingOption}\r\n                />\r\n            ))}\r\n        </LoadingOverlay>\r\n    );\r\n};\r\n\r\nexport default memo(MultiShippingOptionsListV2);\r\n","import { Consignment } from '@bigcommerce/checkout-sdk';\r\nimport React from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\r\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\r\n\r\nimport MultiShippingOptionsListV2 from './MultiShippingOptionsListV2';\r\nimport { isLoadingSelector } from './ShippingOptions';\r\n\r\ninterface MultiShippingOptionsV2Props {\r\n    consignment: Consignment;\r\n    isLoading: boolean;\r\n    shippingQuoteFailedMessage: string;\r\n    resetErrorConsignmentNumber(): void;\r\n}\r\n\r\nexport const MultiShippingOptionsV2 = ({\r\n    consignment,\r\n    isLoading,\r\n    resetErrorConsignmentNumber,\r\n    shippingQuoteFailedMessage,\r\n}: MultiShippingOptionsV2Props) => {\r\n    const { checkoutService, checkoutState } = useCheckout();\r\n\r\n    const selectShippingOption = async (consignmentId: string, shippingOptionId: string) => {\r\n        await checkoutService.selectConsignmentShippingOption(consignmentId, shippingOptionId);\r\n        resetErrorConsignmentNumber();\r\n    };\r\n    const isLoadingOptions = isLoadingSelector(checkoutState, isLoading)(consignment.id);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"shipping-option-header\">\r\n                <TranslatedString id=\"shipping.shipping_method_label\" />\r\n            </h3>\r\n            {(!consignment.availableShippingOptions ||\r\n                !consignment.availableShippingOptions.length) && (\r\n                <Alert type={AlertType.Error}>{shippingQuoteFailedMessage}</Alert>\r\n            )}\r\n            {Boolean(consignment.availableShippingOptions) &&\r\n                consignment.availableShippingOptions && (\r\n                    <MultiShippingOptionsListV2\r\n                        consignmentId={consignment.id}\r\n                        isLoading={isLoadingOptions}\r\n                        onSelectedOption={selectShippingOption}\r\n                        selectedShippingOptionId={\r\n                            consignment.selectedShippingOption &&\r\n                            consignment.selectedShippingOption.id\r\n                        }\r\n                        shippingOptions={consignment.availableShippingOptions}\r\n                    />\r\n                )}\r\n        </div>\r\n    );\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\r\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\r\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\r\n\r\nimport { IconClose, IconSize } from \"../ui/icon\";\r\n\r\n\r\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\r\nimport ConsignmentLineItem from './ConsignmentLineItem';\r\nimport { MultiShippingConsignmentData } from './MultishippingV2Type';\r\nimport { MultiShippingOptionsV2 } from './shippingOption/MultiShippingOptionsV2';\r\n\r\nexport interface ConsignmentListItemProps {\r\n    consignment: MultiShippingConsignmentData;\r\n    consignmentNumber: number;\r\n    defaultCountryCode?: string;\r\n    countriesWithAutocomplete: string[];\r\n    isLoading: boolean;\r\n    shippingQuoteFailedMessage: string;\r\n    onUnhandledError(error: Error): void;\r\n    resetErrorConsignmentNumber(): void;\r\n}\r\n\r\nconst ConsignmentListItem: FunctionComponent<ConsignmentListItemProps> = ({\r\n    consignment,\r\n    consignmentNumber,\r\n    countriesWithAutocomplete,\r\n    defaultCountryCode,\r\n    isLoading,\r\n    shippingQuoteFailedMessage,\r\n    onUnhandledError,\r\n    resetErrorConsignmentNumber,\r\n}: ConsignmentListItemProps) => {\r\n\r\n    const { checkoutService: { deleteConsignment } } = useCheckout();\r\n\r\n    const handleClose = async () => {\r\n        await deleteConsignment(consignment.id);\r\n        resetErrorConsignmentNumber();\r\n    };\r\n\r\n    return (\r\n        <div className='consignment-container'>\r\n            <div className='consignment-header'>\r\n                <h3>\r\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\r\n                </h3>\r\n                <a\r\n                    className=\"delete-consignment\"\r\n                    data-test=\"delete-consignment-button\"\r\n                    href=\"#\"\r\n                    onClick={preventDefault(handleClose)}\r\n                >\r\n                    <IconClose size={IconSize.Small} />\r\n                </a>\r\n            </div>\r\n            <ConsignmentAddressSelector\r\n                consignment={consignment}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                defaultCountryCode={defaultCountryCode}\r\n                isLoading={isLoading}\r\n                onUnhandledError={onUnhandledError}\r\n                selectedAddress={consignment.shippingAddress}\r\n            />\r\n            <ConsignmentLineItem\r\n                consignment={consignment}\r\n                consignmentNumber={consignmentNumber}\r\n                isLoading={isLoading}\r\n                onUnhandledError={onUnhandledError}\r\n            />\r\n            <MultiShippingOptionsV2\r\n                consignment={consignment}\r\n                isLoading={isLoading}\r\n                resetErrorConsignmentNumber={resetErrorConsignmentNumber}\r\n                shippingQuoteFailedMessage={shippingQuoteFailedMessage}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConsignmentListItem;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { OrderComments } from '../orderComments';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Form } from '../ui/form';\r\n\r\nexport interface ShippingFormFooterProps {\r\n    shouldShowOrderComments: boolean;\r\n    shouldDisableSubmit: boolean;\r\n    isLoading: boolean;\r\n    cartHasChanged: boolean;\r\n}\r\n\r\nconst MultiShippingFormV2Footer: FunctionComponent<ShippingFormFooterProps> = ({\r\n    shouldShowOrderComments,\r\n    shouldDisableSubmit,\r\n    isLoading,\r\n    cartHasChanged,\r\n}) => {\r\n    return (\r\n        <Form>\r\n            {cartHasChanged && (\r\n                <Alert type={AlertType.Error}>\r\n                    <strong>\r\n                        <TranslatedString id=\"shipping.cart_change_error\" />\r\n                    </strong>\r\n                </Alert>\r\n            )}\r\n            {shouldShowOrderComments && <OrderComments />}\r\n\r\n            <div className=\"form-actions\">\r\n                <Button\r\n                    disabled={shouldDisableSubmit}\r\n                    id=\"checkout-shipping-continue\"\r\n                    isLoading={isLoading}\r\n                    type=\"submit\"\r\n                    variant={ButtonVariant.Primary}\r\n                >\r\n                    <TranslatedString id=\"common.continue_action\" />\r\n                </Button>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default MultiShippingFormV2Footer;\r\n","import { Consignment, ConsignmentCreateRequestBody, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\r\nimport { find } from \"lodash\";\r\nimport React, { useMemo, useState } from \"react\";\r\n\r\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\r\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\r\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\r\n\r\nimport { EMPTY_ARRAY } from \"../common/utility\";\r\n\r\nimport AllocateItemsModal from \"./AllocateItemsModal\";\r\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\r\nimport { AssignItemFailedError } from \"./errors\";\r\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\r\nimport { setRecommendedOrMissingShippingOption } from './utils';\r\n\r\ninterface NewConsignmentProps {\r\n    consignmentNumber: number;\r\n    defaultCountryCode?: string;\r\n    countriesWithAutocomplete: string[];\r\n    isLoading: boolean;\r\n    setIsAddShippingDestination: React.Dispatch<React.SetStateAction<boolean>>;\r\n    onUnhandledError(error: Error): void;\r\n    resetErrorConsignmentNumber(): void;\r\n}\r\n\r\nconst NewConsignment = ({\r\n    consignmentNumber,\r\n    countriesWithAutocomplete,\r\n    defaultCountryCode,\r\n    isLoading,\r\n    onUnhandledError,\r\n    resetErrorConsignmentNumber,\r\n    setIsAddShippingDestination,\r\n}: NewConsignmentProps) => {\r\n    const [consignmentRequest, setConsignmentRequest] = useState<ConsignmentCreateRequestBody | undefined>();\r\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\r\n    const { unassignedItems } = useMultiShippingConsignmentItems();\r\n\r\n    const {\r\n        checkoutState: {\r\n            data: { getShippingCountries, getConsignments: getPreviousConsignments },\r\n        },\r\n        checkoutService: { assignItemsToAddress: assignItem, selectConsignmentShippingOption },\r\n    } = useCheckout();\r\n\r\n    const selectedAddress = useMemo(() => {\r\n        if (!consignmentRequest?.address) {\r\n            return undefined;\r\n        }\r\n\r\n        const countries = getShippingCountries() || EMPTY_ARRAY;\r\n        const country = find(countries, { code: consignmentRequest.address.countryCode });\r\n\r\n        return {\r\n            ...consignmentRequest.address,\r\n            country: country ? country.name : consignmentRequest.address.countryCode,\r\n        };\r\n    }, [consignmentRequest]);\r\n\r\n\r\n    const toggleAllocateItemsModal = () => {\r\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\r\n    }\r\n\r\n    const handleAllocateItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\r\n        let currentConsignments: Consignment[] | undefined;\r\n\r\n        if (!selectedAddress) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const {\r\n                data: { getConsignments },\r\n            } = await assignItem({\r\n                address: selectedAddress,\r\n                lineItems: consignmentLineItems,\r\n            });\r\n\r\n            currentConsignments = getConsignments();\r\n        } catch (error) {\r\n            if (error instanceof AssignItemFailedError) {\r\n                onUnhandledError(error);\r\n            }\r\n        } finally {\r\n            toggleAllocateItemsModal();\r\n            setIsAddShippingDestination(false);\r\n            resetErrorConsignmentNumber();\r\n\r\n            if (currentConsignments && currentConsignments.length > 0) {\r\n                await setRecommendedOrMissingShippingOption(\r\n                    getPreviousConsignments() ?? [],\r\n                    currentConsignments,\r\n                    selectConsignmentShippingOption,\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='consignment-container'>\r\n            <div className='consignment-header'>\r\n                <h3>\r\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\r\n                </h3>\r\n            </div>\r\n            <ConsignmentAddressSelector\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                defaultCountryCode={defaultCountryCode}\r\n                isLoading={isLoading}\r\n                onUnhandledError={onUnhandledError}\r\n                selectedAddress={selectedAddress}\r\n                setConsignmentRequest={setConsignmentRequest}\r\n            />\r\n            {selectedAddress && (<>\r\n                <AllocateItemsModal\r\n                    address={selectedAddress}\r\n                    consignmentNumber={consignmentNumber}\r\n                    isLoading={isLoading}\r\n                    isOpen={isOpenAllocateItemsModal}\r\n                    onAllocateItems={handleAllocateItems}\r\n                    onRequestClose={toggleAllocateItemsModal}\r\n                    unassignedItems={unassignedItems}\r\n                />\r\n                <div className=\"new-consignment-line-item-header\">\r\n                    <h3><TranslatedString id=\"shipping.multishipping_no_item_allocated_message\" /></h3>\r\n                    <a\r\n                        data-test=\"allocate-items-button\"\r\n                        href=\"#\"\r\n                        onClick={preventDefault(toggleAllocateItemsModal)}\r\n                    >\r\n                        <TranslatedString id=\"shipping.multishipping_allocate_items\" />\r\n                    </a>\r\n                </div>\r\n            </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewConsignment;\r\n","import React, { FunctionComponent, useMemo, useState } from 'react';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\r\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\r\n\r\nimport { withFormikExtended } from '../common/form';\r\nimport { EMPTY_ARRAY } from '../common/utility';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\n\r\nimport ConsignmentListItem from './ConsignmentListItem';\r\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\r\nimport { useMultiShippingConsignmentItems } from './hooks/useMultishippingConsignmentItems';\r\nimport MultiShippingFormV2Footer from './MultiShippingFormV2Footer';\r\nimport { MultiShippingConsignmentData } from './MultishippingV2Type';\r\nimport './MultiShippingFormV2.scss';\r\nimport NewConsignment from './NewConsignment';\r\n\r\ninterface MultiShippingFormV2Values {\r\n    orderComment: string;\r\n}\r\n\r\nexport interface MultiShippingFormV2Props {\r\n    cartHasChanged: boolean;\r\n    customerMessage: string;\r\n    defaultCountryCode?: string;\r\n    countriesWithAutocomplete: string[];\r\n    isLoading: boolean;\r\n    onUnhandledError(error: Error): void;\r\n    onSubmit(values: MultiShippingFormV2Values): void;\r\n}\r\n\r\nconst MultiShippingFormV2: FunctionComponent<MultiShippingFormV2Props> = ({\r\n    countriesWithAutocomplete,\r\n    defaultCountryCode,\r\n    isLoading,\r\n    onUnhandledError,\r\n    cartHasChanged,\r\n}: MultiShippingFormV2Props) => {\r\n    const [errorConsignmentNumber, setErrorConsignmentNumber] = useState<number | undefined>();\r\n\r\n    const {\r\n        checkoutState: {\r\n            data: { getConsignments, getConfig },\r\n        },\r\n    } = useCheckout();\r\n    const { unassignedItems: { lineItems: unassignedLineItems, shippableItemsCount }, consignmentList } = useMultiShippingConsignmentItems();\r\n\r\n    const consignments = getConsignments() || EMPTY_ARRAY;\r\n    const config = getConfig();\r\n\r\n    const [isAddShippingDestination, setIsAddShippingDestination] = useState(\r\n        consignments.length === 0,\r\n    );\r\n\r\n    const isEveryConsignmentHasShippingOption = hasSelectedShippingOptions(consignments);\r\n    const shouldDisableSubmit = useMemo(() => {\r\n        return isLoading || !!unassignedLineItems.length || !isEveryConsignmentHasShippingOption;\r\n    }, [isLoading, consignments]);\r\n\r\n    if (!config) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        checkoutSettings: {\r\n            enableOrderComments: shouldShowOrderComments,\r\n            shippingQuoteFailedMessage,\r\n        },\r\n    } = config;\r\n\r\n    const handleAddShippingDestination = () => {\r\n        if (!isAddShippingDestination && !isEveryConsignmentHasShippingOption) {\r\n            const errorConsignmentIndex = consignments.findIndex(\r\n                (consignment) => !consignment.selectedShippingOption,\r\n            );\r\n\r\n            if (errorConsignmentIndex === -1) {\r\n                setIsAddShippingDestination(true);\r\n                \r\n                return;\r\n            }\r\n            \r\n            setErrorConsignmentNumber(errorConsignmentIndex + 1);\r\n        } else if (isAddShippingDestination) {\r\n            setErrorConsignmentNumber(consignments.length + 1);\r\n        } else {\r\n            setErrorConsignmentNumber(undefined);\r\n            setIsAddShippingDestination(true);\r\n        }\r\n    };\r\n\r\n    const hasUnassignedItems = shippableItemsCount > 0;\r\n\r\n    const renderAllocatedBanner = (shippableItemsCount: number): React.JSX.Element  => {\r\n        if (shippableItemsCount > 0) {\r\n            return <Alert type={AlertType.Info}>\r\n                <TranslatedString data={{ count: shippableItemsCount }} id=\"shipping.multishipping_item_to_allocate_message\" />\r\n            </Alert>;\r\n        }\r\n\r\n        return <Alert type={AlertType.Success}>\r\n            <TranslatedString id=\"shipping.multishipping_all_items_allocated_message\" />\r\n        </Alert>;\r\n    }\r\n    const resetErrorConsignmentNumber = () => {\r\n        setErrorConsignmentNumber(undefined);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {renderAllocatedBanner(shippableItemsCount)}\r\n            {consignmentList.map((consignment: MultiShippingConsignmentData) => (\r\n                <ConsignmentListItem\r\n                    consignment={consignment}\r\n                    consignmentNumber={consignment.consignmentNumber}\r\n                    countriesWithAutocomplete={countriesWithAutocomplete}\r\n                    defaultCountryCode={defaultCountryCode}\r\n                    isLoading={isLoading}\r\n                    key={consignment.id}\r\n                    onUnhandledError={onUnhandledError}\r\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\r\n                    shippingQuoteFailedMessage={shippingQuoteFailedMessage}\r\n                />\r\n            ))}\r\n            {isAddShippingDestination && (\r\n                <NewConsignment\r\n                    consignmentNumber={consignments.length === 0 ? 1 : (consignments.length + 1)}\r\n                    countriesWithAutocomplete={countriesWithAutocomplete}\r\n                    defaultCountryCode={defaultCountryCode}\r\n                    isLoading={isLoading}\r\n                    onUnhandledError={onUnhandledError}\r\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\r\n                    setIsAddShippingDestination={setIsAddShippingDestination}\r\n                />)\r\n            }\r\n            {hasUnassignedItems &&\r\n                <Button className='add-consignment-button' onClick={handleAddShippingDestination} variant={ButtonVariant.Secondary}>\r\n                    <TranslatedString id=\"shipping.multishipping_add_new_destination\" />\r\n                </Button>\r\n            }\r\n            {Boolean(errorConsignmentNumber) && (\r\n                <div className=\"form-field--error\">\r\n                    <span className=\"form-inlineMessage\">\r\n                        <TranslatedString\r\n                            data={{ consignmentNumber: errorConsignmentNumber }}\r\n                            id=\"shipping.multishipping_incomplete_consignment_error\"\r\n                        />\r\n                    </span>\r\n                </div>\r\n            )}\r\n            <MultiShippingFormV2Footer\r\n                cartHasChanged={cartHasChanged}\r\n                isLoading={isLoading}\r\n                shouldDisableSubmit={shouldDisableSubmit}\r\n                shouldShowOrderComments={shouldShowOrderComments}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormikExtended<MultiShippingFormV2Props & WithLanguageProps, MultiShippingFormV2Values>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({ customerMessage }) => ({\r\n            orderComment: customerMessage,\r\n        }),\r\n        enableReinitialize: true,\r\n    })(MultiShippingFormV2),\r\n);\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\r\nimport { TranslatedLink, TranslatedString } from \"@bigcommerce/checkout/locale\";\r\n\r\ninterface MultiShippingGuestFormProps {\r\n    onSignIn(): void;\r\n    onCreateAccount(): void;\r\n}\r\n\r\nconst MultiShippingGuestForm: FunctionComponent<MultiShippingGuestFormProps> = ({\r\n    onSignIn,\r\n    onCreateAccount\r\n}: MultiShippingGuestFormProps) => {\r\n    return (\r\n        <div className=\"checkout-step-info\">\r\n            <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\r\n            <a\r\n                data-test=\"shipping-sign-in-link\"\r\n                href=\"#\"\r\n                onClick={preventDefault(onSignIn)}\r\n            >\r\n                <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\r\n            </a>{' '}\r\n            <TranslatedLink\r\n                id=\"shipping.multishipping_guest_create\"\r\n                onClick={onCreateAccount}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MultiShippingGuestForm;\r\n","import React, { FunctionComponent, memo, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CheckboxFormField } from '../ui/form';\r\n\r\nexport interface BillingSameAsShippingFieldProps {\r\n    onChange?(isChecked: boolean): void;\r\n}\r\n\r\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\r\n    onChange,\r\n}) => {\r\n    const labelContent = useMemo(\r\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <CheckboxFormField\r\n            id=\"sameAsBilling\"\r\n            labelContent={labelContent}\r\n            name=\"billingSameAsShipping\"\r\n            onChange={onChange}\r\n            testId=\"billingSameAsShipping\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(BillingSameAsShippingField);\r\n","import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    FormField,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { StaticAddress } from '../address/';\r\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\r\nimport { DynamicFormField, Fieldset } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport './StaticAddressEditable.scss';\r\n\r\nexport interface StaticAddressEditableProps {\r\n    address: Address;\r\n    buttonId: string;\r\n    formFields: FormField[];\r\n    isLoading: boolean;\r\n    methodId?: string;\r\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n    onUnhandledError?(error: Error): void;\r\n}\r\n\r\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\r\n\r\n        try {\r\n            await initialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\r\n\r\n        try {\r\n            await deinitialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { address, buttonId, formFields, isLoading } = this.props;\r\n\r\n        const customFormFields = formFields.filter(({ custom }) => custom);\r\n        const shouldShowCustomFormFields = customFormFields.length > 0;\r\n\r\n        return (\r\n            <LoadingOverlay isLoading={isLoading}>\r\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\r\n                    <div className=\"stepHeader-body subheader\">\r\n                        <StaticAddress address={address} />\r\n                    </div>\r\n\r\n                    <div className=\"stepHeader-actions subheader\">\r\n                        <Button\r\n                            id={buttonId}\r\n                            onClick={preventDefault()}\r\n                            size={ButtonSize.Tiny}\r\n                            testId=\"step-edit-button\"\r\n                            variant={ButtonVariant.Secondary}\r\n                        >\r\n                            <TranslatedString id=\"common.edit_action\" />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                {shouldShowCustomFormFields && (\r\n                    <Fieldset id=\"customFieldset\">\r\n                        {customFormFields.map((field) => (\r\n                            <DynamicFormField\r\n                                field={field}\r\n                                key={`${field.id}-${field.name}`}\r\n                                onChange={this.handleFieldValueChange(field.name)}\r\n                                parentFieldName=\"shippingAddress.customFields\"\r\n                            />\r\n                        ))}\r\n                    </Fieldset>\r\n                )}\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n\r\n    private handleFieldValueChange: (name: string) => (value: string) => void =\r\n        (name) => (value) => {\r\n            const { onFieldChange } = this.props;\r\n\r\n            onFieldChange(name, value);\r\n        };\r\n}\r\n\r\nexport default StaticAddressEditable;\r\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\r\nimport { memoizeOne } from '@bigcommerce/memoize';\r\nimport React, { FC, useCallback } from 'react';\r\n\r\nimport { ShippingAddressProps } from './ShippingAddress';\r\nimport StaticAddressEditable from './StaticAddressEditable';\r\n\r\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\r\n    shippingAddress:  Address,\r\n}\r\n\r\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\r\n    const {\r\n        methodId,\r\n        formFields,\r\n        onFieldChange,\r\n        initialize,\r\n        deinitialize,\r\n        shippingAddress,\r\n        isShippingStepPending,\r\n    } = props;\r\n\r\n    const initializeShipping = useCallback(\r\n        memoizeOne(\r\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\r\n                initialize({\r\n                    ...defaultOptions,\r\n                    ...options,\r\n                }),\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const editAddressButtonId = 'edit-ship-button';\r\n\r\n    const options: ShippingInitializeOptions = {\r\n        amazonpay: {\r\n            editAddressButtonId,\r\n        },\r\n    };\r\n\r\n    return (\r\n        <StaticAddressEditable\r\n            address={shippingAddress}\r\n            buttonId={editAddressButtonId}\r\n            deinitialize={deinitialize}\r\n            formFields={formFields}\r\n            initialize={initializeShipping(options)}\r\n            isLoading={isShippingStepPending}\r\n            methodId={methodId}\r\n            onFieldChange={onFieldChange}\r\n        />\r\n    );\r\n};\r\n","import classNames from 'classnames';\r\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\r\n\r\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\r\n    additionalClassName?: string;\r\n    testId?: string;\r\n    legend?: ReactNode;\r\n}\r\n\r\nconst Fieldset = forwardRef(\r\n    (\r\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\r\n        ref: Ref<HTMLFieldSetElement>,\r\n    ) => (\r\n        <fieldset\r\n            {...rest}\r\n            className={className || classNames('form-fieldset', additionalClassName)}\r\n            data-test={testId}\r\n            ref={ref}\r\n        >\r\n            {legend}\r\n\r\n            <div className=\"form-body\">{children}</div>\r\n        </fieldset>\r\n    ),\r\n);\r\n\r\nexport default Fieldset;\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\r\n\r\nimport { FormContext } from '../contexts';\r\n\r\nexport interface FormFieldContainerProps {\r\n    additionalClassName?: string;\r\n    children: ReactNode;\r\n    className?: string;\r\n    hasError?: boolean;\r\n    testId?: string;\r\n}\r\n\r\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\r\n    additionalClassName,\r\n    children,\r\n    className,\r\n    hasError,\r\n    testId,\r\n}) => (\r\n    <FormContext.Consumer>\r\n        {({ isSubmitted }) => (\r\n            <div\r\n                className={\r\n                    className ||\r\n                    classNames('form-field', additionalClassName, {\r\n                        'form-field--error': hasError && isSubmitted,\r\n                    })\r\n                }\r\n                data-test={testId}\r\n            >\r\n                {children}\r\n            </div>\r\n        )}\r\n    </FormContext.Consumer>\r\n);\r\n\r\nexport default memo(FormFieldContainer);\r\n","import { Field, FieldConfig, FieldProps, getIn } from 'formik';\r\nimport { isDate, noop } from 'lodash';\r\nimport React, {\r\n    Component,\r\n    createElement,\r\n    FunctionComponent,\r\n    memo,\r\n    useCallback,\r\n    useMemo,\r\n} from 'react';\r\nimport shallowEqual from 'shallowequal';\r\n\r\nimport { FormFieldContainer } from '../FormFieldContainer';\r\n\r\nexport interface BasicFormFieldProps extends FieldConfig {\r\n    additionalClassName?: string;\r\n    className?: string;\r\n    testId?: string;\r\n    onChange?(value: any): void;\r\n}\r\n\r\ntype InnerFieldInputProps = FieldProps &\r\n    Pick<FieldConfig, 'component' | 'render'> & {\r\n        onChange?(value: string): void;\r\n    };\r\n\r\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\r\n\r\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\r\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\r\n        const {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            field: { value },\r\n            onChange = noop,\r\n        } = this.props;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const comparableValue = isDate(value) ? value.getTime() : value;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const comparablePrevValue = isDate(prevField.value)\r\n            ? prevField.value.getTime()\r\n            : prevField.value;\r\n\r\n        if (comparableValue !== comparablePrevValue) {\r\n            onChange(value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { component = 'input', field, render } = this.props;\r\n\r\n        if (render) {\r\n            return render(this.props);\r\n        }\r\n\r\n        if (typeof component === 'string') {\r\n            return createElement(component, field);\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\r\n        return createElement(component as any, this.props);\r\n    }\r\n}\r\n\r\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\r\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\r\n        const input = useMemo(\r\n            () => (\r\n                <InnerFieldInput\r\n                    component={component}\r\n                    field={field}\r\n                    form={form}\r\n                    onChange={onChange}\r\n                    render={render}\r\n                />\r\n            ),\r\n            [field, form, onChange, component, render],\r\n        );\r\n\r\n        return (\r\n            <FormFieldContainer\r\n                additionalClassName={additionalClassName}\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                hasError={getIn(form.errors, field.name)}\r\n                testId={testId}\r\n            >\r\n                {input}\r\n            </FormFieldContainer>\r\n        );\r\n    },\r\n    (\r\n        { form: prevForm, field: prevField, ...prevProps },\r\n        { form: nextForm, field: nextField, ...nextProps },\r\n    ) =>\r\n        shallowEqual(prevProps, nextProps) &&\r\n        shallowEqual(prevForm, nextForm) &&\r\n        shallowEqual(prevField, nextField),\r\n);\r\n\r\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\r\n    additionalClassName,\r\n    className,\r\n    component,\r\n    render,\r\n    testId,\r\n    onChange,\r\n    ...rest\r\n}) => {\r\n    const renderInnerField = useCallback(\r\n        (props: FieldProps) => (\r\n            <InnerField\r\n                {...props}\r\n                additionalClassName={additionalClassName}\r\n                className={className}\r\n                component={component}\r\n                onChange={onChange}\r\n                render={render}\r\n                testId={testId}\r\n            />\r\n        ),\r\n        [additionalClassName, className, component, render, testId, onChange],\r\n    );\r\n\r\n    return <Field {...rest} render={renderInnerField} />;\r\n};\r\n\r\nexport default memo(BasicFormField);\r\n","import { ErrorMessage } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\n\r\nimport { FormContext } from '../contexts';\r\n\r\nexport interface FormFieldErrorProps {\r\n    name: string;\r\n    testId?: string;\r\n    errorId: string;\r\n}\r\n\r\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\r\n    const renderMessage = useCallback(\r\n        (message: string) => (\r\n            <ul className=\"form-field-errors\" data-test={testId}>\r\n                <li className=\"form-field-error\">\r\n                    <label\r\n                        aria-live=\"polite\"\r\n                        className=\"form-inlineMessage\"\r\n                        htmlFor={name}\r\n                        id={errorId}\r\n                        role=\"alert\"\r\n                    >\r\n                        {message}\r\n                    </label>\r\n                </li>\r\n            </ul>\r\n        ),\r\n        [errorId, name, testId],\r\n    );\r\n\r\n    return (\r\n        <FormContext.Consumer>\r\n            {({ isSubmitted }) =>\r\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\r\n            }\r\n        </FormContext.Consumer>\r\n    );\r\n};\r\n\r\nexport default memo(FormFieldError);\r\n","import { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport { BasicFormField } from '../BasicFormField';\r\nimport { FormFieldError } from '../FormFieldError';\r\nimport { Label } from '../Label';\r\n\r\nexport interface FormFieldProps {\r\n    additionalClassName?: string;\r\n    name: string;\r\n    label?: ReactNode | ((fieldName: string) => ReactNode);\r\n    labelContent?: ReactNode;\r\n    footer?: ReactNode;\r\n    id?: string;\r\n    input(field: FieldProps<string>): ReactNode;\r\n    onChange?(value: string): void;\r\n}\r\n\r\nconst FormField: FunctionComponent<FormFieldProps> = ({\r\n    additionalClassName,\r\n    labelContent,\r\n    label,\r\n    onChange,\r\n    footer,\r\n    input,\r\n    name,\r\n    id,\r\n}) => {\r\n    const renderField = useCallback(\r\n        (props: FieldProps<string>) => (\r\n            <>\r\n                {Boolean(label) && (typeof label === 'function' ? label(name) : label)}\r\n\r\n                {Boolean(labelContent && !label) && (\r\n                    <Label htmlFor={name} id={`${id ?? name}-label`}>\r\n                        {labelContent}\r\n                    </Label>\r\n                )}\r\n\r\n                {input(props)}\r\n\r\n                <FormFieldError\r\n                    errorId={`${id ?? name}-field-error-message`}\r\n                    name={name}\r\n                    testId={`${kebabCase(name)}-field-error-message`}\r\n                />\r\n\r\n                {footer}\r\n            </>\r\n        ),\r\n        [label, labelContent, id, input, name, footer],\r\n    );\r\n\r\n    return (\r\n        <BasicFormField\r\n            additionalClassName={additionalClassName}\r\n            name={name}\r\n            onChange={onChange}\r\n            render={renderField}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(FormField);\r\n","enum DynamicFormFieldType {\r\n    TELEPHONE = 'tel',\r\n    DROPDOWM = 'dropdown',\r\n    NUMBER = 'number',\r\n    PASSWORD = 'password',\r\n    CHECKBOX = 'checkbox',\r\n    MULTILINE = 'multiline',\r\n    DATE = 'date',\r\n    RADIO = 'radio',\r\n    TEXT = 'text',\r\n}\r\n\r\nexport default DynamicFormFieldType;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconChevronDown: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconChevronDown);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport { Input, InputProps } from '../Input';\r\nimport { Label } from '../Label';\r\n\r\nexport interface CheckboxInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst CheckboxInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                className={classNames(\r\n                    'form-checkbox',\r\n                    'optimizedCheckout-form-checkbox',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"checkbox\"\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default CheckboxInput;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\r\n\r\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n    additionalClassName?: string;\r\n    testId?: string;\r\n}\r\n\r\nconst TextArea = forwardRef(\r\n    (\r\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\r\n        ref: Ref<HTMLTextAreaElement>,\r\n    ) => (\r\n        <textarea\r\n            {...rest}\r\n            className={\r\n                className ||\r\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\r\n            }\r\n            data-test={testId}\r\n            ref={ref}\r\n        />\r\n    ),\r\n);\r\n\r\nexport default TextArea;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, Ref } from 'react';\r\n\r\nimport { Input, InputProps } from '../Input';\r\n\r\nexport interface TextInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    appearFocused?: boolean;\r\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\r\n}\r\n\r\nconst TextInput = forwardRef(\r\n    (\r\n        { additionalClassName, appearFocused, type = 'text', ...rest }: TextInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <Input\r\n            {...rest}\r\n            className={classNames(\r\n                'form-input',\r\n                'optimizedCheckout-form-input',\r\n                { 'form-input--focus': appearFocused },\r\n                { 'optimizedCheckout-form-input--focus': appearFocused },\r\n                additionalClassName,\r\n            )}\r\n            ref={ref}\r\n            type={type}\r\n        />\r\n    ),\r\n);\r\n\r\nexport default TextInput;\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { isDate, noop } from 'lodash';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\n\r\nimport { withDate } from '@bigcommerce/checkout/locale';\r\n\r\nimport { IconChevronDown } from '../../icon';\r\nimport { CheckboxInput } from '../CheckboxInput';\r\nimport { InputProps } from '../Input';\r\nimport { RadioInput } from '../RadioInput';\r\nimport { TextArea } from '../TextArea';\r\nimport { TextInput } from '../TextInput';\r\n\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\n\r\nexport interface DynamicInputProps extends InputProps {\r\n    id: string;\r\n    additionalClassName?: string;\r\n    value?: string | string[];\r\n    rows?: number;\r\n    fieldType?: DynamicFormFieldType;\r\n    options?: FormFieldItem[];\r\n    isFloatingLabelEnabled?: boolean;\r\n    inputDateFormat?: string;\r\n    date?: {\r\n        inputFormat: string;\r\n    };\r\n}\r\n\r\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\r\n    fieldType,\r\n    id,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    placeholder,\r\n    value,\r\n    isFloatingLabelEnabled,\r\n    date,\r\n    inputDateFormat,\r\n    ...rest\r\n}) => {\r\n    const inputFormat = inputDateFormat || date?.inputFormat || '';\r\n\r\n    const handleDateChange = useCallback(\r\n        (dateValue: string, event) =>\r\n            onChange({\r\n                ...event,\r\n                target: {\r\n                    name,\r\n                    value: dateValue,\r\n                },\r\n            }),\r\n        [onChange, name],\r\n    );\r\n\r\n    switch (fieldType) {\r\n        case DynamicFormFieldType.DROPDOWM:\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classNames(\r\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\r\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\r\n                        )}\r\n                    >\r\n                        <IconChevronDown />\r\n                    </div>\r\n                    <select\r\n                        {...(rest as any)}\r\n                        className={classNames(\r\n                            { 'floating-select': isFloatingLabelEnabled },\r\n                            'form-select optimizedCheckout-form-select',\r\n                        )}\r\n                        data-test={`${id}-select`}\r\n                        id={id}\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value ?? ''}\r\n                    >\r\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\r\n                        {options &&\r\n                            options.map(({ label, value: optionValue }) => (\r\n                                <option key={optionValue} value={optionValue}>\r\n                                    {label}\r\n                                </option>\r\n                            ))}\r\n                    </select>\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.RADIO:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <RadioInput\r\n                            {...rest}\r\n                            checked={optionValue === value}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-radio`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.CHECKBOX:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <CheckboxInput\r\n                            {...rest}\r\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-checkbox`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.DATE:\r\n            return (\r\n                <ReactDatePicker\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    {...(rest as any)}\r\n                    autoComplete=\"off\"\r\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\r\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\r\n                    // onChangeRaw={ rest.onChange }\r\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\r\n                    className=\"form-input optimizedCheckout-form-input\"\r\n                    dateFormat={inputFormat}\r\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\r\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\r\n                    name={name}\r\n                    onChange={handleDateChange}\r\n                    placeholderText={inputFormat.toUpperCase()}\r\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\r\n                    selected={isDate(value) ? value : undefined}\r\n                />\r\n            );\r\n\r\n        case DynamicFormFieldType.MULTILINE:\r\n            return (\r\n                <TextArea\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    {...(rest as any)}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    testId={`${id}-text`}\r\n                    type={fieldType}\r\n                    value={value}\r\n                />\r\n            );\r\n\r\n        default:\r\n            return (\r\n                <TextInput\r\n                    {...rest}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    placeholder={placeholder}\r\n                    testId={`${id}-${\r\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\r\n                    }`}\r\n                    type={fieldType}\r\n                    value={value}\r\n                />\r\n            );\r\n    }\r\n};\r\n\r\nexport default memo(withDate(DynamicInput));\r\n","/* istanbul ignore file */\r\n\r\nimport React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport './MultiCheckboxControl.scss';\r\n\r\nexport interface MultiCheckboxControlProps {\r\n    testId?: string;\r\n    onSelectedAll(): void;\r\n    onSelectedNone(): void;\r\n}\r\n\r\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\r\n    testId,\r\n    onSelectedAll,\r\n    onSelectedNone,\r\n}) => {\r\n    const handleSelectAllClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedAll();\r\n        },\r\n        [onSelectedAll],\r\n    );\r\n\r\n    const handleSelectNoneClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedNone();\r\n        },\r\n        [onSelectedNone],\r\n    );\r\n\r\n    return (\r\n        <ul className=\"multiCheckbox--controls\">\r\n            <li className=\"multiCheckbox--control\">\r\n                <TranslatedString id=\"address.select\" />\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId || ''}Checkbox-all-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectAllClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_all\" />\r\n                </a>\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId || ''}Checkbox-none-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectNoneClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_none\" />\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default memo(MultiCheckboxControl);\r\n","/* istanbul ignore file */\r\n\r\nimport { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\r\nimport { difference, kebabCase, noop, pick } from 'lodash';\r\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport { FormFieldContainer } from '../FormFieldContainer';\r\nimport { FormFieldError } from '../FormFieldError';\r\n\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport MultiCheckboxControl from './MultiCheckboxControl';\r\n\r\nexport interface CheckboxGroupFormFieldProps {\r\n    id: string;\r\n    label: ReactNode;\r\n    name: string;\r\n    options: FormFieldItem[];\r\n    onChange?(values: string[]): void;\r\n}\r\n\r\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\r\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\r\n\r\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\r\n    form: { values, errors },\r\n    id,\r\n    label,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    push,\r\n    remove,\r\n}) => {\r\n    const handleSelectAll = useCallback(() => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        difference(\r\n            options.map(({ value }) => value),\r\n            checkedValues,\r\n        ).forEach((val) => push(val));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, options, push, values]);\r\n\r\n    const handleSelectNone = useCallback(() => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        checkedValues.forEach(() => remove(0));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, remove, values]);\r\n\r\n    const handleInputChange = useCallback(\r\n        (event: ChangeEvent<HTMLInputElement>) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            const checkedValues: string[] = getIn(values, name) || [];\r\n            const { value, checked } = event.target;\r\n\r\n            if (checked) {\r\n                push(value);\r\n            } else {\r\n                remove(checkedValues.indexOf(value));\r\n            }\r\n\r\n            onChange(getIn(values, name));\r\n        },\r\n        [name, onChange, push, remove, values],\r\n    );\r\n\r\n    return (\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\r\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\r\n            {label}\r\n\r\n            {options.length > 1 && (\r\n                <MultiCheckboxControl\r\n                    onSelectedAll={handleSelectAll}\r\n                    onSelectedNone={handleSelectNone}\r\n                    testId={id}\r\n                />\r\n            )}\r\n\r\n            <DynamicInput\r\n                fieldType={DynamicFormFieldType.CHECKBOX}\r\n                id={id}\r\n                name={name}\r\n                onChange={handleInputChange}\r\n                options={options}\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                value={getIn(values, name) || []}\r\n            />\r\n\r\n            <FormFieldError\r\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n                errorId={`${id ?? name}-field-error-message`}\r\n                name={name}\r\n                testId={`${kebabCase(name)}-field-error-message`}\r\n            />\r\n        </FormFieldContainer>\r\n    );\r\n};\r\n\r\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\r\n    id,\r\n    label,\r\n    name,\r\n    onChange,\r\n    options,\r\n}) => {\r\n    const renderField = useCallback(\r\n        (renderProps: FieldArrayRenderProps) => (\r\n            <MultiCheckboxFormField\r\n                id={id}\r\n                label={label}\r\n                name={name}\r\n                onChange={onChange}\r\n                options={options}\r\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\r\n            />\r\n        ),\r\n        [id, label, name, onChange, options],\r\n    );\r\n\r\n    return <FieldArray name={name} render={renderField} />;\r\n};\r\n\r\nexport default memo(CheckboxGroupFormField);\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport { FieldProps } from 'formik';\r\nimport { includes } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { FormField } from '../FormField';\r\nimport { Label } from '../Label';\r\n\r\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\n\r\nexport interface DynamicFormFieldOption {\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface DynamicFormFieldProps {\r\n    field: FormFieldType;\r\n    inputId?: string;\r\n    extraClass?: string;\r\n    autocomplete?: string;\r\n    parentFieldName?: string;\r\n    placeholder?: string;\r\n    label?: ReactNode;\r\n    onChange?(value: string | string[]): void;\r\n}\r\n\r\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\r\n    field: {\r\n        fieldType,\r\n        type,\r\n        secret,\r\n        name,\r\n        label: fieldLabel,\r\n        required,\r\n        options,\r\n        max,\r\n        min,\r\n        maxLength,\r\n        inputDateFormat,\r\n    },\r\n    parentFieldName,\r\n    onChange,\r\n    placeholder,\r\n    inputId,\r\n    autocomplete,\r\n    label,\r\n    extraClass,\r\n}) => {\r\n    const fieldInputId = inputId || name;\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n\r\n    const labelComponent = useMemo(\r\n        () => (\r\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\r\n                {label || fieldLabel}\r\n                {!required && (\r\n                    <>\r\n                        {' '}\r\n                        <small className=\"optimizedCheckout-contentSecondary\">\r\n                            <TranslatedString id=\"common.optional_text\" />\r\n                        </small>\r\n                    </>\r\n                )}\r\n            </Label>\r\n        ),\r\n        [fieldInputId, fieldLabel, required, label],\r\n    );\r\n\r\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\r\n        if (fieldType === 'text') {\r\n            if (type === 'integer') {\r\n                return DynamicFormFieldType.NUMBER;\r\n            }\r\n\r\n            if (includes(name, 'phone') || includes(name, 'tel')) {\r\n                return DynamicFormFieldType.TELEPHONE;\r\n            }\r\n\r\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\r\n        }\r\n\r\n        return fieldType as DynamicFormFieldType;\r\n    }, [fieldType, type, name, secret]);\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps<string>) => (\r\n            <DynamicInput\r\n                {...field}\r\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\r\n                autoComplete={autocomplete}\r\n                fieldType={dynamicFormFieldType}\r\n                id={fieldInputId}\r\n                inputDateFormat={inputDateFormat}\r\n                max={max}\r\n                maxLength={maxLength || undefined}\r\n                min={min}\r\n                options={options && options.items}\r\n                placeholder={placeholder || (options && options.helperLabel)}\r\n                rows={options && options.rows}\r\n            />\r\n        ),\r\n        [\r\n            inputDateFormat,\r\n            fieldInputId,\r\n            autocomplete,\r\n            dynamicFormFieldType,\r\n            max,\r\n            maxLength,\r\n            min,\r\n            options,\r\n            placeholder,\r\n        ],\r\n    );\r\n\r\n    return (\r\n        <div className={`dynamic-form-field ${extraClass || ''}`}>\r\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\r\n                <CheckboxGroupFormField\r\n                    id={fieldInputId}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                    options={(options && options.items) || []}\r\n                />\r\n            ) : (\r\n                <FormField\r\n                    id={fieldInputId}\r\n                    input={renderInput}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(DynamicFormField);\r\n","import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React, { memo, MutableRefObject } from 'react';\r\n\r\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport {\r\n    Button,\r\n    ButtonSize,\r\n    ButtonVariant,\r\n    DynamicFormField,\r\n    Fieldset,\r\n    LoadingOverlay,\r\n} from '@bigcommerce/checkout/ui';\r\n\r\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\r\n\r\nexport interface PayPalFastlaneStaticAddressProps {\r\n    address: Address;\r\n    formFields: FormField[];\r\n    isLoading: boolean;\r\n    methodId: string;\r\n    paypalFastlaneShippingComponentRef: MutableRefObject<PayPalFastlaneAddressComponentRef>;\r\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onAddressSelect(address: Address): void;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n    onUnhandledError?(error: Error): void;\r\n    countries?: Country[];\r\n}\r\n\r\nexport interface PayPalFastlaneAddressComponentRef {\r\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\r\n}\r\n\r\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\r\n    const {\r\n        address: addressWithoutLocalization,\r\n        formFields,\r\n        isLoading,\r\n        onFieldChange,\r\n        countries,\r\n        paypalFastlaneShippingComponentRef\r\n    } = props;\r\n    const address = localizeAddress(addressWithoutLocalization, countries);\r\n\r\n    const customFormFields = formFields.filter(({ custom }) => custom);\r\n    const shouldShowCustomFormFields = customFormFields.length > 0;\r\n\r\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\r\n        onFieldChange(name, value);\r\n\r\n    const handleEditButtonClick = async () => {\r\n        if (typeof paypalFastlaneShippingComponentRef.current.showAddressSelector === 'function') {\r\n            const selectedAddress =\r\n                await paypalFastlaneShippingComponentRef.current.showAddressSelector();\r\n\r\n            if (selectedAddress) {\r\n                props.onAddressSelect({\r\n                    ...selectedAddress,\r\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\r\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\r\n                <div className=\"stepHeader-body subheader\">\r\n                    <div className=\"vcard checkout-address--static\">\r\n                        {(address.firstName || address.lastName) && (\r\n                            <p className=\"fn address-entry\">\r\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\r\n                                <span className=\"family-name\">{address.lastName}</span>\r\n                            </p>\r\n                        )}\r\n\r\n                        {(address.phone || address.company) && (\r\n                            <p className=\"address-entry\">\r\n                                <span className=\"company-name\">{`${address.company} `}</span>\r\n                                <span className=\"tel\">{address.phone}</span>\r\n                            </p>\r\n                        )}\r\n\r\n                        <div className=\"adr\">\r\n                            <p className=\"street-address address-entry\">\r\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\r\n                                {address.address2 && (\r\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\r\n                                )}\r\n                            </p>\r\n\r\n                            <p className=\"address-entry\">\r\n                                {address.city && (\r\n                                    <span className=\"locality\">{`${address.city}, `}</span>\r\n                                )}\r\n                                {address.localizedProvince && (\r\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\r\n                                )}\r\n                                {address.postalCode && (\r\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\r\n                                )}\r\n                                {address.localizedCountry && (\r\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\r\n                                )}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <PoweredByPayPalFastlaneLabel />\r\n                </div>\r\n\r\n                <div className=\"stepHeader-actions subheader\">\r\n                    <Button\r\n                        onClick={handleEditButtonClick}\r\n                        size={ButtonSize.Tiny}\r\n                        testId=\"step-edit-button\"\r\n                        variant={ButtonVariant.Secondary}\r\n                    >\r\n                        <TranslatedString id=\"common.edit_action\" />\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            {shouldShowCustomFormFields && (\r\n                <Fieldset id=\"customFieldset\">\r\n                    {customFormFields.map((field) => (\r\n                        <DynamicFormField\r\n                            field={field}\r\n                            key={`${field.id}-${field.name}`}\r\n                            onChange={handleFieldValueChange(field.name)}\r\n                            parentFieldName=\"shippingAddress.customFields\"\r\n                        />\r\n                    ))}\r\n                </Fieldset>\r\n            )}\r\n        </LoadingOverlay>\r\n    );\r\n};\r\n\r\nexport default memo(PayPalFastlaneShippingAddressForm);","import {\r\n    Address,\r\n    Consignment,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\r\nimport { connectFormik, ConnectFormikProps } from '../common/form';\r\nimport { Fieldset } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport { SingleShippingFormValues } from './SingleShippingForm';\r\n\r\nexport interface ShippingAddressFormProps {\r\n    addresses: CustomerAddress[];\r\n    address?: Address;\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    formFields: FormField[];\r\n    shouldShowSaveAddress?: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    validateAddressFields: boolean;\r\n    onUseNewAddress(): void;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n    onAddressSelect(address: Address): void;\r\n}\r\n\r\nconst addressFieldName = 'shippingAddress';\r\n\r\nclass ShippingAddressForm extends Component<\r\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\r\n> {\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            address: shippingAddress,\r\n            onAddressSelect,\r\n            onUseNewAddress,\r\n            shouldShowSaveAddress,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            formFields,\r\n            isLoading,\r\n            googleMapsApiKey,\r\n            isFloatingLabelEnabled,\r\n            formik: {\r\n                values: { shippingAddress: formAddress },\r\n            },\r\n            validateAddressFields,\r\n        } = this.props;\r\n\r\n        const hasAddresses = addresses && addresses.length > 0;\r\n        const hasValidCustomerAddress = isValidCustomerAddress(\r\n            shippingAddress,\r\n            addresses,\r\n            formFields,\r\n            validateAddressFields,\r\n        );\r\n\r\n        return (\r\n            <Fieldset id=\"checkoutShippingAddress\">\r\n                {hasAddresses && (\r\n                    <Fieldset id=\"shippingAddresses\">\r\n                        <LoadingOverlay isLoading={isLoading}>\r\n                            <AddressSelect\r\n                                addresses={addresses}\r\n                                onSelectAddress={onAddressSelect}\r\n                                onUseNewAddress={onUseNewAddress}\r\n                                selectedAddress={\r\n                                    hasValidCustomerAddress ? shippingAddress : undefined\r\n                                }\r\n                                type={AddressType.Shipping}\r\n                            />\r\n                        </LoadingOverlay>\r\n                    </Fieldset>\r\n                )}\r\n\r\n                {!hasValidCustomerAddress && (\r\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\r\n                        <AddressForm\r\n                            countries={countries}\r\n                            countriesWithAutocomplete={countriesWithAutocomplete}\r\n                            countryCode={formAddress && formAddress.countryCode}\r\n                            fieldName={addressFieldName}\r\n                            formFields={formFields}\r\n                            googleMapsApiKey={googleMapsApiKey}\r\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\r\n                            onChange={this.handleChange}\r\n                            setFieldValue={this.setFieldValue}\r\n                            shouldShowSaveAddress={shouldShowSaveAddress}\r\n                        />\r\n                    </LoadingOverlay>\r\n                )}\r\n            </Fieldset>\r\n        );\r\n    }\r\n\r\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\r\n        fieldName,\r\n        fieldValue,\r\n    ) => {\r\n        const {\r\n            formik: { setFieldValue },\r\n            formFields,\r\n        } = this.props;\r\n\r\n        const customFormFieldNames = formFields\r\n            .filter((field) => field.custom)\r\n            .map((field) => field.name);\r\n\r\n        const formFieldName = customFormFieldNames.includes(fieldName)\r\n            ? `customFields.${fieldName}`\r\n            : fieldName;\r\n\r\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\r\n    };\r\n\r\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\r\n        const { onFieldChange } = this.props;\r\n\r\n        onFieldChange(fieldName, value);\r\n    };\r\n\r\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\r\n        isOpen,\r\n        inputValue,\r\n    }) => {\r\n        const { onFieldChange } = this.props;\r\n\r\n        if (!isOpen) {\r\n            onFieldChange('address1', inputValue);\r\n        }\r\n    };\r\n}\r\n\r\nexport default connectFormik(ShippingAddressForm);\r\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { some } from 'lodash';\r\n\r\nimport isEqualAddress from './isEqualAddress';\r\nimport isValidAddress from './isValidAddress';\r\n\r\nexport default function isValidCustomerAddress(\r\n    address: Address | undefined,\r\n    addresses: CustomerAddress[],\r\n    formFields: FormField[],\r\n    validateAddressFields?: boolean,\r\n): boolean {\r\n    if (!address || !isValidAddress(address, formFields, validateAddressFields)) {\r\n        return false;\r\n    }\r\n\r\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\r\n}\r\n","import {\r\n    Address,\r\n    Consignment,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n    ShippingInitializeOptions\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React, {FC, useEffect, useRef, useState} from 'react';\r\n\r\nimport {\r\n    isPayPalCommerceFastlaneMethod,\r\n    isPayPalFastlaneMethod,\r\n    PayPalFastlaneShippingAddressForm,\r\n    usePayPalFastlaneAddress,\r\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\r\n\r\nimport { ShippingAddressProps } from './ShippingAddress';\r\n\r\nimport ShippingAddressForm from './ShippingAddressForm';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nexport interface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\r\n    methodId?: string,\r\n    shippingAddress?:  Address,\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    formFields: FormField[],\r\n    googleMapsApiKey?: string;\r\n    handleFieldChange(fieldName: string, value: string): void,\r\n    onAddressSelect(address: Address): void;\r\n}\r\n\r\ninterface PayPalFastlaneAddressComponentRef {\r\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\r\n}\r\n\r\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\r\n    const {\r\n        methodId,\r\n        formFields,\r\n        countries,\r\n        onAddressSelect,\r\n        onFieldChange,\r\n        onUnhandledError,\r\n        initialize,\r\n        deinitialize,\r\n        shippingAddress,\r\n        addresses,\r\n        handleFieldChange,\r\n        isLoading\r\n    } = props;\r\n    const [isLoadingStrategy, setIsLoadingStrategyStrategy] = useState<boolean>(true);\r\n\r\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\r\n    const fastlaneOptions = (provider: string) => {\r\n        return {\r\n            [provider]: {\r\n                onPayPalFastlaneAddressChange: (\r\n                    showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\r\n                ) => {\r\n                    paypalFastlaneShippingComponent.current.showAddressSelector =\r\n                        showPayPalFastlaneAddressSelector;\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\r\n        methodId,\r\n    )\r\n        ? fastlaneOptions('paypalcommercefastlane')\r\n        : fastlaneOptions('braintreefastlane');\r\n\r\n    const initializeShippingStrategyOrThrow = async () => {\r\n        try {\r\n            await initialize({\r\n                methodId,\r\n                ...initializationOptions,\r\n            });\r\n        } catch (error) {\r\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n        setIsLoadingStrategyStrategy(false);\r\n    };\r\n\r\n    const deinitializeShippingStrategyOrThrow = async () => {\r\n        try {\r\n            await deinitialize({ methodId });\r\n        } catch (error) {\r\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        void initializeShippingStrategyOrThrow();\r\n\r\n        return () => {\r\n            void deinitializeShippingStrategyOrThrow();\r\n        };\r\n    }, []);\r\n\r\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\r\n\r\n    return (\r\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoadingStrategy || isLoading}>\r\n            {methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm ? (\r\n                <PayPalFastlaneShippingAddressForm\r\n                    address={shippingAddress}\r\n                    countries={countries}\r\n                    deinitialize={deinitialize}\r\n                    formFields={formFields}\r\n                    initialize={initialize}\r\n                    isLoading={isLoadingStrategy}\r\n                    methodId={methodId}\r\n                    onAddressSelect={onAddressSelect}\r\n                    onFieldChange={onFieldChange}\r\n                    onUnhandledError={onUnhandledError}\r\n                    paypalFastlaneShippingComponentRef={paypalFastlaneShippingComponent}\r\n                />\r\n            ) : (\r\n                <ShippingAddressForm\r\n                    address={shippingAddress}\r\n                    addresses={addresses}\r\n                    consignments={props.consignments}\r\n                    countries={countries}\r\n                    countriesWithAutocomplete={props.countriesWithAutocomplete}\r\n                    formFields={formFields}\r\n                    googleMapsApiKey={props.googleMapsApiKey}\r\n                    isFloatingLabelEnabled={props.isFloatingLabelEnabled}\r\n                    isLoading={isLoadingStrategy}\r\n                    onAddressSelect={onAddressSelect}\r\n                    onFieldChange={handleFieldChange}\r\n                    onUseNewAddress={props.onUseNewAddress}\r\n                    shouldShowSaveAddress={props.shouldShowSaveAddress}\r\n                    validateAddressFields={props.validateAddressFields}\r\n                />\r\n            )}\r\n        </LoadingOverlay>\r\n    );\r\n};","import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, useContext } from 'react';\r\n\r\nimport { isPayPalFastlaneMethod } from '@bigcommerce/checkout/paypal-fastlane-integration';\r\nimport { FormContext } from '@bigcommerce/checkout/ui';\r\n\r\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\r\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\r\nimport ShippingAddressForm from './ShippingAddressForm';\r\n\r\n\r\nexport interface ShippingAddressProps {\r\n    addresses: CustomerAddress[];\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    formFields: FormField[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    hasRequestedShippingOptions: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    validateAddressFields: boolean;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onAddressSelect(address: Address): void;\r\n    onFieldChange(name: string, value: string): void;\r\n    onUnhandledError?(error: Error): void;\r\n    onUseNewAddress(): void;\r\n}\r\n\r\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\r\n    const {\r\n        methodId,\r\n        formFields,\r\n        countries,\r\n        countriesWithAutocomplete,\r\n        consignments,\r\n        googleMapsApiKey,\r\n        onAddressSelect,\r\n        onFieldChange,\r\n        onUseNewAddress,\r\n        isLoading,\r\n        shippingAddress,\r\n        hasRequestedShippingOptions,\r\n        addresses,\r\n        shouldShowSaveAddress,\r\n        isFloatingLabelEnabled,\r\n        validateAddressFields,\r\n    } = props;\r\n\r\n    const { setSubmitted } = useContext(FormContext);\r\n\r\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\r\n        if (hasRequestedShippingOptions) {\r\n            setSubmitted(true);\r\n        }\r\n\r\n        onFieldChange(fieldName, value);\r\n    };\r\n\r\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress) {\r\n        return (\r\n            <PayPalFastlaneShippingAddress\r\n                {...props}\r\n                handleFieldChange={handleFieldChange}\r\n                methodId={methodId}\r\n                shippingAddress={shippingAddress}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (methodId === 'amazonpay' && shippingAddress) {\r\n        return (\r\n            <AmazonPayShippingAddress\r\n                {...props}\r\n                shippingAddress={shippingAddress}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ShippingAddressForm\r\n            address={shippingAddress}\r\n            addresses={addresses}\r\n            consignments={consignments}\r\n            countries={countries}\r\n            countriesWithAutocomplete={countriesWithAutocomplete}\r\n            formFields={formFields}\r\n            googleMapsApiKey={googleMapsApiKey}\r\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n            isLoading={isLoading}\r\n            onAddressSelect={onAddressSelect}\r\n            onFieldChange={handleFieldChange}\r\n            onUseNewAddress={onUseNewAddress}\r\n            shouldShowSaveAddress={shouldShowSaveAddress}\r\n            validateAddressFields={validateAddressFields}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(ShippingAddress);\r\n","export const SHIPPING_ADDRESS_FIELDS = [\r\n    'address1',\r\n    'postalCode',\r\n    'countryCode',\r\n    'city',\r\n    'stateOrProvince',\r\n    'stateOrProvinceCode',\r\n];\r\n","import {\r\n    Address,\r\n    CheckoutParams,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    CustomerAddress,\r\n    CustomerRequestOptions,\r\n    FormField,\r\n    RequestOptions,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps } from 'formik';\r\nimport { debounce, isEqual, noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\nimport { lazy, object } from 'yup';\r\n\r\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\nimport { FormContext } from '@bigcommerce/checkout/ui';\r\n\r\nimport {\r\n    AddressFormValues,\r\n    getAddressFormFieldsValidationSchema,\r\n    getTranslateAddressError,\r\n    isEqualAddress,\r\n    mapAddressFromFormValues,\r\n    mapAddressToFormValues,\r\n} from '../address';\r\nimport { withFormikExtended } from '../common/form';\r\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\r\nimport { PaymentMethodId } from '../payment/paymentMethod';\r\nimport { Fieldset, Form } from '../ui/form';\r\n\r\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\r\n// import hasSelectedShippingOptions from './hasSelectedShippingOptions';\r\nimport ShippingAddress from './ShippingAddress';\r\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\r\nimport ShippingFormFooter from './ShippingFormFooter';\r\n\r\nexport interface SingleShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customerMessage: string;\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shippingAutosaveDelay?: number;\r\n    shouldShowSaveAddress?: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    isInitialValueLoaded: boolean;\r\n    validateGoogleMapAutoCompleteMaxLength: boolean;\r\n    validateAddressFields: boolean;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError?(error: Error): void;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    updateAddress(\r\n        address: Partial<Address>,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): Promise<CheckoutSelectors>;\r\n}\r\n\r\nexport interface SingleShippingFormValues {\r\n    billingSameAsShipping: boolean;\r\n    shippingAddress?: AddressFormValues;\r\n    orderComment: string;\r\n}\r\n\r\ninterface SingleShippingFormState {\r\n    isResettingAddress: boolean;\r\n    isUpdatingShippingData: boolean;\r\n    hasRequestedShippingOptions: boolean;\r\n}\r\n\r\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\r\n    const methodIdsWithoutCustomValidation: string[] = [\r\n        PaymentMethodId.BraintreeAcceleratedCheckout,\r\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout\r\n    ];\r\n\r\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\r\n}\r\n\r\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\r\n\r\nclass SingleShippingForm extends PureComponent<\r\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\r\n> {\r\n    static contextType = FormContext;\r\n\r\n    state: SingleShippingFormState = {\r\n        isResettingAddress: false,\r\n        isUpdatingShippingData: false,\r\n        hasRequestedShippingOptions: false,\r\n    };\r\n\r\n    private debouncedUpdateAddress: any;\r\n\r\n    constructor(\r\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\r\n    ) {\r\n        super(props);\r\n\r\n        const { updateAddress } = this.props;\r\n\r\n        this.debouncedUpdateAddress = debounce(\r\n            async (address: Address, includeShippingOptions: boolean) => {\r\n                try {\r\n                    await updateAddress(address, {\r\n                        params: {\r\n                            include: {\r\n                                'consignments.availableShippingOptions': includeShippingOptions,\r\n                            },\r\n                        },\r\n                    });\r\n\r\n                    if (includeShippingOptions) {\r\n                        this.setState({ hasRequestedShippingOptions: true });\r\n                    }\r\n                } finally {\r\n                    this.setState({ isUpdatingShippingData: false });\r\n                }\r\n            },\r\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\r\n        );\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            cartHasChanged,\r\n            isInitialValueLoaded,\r\n            isLoading,\r\n            onUnhandledError,\r\n            methodId,\r\n            shouldShowSaveAddress,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            googleMapsApiKey,\r\n            shippingAddress,\r\n            consignments,\r\n            shouldShowOrderComments,\r\n            initialize,\r\n            // isValid,\r\n            deinitialize,\r\n            values: { shippingAddress: addressForm },\r\n            isShippingStepPending,\r\n            isFloatingLabelEnabled,\r\n            validateAddressFields,\r\n        } = this.props;\r\n\r\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\r\n            this.state;\r\n\r\n        // const PAYMENT_METHOD_VALID = ['amazonpay'];\r\n        const shouldShowBillingSameAsShipping = false;\r\n        // const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\r\n        //     (method) => method === methodId,\r\n        // );\r\n\r\n        return (\r\n            <Form autoComplete=\"on\">\r\n                <Fieldset>\r\n                    <ShippingAddress\r\n                        addresses={addresses}\r\n                        consignments={consignments}\r\n                        countries={countries}\r\n                        countriesWithAutocomplete={countriesWithAutocomplete}\r\n                        deinitialize={deinitialize}\r\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\r\n                        googleMapsApiKey={googleMapsApiKey}\r\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\r\n                        initialize={initialize}\r\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                        isLoading={isResettingAddress}\r\n                        isShippingStepPending={isShippingStepPending}\r\n                        methodId={methodId}\r\n                        onAddressSelect={this.handleAddressSelect}\r\n                        onFieldChange={this.handleFieldChange}\r\n                        onUnhandledError={onUnhandledError}\r\n                        onUseNewAddress={this.onUseNewAddress}\r\n                        shippingAddress={shippingAddress}\r\n                        shouldShowSaveAddress={shouldShowSaveAddress}\r\n                        validateAddressFields={validateAddressFields}\r\n                    />\r\n                    {shouldShowBillingSameAsShipping && (\r\n                        <div className=\"form-body\">\r\n                            <BillingSameAsShippingField />\r\n                        </div>\r\n                    )}\r\n                </Fieldset>\r\n\r\n                <ShippingFormFooter\r\n                    cartHasChanged={cartHasChanged}\r\n                    isInitialValueLoaded={isInitialValueLoaded}\r\n                    isLoading={isLoading || isUpdatingShippingData}\r\n                    isMultiShippingMode={false}\r\n                    shouldDisableSubmit={false}\r\n                    // shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                    shouldShowOrderComments={shouldShowOrderComments}\r\n                    shouldShowShippingOptions={false}\r\n                    // shouldShowShippingOptions={isValid}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    // private shouldDisableSubmit: () => boolean = () => {\r\n    //     const { isLoading, consignments, isValid } = this.props;\r\n\r\n    //     const { isUpdatingShippingData } = this.state;\r\n\r\n    //     if (!isValid) {\r\n    //         return false;\r\n    //     }\r\n\r\n    //     return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\r\n    // };\r\n\r\n    private handleFieldChange: (name: string) => void = async (name) => {\r\n        const { setFieldValue } = this.props;\r\n\r\n        if (name === 'countryCode') {\r\n            setFieldValue('shippingAddress.stateOrProvince', '');\r\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\r\n        }\r\n\r\n        // Enqueue the following code to run after Formik has run validation\r\n        await new Promise((resolve) => setTimeout(resolve));\r\n\r\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\r\n\r\n        const { hasRequestedShippingOptions } = this.state;\r\n\r\n        const { isValid } = this.props;\r\n\r\n        if (!isValid) {\r\n            return;\r\n        }\r\n\r\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\r\n    };\r\n\r\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\r\n        const {\r\n            shippingAddress,\r\n            values: { shippingAddress: addressForm },\r\n        } = this.props;\r\n\r\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\r\n\r\n        if (Array.isArray(shippingAddress?.customFields)) {\r\n            includeShippingOptions = !isEqual(\r\n                shippingAddress?.customFields,\r\n                updatedShippingAddress?.customFields\r\n            ) || includeShippingOptions;\r\n        }\r\n\r\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ isUpdatingShippingData: true });\r\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\r\n    }\r\n\r\n    private handleAddressSelect: (address: Address) => void = async (address) => {\r\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            await updateAddress(address);\r\n\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address.countryCode),\r\n                    address,\r\n                ),\r\n            });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private onUseNewAddress: () => void = async () => {\r\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            const address = await deleteConsignments();\r\n\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address && address.countryCode),\r\n                    address,\r\n                ),\r\n            });\r\n        } catch (e) {\r\n            onUnhandledError(e);\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private getFields(countryCode: string | undefined): FormField[] {\r\n        const { getFields } = this.props;\r\n\r\n        return getFields(countryCode);\r\n    }\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({\r\n            getFields,\r\n            shippingAddress,\r\n            isBillingSameAsShipping,\r\n            customerMessage,\r\n        }) => ({\r\n            billingSameAsShipping: isBillingSameAsShipping,\r\n            orderComment: customerMessage,\r\n            shippingAddress: mapAddressToFormValues(\r\n                getFields(shippingAddress && shippingAddress.countryCode),\r\n                shippingAddress,\r\n            ),\r\n        }),\r\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\r\n            !!shippingAddress &&\r\n            getAddressFormFieldsValidationSchema({\r\n                language,\r\n                formFields: getFields(shippingAddress.countryCode),\r\n            }).isValidSync(shippingAddress),\r\n        validationSchema: ({\r\n            language,\r\n            getFields,\r\n            methodId,\r\n            validateGoogleMapAutoCompleteMaxLength,\r\n            validateAddressFields,\r\n        }: SingleShippingFormProps & WithLanguageProps) =>\r\n            shouldHaveCustomValidation(methodId)\r\n                ? object({\r\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                          getCustomFormFieldsValidationSchema({\r\n                              translate: getTranslateAddressError(language),\r\n                              formFields: getFields(formValues && formValues.countryCode),\r\n                          }),\r\n                      ),\r\n                  })\r\n                : object({\r\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                          getAddressFormFieldsValidationSchema({\r\n                              language,\r\n                              formFields: getFields(formValues && formValues.countryCode),\r\n                              validateGoogleMapAutoCompleteMaxLength,\r\n                              validateAddressFields\r\n                          }),\r\n                      ),\r\n                  }),\r\n        enableReinitialize: false,\r\n    })(SingleShippingForm),\r\n);\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    Cart,\r\n    CheckoutParams,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    ConsignmentAssignmentRequestBody,\r\n    Country,\r\n    CustomerAddress,\r\n    CustomerRequestOptions,\r\n    FormField,\r\n    RequestOptions,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React from 'react';\r\n\r\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\r\nimport MultiShippingFormV2 from './MultiShippingFormV2';\r\nimport MultiShippingGuestForm from './MultiShippingGuestForm';\r\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\r\n\r\nexport interface ShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    cart: Cart;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customerMessage: string;\r\n    googleMapsApiKey?: string;\r\n    isBillingSameAsShipping: boolean;\r\n    isGuest: boolean;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    isInitialValueLoaded: boolean;\r\n    isNewMultiShippingUIEnabled: boolean;\r\n    validateGoogleMapAutoCompleteMaxLength: boolean;\r\n    validateAddressFields: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onCreateAccount(): void;\r\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\r\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\r\n    onSignIn(): void;\r\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    onUseNewAddress(address: Address, itemId: string): void;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    updateAddress(\r\n        address: Partial<Address>,\r\n        options: RequestOptions<CheckoutParams>,\r\n    ): Promise<CheckoutSelectors>;\r\n}\r\n\r\nconst ShippingForm = ({\r\n      addresses,\r\n      assignItem,\r\n      cart,\r\n      cartHasChanged,\r\n      createCustomerAddress,\r\n      consignments,\r\n      countries,\r\n      countriesWithAutocomplete,\r\n      onCreateAccount,\r\n      customerMessage,\r\n      deinitialize,\r\n      deleteConsignments,\r\n      getFields,\r\n      googleMapsApiKey,\r\n      initialize,\r\n      isBillingSameAsShipping,\r\n      isGuest,\r\n      isLoading,\r\n      isMultiShippingMode,\r\n      methodId,\r\n      onMultiShippingSubmit,\r\n      onSignIn,\r\n      onSingleShippingSubmit,\r\n      onUnhandledError,\r\n      onUseNewAddress,\r\n      shippingAddress,\r\n      shouldShowOrderComments,\r\n      shouldShowSaveAddress,\r\n      signOut,\r\n      updateAddress,\r\n      isShippingStepPending,\r\n      isFloatingLabelEnabled,\r\n      isInitialValueLoaded,\r\n      isNewMultiShippingUIEnabled,\r\n      validateGoogleMapAutoCompleteMaxLength,\r\n      validateAddressFields,\r\n  }: ShippingFormProps & WithLanguageProps) => {\r\n\r\n    const getMultiShippingForm = () => {\r\n        if (isGuest) {\r\n            return (\r\n                <MultiShippingGuestForm onCreateAccount={onCreateAccount} onSignIn={onSignIn} />\r\n            );\r\n        }\r\n\r\n        if (isNewMultiShippingUIEnabled) {\r\n            return <MultiShippingFormV2\r\n                cartHasChanged={cartHasChanged}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                customerMessage={customerMessage}\r\n                defaultCountryCode={shippingAddress?.countryCode}\r\n                isLoading={isLoading}\r\n                onSubmit={onMultiShippingSubmit}\r\n                onUnhandledError={onUnhandledError}\r\n            />;\r\n        }\r\n\r\n        return <MultiShippingForm\r\n            addresses={addresses}\r\n            assignItem={assignItem}\r\n            cart={cart}\r\n            cartHasChanged={cartHasChanged}\r\n            consignments={consignments}\r\n            countries={countries}\r\n            countriesWithAutocomplete={countriesWithAutocomplete}\r\n            createCustomerAddress={createCustomerAddress}\r\n            customerMessage={customerMessage}\r\n            defaultCountryCode={shippingAddress?.countryCode}\r\n            getFields={getFields}\r\n            googleMapsApiKey={googleMapsApiKey}\r\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n            isInitialValueLoaded={isInitialValueLoaded}\r\n            isLoading={isLoading}\r\n            onSubmit={onMultiShippingSubmit}\r\n            onUnhandledError={onUnhandledError}\r\n            onUseNewAddress={onUseNewAddress}\r\n            shouldShowOrderComments={shouldShowOrderComments}\r\n            validateAddressFields={validateAddressFields}\r\n        />;\r\n    };\r\n\r\n    return isMultiShippingMode ? (\r\n        getMultiShippingForm()\r\n    ) : (\r\n        <SingleShippingForm\r\n            addresses={addresses}\r\n            cartHasChanged={cartHasChanged}\r\n            consignments={consignments}\r\n            countries={countries}\r\n            countriesWithAutocomplete={countriesWithAutocomplete}\r\n            customerMessage={customerMessage}\r\n            deinitialize={deinitialize}\r\n            deleteConsignments={deleteConsignments}\r\n            getFields={getFields}\r\n            googleMapsApiKey={googleMapsApiKey}\r\n            initialize={initialize}\r\n            isBillingSameAsShipping={isBillingSameAsShipping}\r\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n            isInitialValueLoaded={isInitialValueLoaded}\r\n            isLoading={isLoading}\r\n            isMultiShippingMode={isMultiShippingMode}\r\n            isShippingStepPending={isShippingStepPending}\r\n            methodId={methodId}\r\n            onSubmit={onSingleShippingSubmit}\r\n            onUnhandledError={onUnhandledError}\r\n            shippingAddress={shippingAddress}\r\n            shouldShowOrderComments={shouldShowOrderComments}\r\n            shouldShowSaveAddress={shouldShowSaveAddress}\r\n            signOut={signOut}\r\n            updateAddress={updateAddress}\r\n            validateAddressFields={validateAddressFields}\r\n            validateGoogleMapAutoCompleteMaxLength={validateGoogleMapAutoCompleteMaxLength}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withLanguage(ShippingForm);\r\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport React, { FunctionComponent, memo, useState } from 'react';\r\n\r\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { ConfirmationModal } from '@bigcommerce/checkout/ui';\r\n\r\nimport { Legend } from '../ui/form';\r\nimport './ShippingHeader.scss';\r\n\r\ninterface ShippingHeaderProps {\r\n    isMultiShippingMode: boolean;\r\n    isGuest: boolean;\r\n    shouldShowMultiShipping: boolean;\r\n    onMultiShippingChange(): void;\r\n    isNewMultiShippingUIEnabled: boolean;\r\n    cartHasPromotionalItems?: boolean;\r\n}\r\n\r\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\r\n    isMultiShippingMode,\r\n    isGuest,\r\n    onMultiShippingChange,\r\n    shouldShowMultiShipping,\r\n    isNewMultiShippingUIEnabled,\r\n    cartHasPromotionalItems,\r\n}) => {\r\n    const [isSingleShippingConfirmationModalOpen, setIsSingleShippingConfirmationModalOpen] = useState(false);\r\n    const [isMultiShippingUnavailableModalOpen, setIsMultiShippingUnavailableModalOpen] = useState(false);\r\n\r\n    const handleShipToSingleConfirmation = () => {\r\n        setIsSingleShippingConfirmationModalOpen(false);\r\n        onMultiShippingChange();\r\n    }\r\n\r\n    const showConfirmationModal = shouldShowMultiShipping && isNewMultiShippingUIEnabled && isMultiShippingMode;\r\n    const showMultiShippingUnavailableModal = shouldShowMultiShipping && isNewMultiShippingUIEnabled && !isMultiShippingMode && cartHasPromotionalItems;\r\n\r\n    return (\r\n        <>\r\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\r\n            <div className={classNames('form-legend-container', { 'shipping-header': isNewMultiShippingUIEnabled })}>\r\n                <Legend testId=\"shipping-address-heading\">\r\n                    <TranslatedString\r\n                        id={\r\n                            isMultiShippingMode\r\n                                ? isGuest\r\n                                    ? 'shipping.multishipping_address_heading_guest'\r\n                                    : 'shipping.multishipping_address_heading'\r\n                                : 'shipping.shipping_address_heading'\r\n                        }\r\n                    />\r\n                </Legend>\r\n\r\n                {showConfirmationModal && (\r\n                    <>\r\n                        <ConfirmationModal\r\n                            action={handleShipToSingleConfirmation}\r\n                            actionButtonLabel={<TranslatedString id=\"common.proceed_action\" />}\r\n                            headerId=\"shipping.ship_to_single_action\"\r\n                            isModalOpen={isSingleShippingConfirmationModalOpen}\r\n                            messageId=\"shipping.ship_to_single_message\"\r\n                            onRequestClose={() => setIsSingleShippingConfirmationModalOpen(false)}\r\n                        />\r\n                        <a\r\n                            data-test=\"shipping-mode-toggle\"\r\n                            href=\"#\"\r\n                            onClick={preventDefault(() => setIsSingleShippingConfirmationModalOpen(true))}\r\n                        >\r\n                            <TranslatedString id=\"shipping.ship_to_single\" />\r\n                        </a>\r\n                    </>\r\n                )}\r\n                {showMultiShippingUnavailableModal && (\r\n                    <>\r\n                        <ConfirmationModal\r\n                            action={() => setIsMultiShippingUnavailableModalOpen(false)}\r\n                            actionButtonLabel={<TranslatedString id=\"common.back_action\" />}\r\n                            headerId=\"shipping.multishipping_unavailable_action\"\r\n                            isModalOpen={isMultiShippingUnavailableModalOpen}\r\n                            messageId=\"shipping.multishipping_unavailable_message\"\r\n                            onRequestClose={() => setIsMultiShippingUnavailableModalOpen(false)}\r\n                        />\r\n                        <a\r\n                            data-test=\"shipping-mode-toggle\"\r\n                            href=\"#\"\r\n                            onClick={preventDefault(() => setIsMultiShippingUnavailableModalOpen(true))}\r\n                        >\r\n                            <TranslatedString id=\"shipping.ship_to_multi\" />\r\n                        </a>\r\n                    </>\r\n                )}\r\n                {!showConfirmationModal && !showMultiShippingUnavailableModal && shouldShowMultiShipping && (\r\n                    <a\r\n                        data-test=\"shipping-mode-toggle\"\r\n                        href=\"#\"\r\n                        onClick={preventDefault(onMultiShippingChange)}\r\n                    >\r\n                        <TranslatedString\r\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\r\n                        />\r\n                    </a>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(ShippingHeader);\r\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nexport interface StripeupeShippingAddressProps {\r\n    methodId?: string;\r\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onUnhandledError?(error: Error): void;\r\n}\r\n\r\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            initialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await initialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const {\r\n            deinitialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await deinitialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\r\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\r\n                </div>\r\n                <br />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StripeShippingAddressDisplay;\r\n","interface StripeCountryMapping {\r\n    [key: string]: StripeStateMapping;\r\n}\r\n\r\ninterface StripeStateMapping {\r\n    [key: string]: string;\r\n}\r\n\r\nexport default function StripeStateMapper(country: string, state: string): string {\r\n\r\n    const countries: StripeCountryMapping = {\r\n        'MX': {\r\n            'Ags.': 'AGU',\r\n            'B.C.': 'BCN',\r\n            'B.C.S.': 'BCS',\r\n            'Camp.': 'CAM',\r\n            'Coah.': 'COA',\r\n            'Col.': 'COL',\r\n            'Chis.': 'CHP',\r\n            'Chih.': 'CHH',\r\n            'Dgo.': 'DUR',\r\n            'Gto.': 'GUA',\r\n            'Gro.': 'GRO',\r\n            'Hgo.': 'HID',\r\n            'Jal.': 'JAL',\r\n            'Méx.': 'MEX',\r\n            'CDMX': 'MEX',\r\n            'Mich.': 'MIC',\r\n            'Mor.': 'MOR',\r\n            'Nay.': 'NAY',\r\n            'N.L.': 'NLE',\r\n            'Oax.': 'OAX',\r\n            'Pue.': 'PUE',\r\n            'Qro.': 'QUE',\r\n            'Q.R.': 'ROO',\r\n            'S.L.P.': 'SLP',\r\n            'Sin.': 'SIN',\r\n            'Son.': 'SON',\r\n            'Tab.': 'TAB',\r\n            'Tamps.': 'TAM',\r\n            'Tlax.': 'TLA',\r\n            'Ver.': 'VER',\r\n            'Yuc.': 'YUC',\r\n            'Zac.': 'ZAC',\r\n        },\r\n        'AR': {\r\n            'Ciudad Autónoma de Buenos Aires': 'C',\r\n            'Buenos Aires': 'B',\r\n            'Catamarca': 'K',\r\n            'Chaco': 'H',\r\n            'Chubut': 'U',\r\n            'Córdoba': 'X',\r\n            'Corrientes': 'W',\r\n            'Entre Ríos': 'E',\r\n            'Formosa': 'P',\r\n            'Jujuy': 'Y',\r\n            'La Pampa': 'L',\r\n            'La Rioja': 'F',\r\n            'Mendoza': 'M',\r\n            'Misiones': 'N',\r\n            'Neuquén': 'Q',\r\n            'Salta': 'A',\r\n            'San Juan': 'J',\r\n            'San Luis': 'D',\r\n            'Santa Fe': 'S',\r\n            'Santiago del Estero': 'G',\r\n            'Tierra del Fuego': 'V',\r\n            'Tucumán': 'W',\r\n        },\r\n        'IN': {\r\n            'Andhra Pradesh': 'AP',\r\n            'Arunachal Pradesh': 'AR',\r\n            'Assam': 'AS',\r\n            'Bihar': 'BR',\r\n            'Chhattisgarh': 'CG',\r\n            'Goa': 'GA',\r\n            'Gujarat': 'GJ',\r\n            'Haryana': 'HR',\r\n            'Himachal Pradesh': 'HP',\r\n            'Jammu and Kashmir': 'JK',\r\n            'Jharkhand': 'JH',\r\n            'Karnataka': 'KA',\r\n            'Kerala': 'KL',\r\n            'Madhya Pradesh': 'MP',\r\n            'Maharashtra': 'MH',\r\n            'Manipur': 'MN',\r\n            'Meghalaya': 'ML',\r\n            'Mizoram': 'MZ',\r\n            'Nagaland': 'NL',\r\n            'Odisha': 'OR',\r\n            'Punjab': 'PB',\r\n            'Rajasthan': 'RJ',\r\n            'Sikkim': 'SK',\r\n            'Tamil Nadu': 'TN',\r\n            'Tripura': 'TR',\r\n            'Uttarakhand': 'UK',\r\n            'Uttar Pradesh': 'UP',\r\n            'West Bengal': 'WB',\r\n            'Andaman and Nicobar Islands': 'AN',\r\n            'Chandigarh': 'CH',\r\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\r\n            'Lakshadweep': 'LD',\r\n            'Delhi': 'DL',\r\n            'Puducherry': 'PY',\r\n            'Telangana': 'TS',\r\n        },\r\n        'ID': {\r\n            'Bali': 'BA',\r\n            'Banten': 'BT',\r\n            'Bengkulu': 'BE',\r\n            'Aceh': 'DA',\r\n            'DKI Jakarta': 'JK',\r\n            'Sumatera Utara': 'SU',\r\n            'Sumatera Barat': 'SB',\r\n            'Riau': 'SI',\r\n            'Jambi': 'JA',\r\n            'Sumatera Selatan': 'SS',\r\n            'Lampung': 'LA',\r\n            'Jawa Barat': 'JB',\r\n            'Jawa Timur': 'JT',\r\n            'Daerah Istimewa Yogyakarta': 'DY',\r\n            'Kalimantan Barat': 'KB',\r\n            'Kalimantan Tengah': 'KT',\r\n            'Kalimantan Timur': 'KI',\r\n            'Kalimantan Selatan': 'KS',\r\n            'Nusa Tenggara Barat': 'NB',\r\n            'Nusa Tenggara Timur': 'NT',\r\n            'Sulawesi Selatan': 'SN',\r\n            'Sulawesi Tengah': 'ST',\r\n            'Sulawesi Utara': 'SA',\r\n            'Sulawesi Tenggara': 'SG',\r\n            'Maluku': 'MA',\r\n            'Maluku Utara': 'MU',\r\n            'Gorontalo': 'GO',\r\n        },\r\n        'MY': {\r\n            'Johor': 'JHR',\r\n            'Kedah': 'KDH',\r\n            'Kelantan': 'KTN',\r\n            'Melaka': 'MLK',\r\n            'Negeri Sembilan': 'NSN',\r\n            'Pahang': 'PHG',\r\n            'Pulau Pinang': 'PNG',\r\n            'Perak': 'PRK',\r\n            'Perlis': 'PLS',\r\n            'Selangor': 'SGR',\r\n            'Terengganu': 'TRG',\r\n            'Sabah': 'SBH',\r\n            'Sarawak': 'SRW',\r\n            'Kuala Lumpur': 'KUL',\r\n            'Labuan': 'LBN',\r\n            'Putrajaya': 'PJY',\r\n        },\r\n        'IE': {\r\n            'Carlow': 'CW',\r\n            'Cavan': 'CN',\r\n            'Clare': 'CE',\r\n            'Donegal': 'DL',\r\n            'Dublin': 'D',\r\n            'Galway': 'G',\r\n            'Kildare': 'KE',\r\n            'Kilkenny': 'KK',\r\n            'Laois': 'LS',\r\n            'Leitrim': 'LM',\r\n            'Longford': 'LD',\r\n            'Louth': 'LH',\r\n            'Mayo': 'MO',\r\n            'Meath': 'MH',\r\n            'Monaghan': 'MN',\r\n            'Offaly': 'OY',\r\n            'Roscommon': 'RN',\r\n            'Sligo': 'SO',\r\n            'Tipperary': 'TA',\r\n            'Waterford': 'WD',\r\n            'Westmeath': 'WH',\r\n            'Wexford': 'WX',\r\n            'Wicklow': 'WW',\r\n        },\r\n        'ES': {\r\n            'C': 'ACOR',\r\n            'VI': 'ALAV',\r\n            'AB': 'ALBA',\r\n            'A': 'ALIC',\r\n            'AL': 'ALME',\r\n            'O': 'ASTU',\r\n            'AV': 'AVIL',\r\n            'BA': 'BADA',\r\n            'PM': 'BALE',\r\n            'B': 'BARC',\r\n            'BU': 'BURG',\r\n            'CC': 'CACE',\r\n            'CA': 'CADI',\r\n            'S': 'CANT',\r\n            'CS': 'CAST',\r\n            'CE': 'CEUT',\r\n            'CR': 'CIUD',\r\n            'CO': 'CORD',\r\n            'CU': 'CUEN',\r\n            'GI': 'GIRO',\r\n            'GR': 'GRAN',\r\n            'GU': 'GUAD',\r\n            'SS': 'GUIP',\r\n            'H': 'HUEL',\r\n            'HU': 'HUES',\r\n            'J': 'JAEN',\r\n            'LO': 'LAR',\r\n            'GC': 'LAS',\r\n            'LE': 'LEON',\r\n            'L': 'LLEI',\r\n            'LU': 'LUGO',\r\n            'M': 'MADR',\r\n            'MA': 'MALA',\r\n            'ML': 'MELI',\r\n            'MU': 'MURC',\r\n            'NA': 'NAVA',\r\n            'OR': 'OURE',\r\n            'P': 'PALE',\r\n            'PO': 'PONT',\r\n            'SA': 'SALA',\r\n            'TF': 'SANT',\r\n            'SG': 'SEGO',\r\n            'SE': 'SEVI',\r\n            'SO': 'SORI',\r\n            'T': 'TARR',\r\n            'TE': 'TERU',\r\n            'TP': 'TOLE',\r\n            'V': 'VALE',\r\n            'VA': 'VALL',\r\n            'BI': 'VIZC',\r\n            'ZA': 'ZAMO',\r\n            'Z': 'ZARA',\r\n        },\r\n        'JP': {\r\n            'Aichi': '23',\r\n            'Akita': '05',\r\n            'Aomori': '02',\r\n            'Chiba': '12',\r\n            'Ehime': '38',\r\n            'Fukui': '18',\r\n            'Fukuoka': '40',\r\n            'Fukushima': '07',\r\n            'Gifu': '21',\r\n            'Gunma': '10',\r\n            'Hiroshima': '34',\r\n            'Hokkaido': '01',\r\n            'Hyogo': '28',\r\n            'Ibaraki': '08',\r\n            'Ishikawa': '17',\r\n            'Iwate': '03',\r\n            'Kagawa': '37',\r\n            'Kagoshima': '46',\r\n            'Kanagawa': '14',\r\n            'Kochi': '39',\r\n            'Kumamoto': '43',\r\n            'Kyoto': '26',\r\n            'Mie': '24',\r\n            'Miyagi': '04',\r\n            'Miyazaki': '45',\r\n            'Nagano': '20',\r\n            'Nagasaki': '42',\r\n            'Nara': '29',\r\n            'Niigata': '15',\r\n            'Oita': '44',\r\n            'Okayama': '33',\r\n            'Okinawa': '47',\r\n            'Osaka': '27',\r\n            'Saga': '41',\r\n            'Saitama': '11',\r\n            'Shiga': '25',\r\n            'Shimane': '32',\r\n            'Shizuoka': '22',\r\n            'Tochigi': '09',\r\n            'Tokushima': '36',\r\n            'Tokyo': '13',\r\n            'Tottori': '31',\r\n            'Toyama': '16',\r\n            'Wakayama': '30',\r\n            'Yamagata': '06',\r\n            'Yamaguchi': '35',\r\n            'Yamanashi': '19'\r\n        },\r\n    };\r\n\r\n    if (countries[country]) {\r\n        return countries[country][state] ?? getStripeState(countries[country], state);\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\r\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\r\n}\r\n","import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n    StripeShippingEvent\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { memoizeOne } from '@bigcommerce/memoize';\r\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\r\n\r\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\r\n\r\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\r\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\r\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\r\nimport { SingleShippingFormValues } from '../SingleShippingForm';\r\n\r\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\r\nimport StripeStateMapper from './StripeStateMapper';\r\n\r\nexport interface StripeShippingAddressProps {\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    shippingAddress?: Address;\r\n    step: CheckoutStepStatus;\r\n    isShippingMethodLoading: boolean;\r\n    shouldDisableSubmit: boolean;\r\n    isStripeLoading?(): void;\r\n    isStripeAutoStep?(): void;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onAddressSelect(address: Address): void;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n}\r\n\r\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\r\n    const {\r\n        countries,\r\n        consignments,\r\n        onAddressSelect,\r\n        initialize,\r\n        deinitialize,\r\n        shouldDisableSubmit,\r\n        onSubmit,\r\n        step,\r\n        isStripeLoading,\r\n        isStripeAutoStep,\r\n        isShippingMethodLoading,\r\n        shippingAddress,\r\n    } = props;\r\n\r\n    const [isNewAddress, setIsNewAddress] = useState(true);\r\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\r\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        company: '',\r\n        address1: '',\r\n        address2: '',\r\n        city: '',\r\n        stateOrProvince: '',\r\n        stateOrProvinceCode: '',\r\n        shouldSaveAddress: true,\r\n        country: '',\r\n        countryCode: '',\r\n        postalCode: '',\r\n        phone: '',\r\n        customFields: [],\r\n    });\r\n\r\n    const handleLoading = useCallback(() => {\r\n        if (isStripeLoading) {\r\n            isStripeLoading();\r\n        }\r\n    }, [isStripeLoading]);\r\n\r\n    useEffect(() => {\r\n        if (consignments[0]) {\r\n            const {availableShippingOptions} = consignments[0];\r\n\r\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\r\n                handleLoading();\r\n            }\r\n        }\r\n    }, [consignments]);\r\n\r\n    useEffect(() => {\r\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\r\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\r\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\r\n\r\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\r\n            isStripeLoading();\r\n            isStripeAutoStep();\r\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\r\n        }\r\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\r\n\r\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\r\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\r\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\r\n        const stepCompleted = step.isComplete;\r\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\r\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\r\n\r\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\r\n    };\r\n\r\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\r\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\r\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\r\n\r\n        if (complete) {\r\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\r\n                handleLoading();\r\n            }\r\n\r\n            const names = name?.split(' ');\r\n\r\n            // @ts-ignore\r\n            const country = availableShippingList?.find(country => country.code === address.country).name;\r\n            const state = StripeStateMapper(address.country, address.state);\r\n            const shippingValue = {\r\n                firstName: firstName || names[0],\r\n                lastName: lastName || names[1],\r\n                company: '',\r\n                address1: address.line1,\r\n                address2: address.line2 || '',\r\n                city: address.city,\r\n                stateOrProvince: state,\r\n                stateOrProvinceCode: state,\r\n                shouldSaveAddress: true,\r\n                country: country || address.country,\r\n                countryCode: address.country,\r\n                postalCode: address.postal_code,\r\n                phone: phone || '',\r\n                customFields: [],\r\n            };\r\n\r\n            if (!step.isComplete) {\r\n                setIsFirstShippingRender(current => !current);\r\n            }\r\n\r\n            onAddressSelect(shippingValue);\r\n            setStripeShippingAddress(shippingValue);\r\n\r\n            if (shipping.isNewAddress !== isNewAddress) {\r\n                setIsNewAddress(current => !current);\r\n            }\r\n        } else {\r\n            handleLoading();\r\n        }\r\n\r\n    }, [availableShippingList, onAddressSelect]);\r\n\r\n    const initializeShipping = useCallback(\r\n        memoizeOne(\r\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\r\n                initialize({\r\n                    ...defaultOptions,\r\n                    ...options,\r\n                }),\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const getStylesFromElement = (\r\n        id: string,\r\n        properties: string[]) => {\r\n        const parentContainer = document.getElementById(id);\r\n\r\n        if (parentContainer) {\r\n            return getAppliedStyles(parentContainer, properties);\r\n        }\r\n\r\n        return undefined;\r\n    };\r\n\r\n    const getStripeStyles: any = useCallback( () => {\r\n        const containerId = 'stripe-card-component-field';\r\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\r\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\r\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\r\n\r\n        return formLabel && formInput && formError ? {\r\n            labelText: formLabel.color,\r\n            fieldText: formInput.color,\r\n            fieldPlaceholderText: formInput.color,\r\n            fieldErrorText: formError.color,\r\n            fieldBackground: formInput['background-color'],\r\n            fieldInnerShadow: formInput['box-shadow'],\r\n            fieldBorder: formInput['border-color'],\r\n        } : undefined;\r\n    }, [])\r\n\r\n        const options: ShippingInitializeOptions = {\r\n            stripeupe: {\r\n                container: 'StripeUpeShipping',\r\n                onChangeShipping: handleStripeShippingAddress,\r\n                availableCountries: allowedCountries,\r\n                getStyles: getStripeStyles,\r\n                getStripeState: StripeStateMapper,\r\n                gatewayId: 'stripeupe',\r\n                methodId: 'card',\r\n            },\r\n        };\r\n\r\n        const renderCheckoutThemeStylesForStripeUPE = () => {\r\n            const containerId = 'stripe-card-component-field';\r\n\r\n            return (\r\n                <div\r\n                    className=\"optimizedCheckout-form-input\"\r\n                    id={ `${containerId}--input` }\r\n                    placeholder=\"1111\"\r\n                >\r\n                    <div\r\n                        className=\"form-field--error\"\r\n                    >\r\n                        <div\r\n                            className=\"optimizedCheckout-form-label\"\r\n                            id={ `${containerId}--error` }\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        className=\"optimizedCheckout-form-label\"\r\n                        id={ `${containerId}--label` }\r\n                    />\r\n                </div>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <StripeShippingAddressDisplay\r\n                    deinitialize={ deinitialize }\r\n                    initialize={ initializeShipping(options) }\r\n                    methodId=\"stripeupe\"\r\n                />\r\n                { renderCheckoutThemeStylesForStripeUPE() }\r\n            </>\r\n        );\r\n};\r\n\r\nexport default memo(StripeShippingAddress);\r\n","import {\r\n    Address,\r\n    CheckoutParams,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    FormField,\r\n    RequestOptions,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\nimport { lazy, object } from 'yup';\r\n\r\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\nimport { FormContext } from '@bigcommerce/checkout/ui';\r\n\r\nimport {\r\n    AddressFormValues,\r\n    getAddressFormFieldsValidationSchema,\r\n    getTranslateAddressError,\r\n    mapAddressToFormValues,\r\n} from '../../address';\r\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\r\nimport { withFormikExtended } from '../../common/form';\r\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\r\nimport { Fieldset, Form } from '../../ui/form';\r\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\r\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\r\nimport ShippingFormFooter from '../ShippingFormFooter';\r\n\r\nimport StripeShippingAddress from './StripeShippingAddress';\r\n\r\nexport interface SingleShippingFormProps {\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    customerMessage: string;\r\n    isLoading: boolean;\r\n    isShippingMethodLoading: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowOrderComments: boolean;\r\n    step: CheckoutStepStatus;\r\n    isInitialValueLoaded: boolean;\r\n    isStripeLoading?(): void;\r\n    isStripeAutoStep?(): void;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError?(error: Error): void;\r\n    updateAddress(\r\n        address: Partial<Address>,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): Promise<CheckoutSelectors>;\r\n}\r\n\r\nexport interface SingleShippingFormValues {\r\n    billingSameAsShipping: boolean;\r\n    shippingAddress?: AddressFormValues;\r\n    orderComment: string;\r\n}\r\n\r\ninterface SingleShippingFormState {\r\n    isUpdatingShippingData: boolean;\r\n}\r\n\r\nclass StripeShippingForm extends PureComponent<\r\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\r\n    > {\r\n    static contextType = FormContext;\r\n\r\n    state: SingleShippingFormState = {\r\n        isUpdatingShippingData: false,\r\n    };\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            cartHasChanged,\r\n            isInitialValueLoaded,\r\n            isLoading,\r\n            countries,\r\n            isStripeLoading,\r\n            shippingAddress,\r\n            consignments,\r\n            shouldShowOrderComments,\r\n            initialize,\r\n            isValid,\r\n            deinitialize,\r\n            onSubmit,\r\n            isStripeAutoStep,\r\n            step,\r\n            isShippingMethodLoading,\r\n        } = this.props;\r\n\r\n        const { isUpdatingShippingData } = this.state;\r\n\r\n        return (\r\n            <Form autoComplete=\"on\">\r\n                <Fieldset>\r\n                    <StripeShippingAddress\r\n                        consignments={consignments}\r\n                        countries={countries}\r\n                        deinitialize={deinitialize}\r\n                        initialize={initialize}\r\n                        isShippingMethodLoading={isShippingMethodLoading}\r\n                        isStripeAutoStep={isStripeAutoStep}\r\n                        isStripeLoading={isStripeLoading}\r\n                        onAddressSelect={this.handleAddressSelect}\r\n                        onSubmit={onSubmit}\r\n                        shippingAddress={shippingAddress}\r\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                        step={step}\r\n                    />\r\n                    <div className=\"form-body\">\r\n                        <BillingSameAsShippingField />\r\n                    </div>\r\n                </Fieldset>\r\n\r\n                <ShippingFormFooter\r\n                    cartHasChanged={cartHasChanged}\r\n                    isInitialValueLoaded={isInitialValueLoaded}\r\n                    isLoading={isLoading || isUpdatingShippingData}\r\n                    isMultiShippingMode={false}\r\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                    shouldShowOrderComments={shouldShowOrderComments}\r\n                    shouldShowShippingOptions={isValid}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private shouldDisableSubmit: () => boolean = () => {\r\n        const { isLoading, consignments, isValid } = this.props;\r\n\r\n        const { isUpdatingShippingData } = this.state;\r\n\r\n        if (!isValid) {\r\n            return false;\r\n        }\r\n\r\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\r\n    };\r\n\r\n    private handleAddressSelect: (address: Address) => void = async (address) => {\r\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\r\n\r\n        try {\r\n            await updateAddress(address);\r\n\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address.countryCode),\r\n                    address,\r\n                ),\r\n            });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    };\r\n\r\n    private getFields(countryCode: string | undefined): FormField[] {\r\n        const { getFields } = this.props;\r\n\r\n        return getFields(countryCode);\r\n    }\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({\r\n                               getFields,\r\n                               shippingAddress,\r\n                               isBillingSameAsShipping,\r\n                               customerMessage,\r\n                           }) => ({\r\n            billingSameAsShipping: isBillingSameAsShipping,\r\n            orderComment: customerMessage,\r\n            shippingAddress: mapAddressToFormValues(\r\n                getFields(shippingAddress && shippingAddress.countryCode),\r\n                shippingAddress,\r\n            ),\r\n        }),\r\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\r\n            !!shippingAddress &&\r\n            getAddressFormFieldsValidationSchema({\r\n                language,\r\n                formFields: getFields(shippingAddress.countryCode),\r\n            }).isValidSync(shippingAddress),\r\n        validationSchema: ({\r\n                               language,\r\n                               getFields,\r\n                               methodId,\r\n                           }: SingleShippingFormProps & WithLanguageProps) =>\r\n            methodId\r\n                ? object({\r\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                        getCustomFormFieldsValidationSchema({\r\n                            translate: getTranslateAddressError(language),\r\n                            formFields: getFields(formValues && formValues.countryCode),\r\n                        }),\r\n                    ),\r\n                })\r\n                : object({\r\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                        getAddressFormFieldsValidationSchema({\r\n                            language,\r\n                            formFields: getFields(formValues && formValues.countryCode),\r\n                        }),\r\n                    ),\r\n                }),\r\n        enableReinitialize: false,\r\n    })(StripeShippingForm),\r\n);\r\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\r\nimport ShippingHeader from '../ShippingHeader';\r\n\r\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\r\n\r\nexport interface StripeShippingProps {\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    isNewMultiShippingUIEnabled: boolean;\r\n    step: CheckoutStepStatus;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    isGuest: boolean;\r\n    isInitializing: boolean;\r\n    isInitialValueLoaded: boolean;\r\n    isLoading: boolean;\r\n    isShippingMethodLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowMultiShipping: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n    onMultiShippingChange(): void;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\r\n    loadShippingOptions(): Promise<CheckoutSelectors>;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    getFields(countryCode?: string): FormField[];\r\n}\r\n\r\ninterface StripeShippingState {\r\n    isStripeLoading: boolean;\r\n    isStripeAutoStep: boolean;\r\n}\r\n\r\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\r\n    constructor(props: StripeShippingProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isStripeLoading: true,\r\n            isStripeAutoStep: false,\r\n        };\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            isBillingSameAsShipping,\r\n            isGuest,\r\n            shouldShowMultiShipping,\r\n            customer,\r\n            updateAddress,\r\n            initialize,\r\n            deinitialize,\r\n            isMultiShippingMode,\r\n            isNewMultiShippingUIEnabled,\r\n            step,\r\n            onSubmit,\r\n            onMultiShippingChange,\r\n            isLoading,\r\n            isShippingMethodLoading,\r\n            ...shippingFormProps\r\n        } = this.props;\r\n\r\n        const {\r\n            isStripeLoading,\r\n            isStripeAutoStep,\r\n        } = this.state;\r\n\r\n        return <>\r\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\r\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\r\n                <ShippingHeader\r\n                    isGuest={isGuest}\r\n                    isMultiShippingMode={isMultiShippingMode}\r\n                    isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\r\n                    onMultiShippingChange={onMultiShippingChange}\r\n                    shouldShowMultiShipping={shouldShowMultiShipping}\r\n                />\r\n                <StripeShippingForm\r\n                    {...shippingFormProps}\r\n                    deinitialize={deinitialize}\r\n                    initialize={initialize}\r\n                    isBillingSameAsShipping={isBillingSameAsShipping}\r\n                    isLoading={isLoading}\r\n                    isMultiShippingMode={isMultiShippingMode}\r\n                    isShippingMethodLoading={isShippingMethodLoading}\r\n                    isStripeAutoStep={this.handleIsAutoStep}\r\n                    isStripeLoading={this.stripeLoadedCallback}\r\n                    onSubmit={onSubmit}\r\n                    step={step}\r\n                    updateAddress={updateAddress}\r\n                />\r\n            </div>\r\n        </>;\r\n    }\r\n\r\n    private stripeLoadedCallback: () => void = () => {\r\n        this.setState({ isStripeLoading: false });\r\n    }\r\n\r\n    private handleIsAutoStep: () => void = () => {\r\n        this.setState({ isStripeAutoStep: true });\r\n    }\r\n}\r\n\r\nexport default StripeShipping;\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    Cart,\r\n    CheckoutRequestBody,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    ConsignmentAssignmentRequestBody,\r\n    Country,\r\n    Customer,\r\n    CustomerRequestOptions,\r\n    FormField,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\nimport { createSelector } from 'reselect';\r\n\r\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\r\nimport { AddressFormSkeleton, ConfirmationModal } from '@bigcommerce/checkout/ui';\r\n\r\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\r\nimport { withCheckout } from '../checkout';\r\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\r\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from '../common/utility';\r\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\r\nimport { PaymentMethodId } from '../payment/paymentMethod';\r\n\r\nimport { UnassignItemError } from './errors';\r\nimport getShippableItemsCount from './getShippableItemsCount';\r\nimport getShippingMethodId from './getShippingMethodId';\r\nimport hasPromotionalItems from './hasPromotionalItems';\r\nimport { MultiShippingFormValues } from './MultiShippingForm';\r\nimport ShippingForm from './ShippingForm';\r\nimport ShippingHeader from './ShippingHeader';\r\nimport { SingleShippingFormValues } from './SingleShippingForm';\r\nimport StripeShipping from './stripeUPE/StripeShipping';\r\n\r\nexport interface ShippingProps {\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    step: CheckoutStepStatus;\r\n    onCreateAccount(): void;\r\n    onToggleMultiShipping(): void;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n    onSignIn(): void;\r\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\r\n}\r\n\r\nexport interface WithCheckoutShippingProps {\r\n    billingAddress?: Address;\r\n    cart: Cart;\r\n    cartHasPromotionalItems: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isGuest: boolean;\r\n    isInitializing: boolean;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowMultiShipping: boolean;\r\n    isNewMultiShippingUIEnabled: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    shouldRenderWhileLoading: boolean;\r\n    providerWithCustomCheckout?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    validateGoogleMapAutoCompleteMaxLength: boolean;\r\n    validateAddressFields: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\r\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\r\n    loadShippingOptions(): Promise<CheckoutSelectors>;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\r\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\r\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    shouldRenderStripeForm: boolean;\r\n}\r\n\r\ninterface ShippingState {\r\n    isInitializing: boolean;\r\n    isMultiShippingUnavailableModalOpen: boolean;\r\n}\r\n\r\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\r\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isInitializing: true,\r\n            isMultiShippingUnavailableModalOpen: false,\r\n        };\r\n    }\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            loadShippingAddressFields,\r\n            loadBillingAddressFields,\r\n            loadShippingOptions,\r\n            onReady = noop,\r\n            onUnhandledError = noop,\r\n            cartHasPromotionalItems,\r\n            isMultiShippingMode,\r\n            isNewMultiShippingUIEnabled,\r\n        } = this.props;\r\n\r\n        try {\r\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\r\n\r\n            if(cartHasPromotionalItems && isMultiShippingMode && isNewMultiShippingUIEnabled) {\r\n                this.setState({ isMultiShippingUnavailableModalOpen: true });\r\n            }\r\n\r\n            onReady();\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        } finally {\r\n            this.setState({ isInitializing: false });\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            isBillingSameAsShipping,\r\n            isGuest,\r\n            shouldShowMultiShipping,\r\n            isNewMultiShippingUIEnabled,\r\n            validateGoogleMapAutoCompleteMaxLength,\r\n            validateAddressFields,\r\n            customer,\r\n            updateShippingAddress,\r\n            initializeShippingMethod,\r\n            deinitializeShippingMethod,\r\n            isMultiShippingMode,\r\n            step,\r\n            isFloatingLabelEnabled,\r\n            shouldRenderStripeForm,\r\n            shouldRenderWhileLoading,\r\n            cartHasPromotionalItems,\r\n            ...shippingFormProps\r\n        } = this.props;\r\n\r\n        const {\r\n            isInitializing,\r\n            isMultiShippingUnavailableModalOpen,\r\n        } = this.state;\r\n\r\n        const handleSwitchToSingleShipping = async () => {\r\n            this.setState({ isMultiShippingUnavailableModalOpen: false });\r\n            await this.handleMultiShippingModeSwitch();\r\n        }\r\n\r\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\r\n            return <StripeShipping\r\n                { ...shippingFormProps }\r\n                customer={ customer }\r\n                deinitialize={deinitializeShippingMethod}\r\n                initialize={initializeShippingMethod}\r\n                isBillingSameAsShipping={isBillingSameAsShipping}\r\n                isGuest={ isGuest }\r\n                isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\r\n                isLoading={ isInitializing }\r\n                isMultiShippingMode={isMultiShippingMode}\r\n                isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\r\n                isShippingMethodLoading={ this.props.isLoading }\r\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\r\n                onSubmit={this.handleSingleShippingSubmit}\r\n                shouldShowMultiShipping={ shouldShowMultiShipping }\r\n                step={step}\r\n                updateAddress={updateShippingAddress}\r\n            />;\r\n        }\r\n\r\n        return (\r\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\r\n                <div className=\"checkout-form\">\r\n                    <ConfirmationModal \r\n                        action={handleSwitchToSingleShipping}\r\n                        actionButtonLabel={<TranslatedString id=\"common.ok_action\" />}\r\n                        headerId=\"shipping.multishipping_unavailable_action\"\r\n                        isModalOpen={isMultiShippingUnavailableModalOpen}\r\n                        messageId=\"shipping.checkout_switched_to_single_shipping\"\r\n                        shouldShowCloseButton={false}\r\n                    />\r\n                    <ShippingHeader\r\n                        cartHasPromotionalItems={cartHasPromotionalItems}\r\n                        isGuest={isGuest}\r\n                        isMultiShippingMode={isMultiShippingMode}\r\n                        isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\r\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\r\n                        shouldShowMultiShipping={shouldShowMultiShipping}\r\n                    />\r\n                    <ShippingForm\r\n                        {...shippingFormProps}\r\n                        addresses={customer.addresses}\r\n                        deinitialize={deinitializeShippingMethod}\r\n                        initialize={initializeShippingMethod}\r\n                        isBillingSameAsShipping={isBillingSameAsShipping}\r\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                        isGuest={isGuest}\r\n                        isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\r\n                        isMultiShippingMode={isMultiShippingMode}\r\n                        isNewMultiShippingUIEnabled={isNewMultiShippingUIEnabled}\r\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\r\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\r\n                        onUseNewAddress={this.handleUseNewAddress}\r\n                        shouldShowSaveAddress={!isGuest}\r\n                        updateAddress={updateShippingAddress}\r\n                        validateAddressFields={validateAddressFields}\r\n                        validateGoogleMapAutoCompleteMaxLength={validateGoogleMapAutoCompleteMaxLength}\r\n                    />\r\n                </div>\r\n            </AddressFormSkeleton>\r\n        );\r\n    }\r\n\r\n    private handleMultiShippingModeSwitch: () => void = async () => {\r\n        const {\r\n            consignments,\r\n            isMultiShippingMode,\r\n            isNewMultiShippingUIEnabled,\r\n            onToggleMultiShipping = noop,\r\n            onUnhandledError = noop,\r\n            updateShippingAddress,\r\n            deleteConsignments,\r\n        } = this.props;\r\n\r\n        try {\r\n            this.setState({ isInitializing: true });\r\n\r\n            if (isNewMultiShippingUIEnabled) {\r\n                if (isMultiShippingMode && consignments.length) {\r\n                    // Collapse all consignments into one\r\n                    await updateShippingAddress(consignments[0].shippingAddress);\r\n                }\r\n                else {\r\n                    await deleteConsignments();\r\n                }\r\n            }\r\n            else if (isMultiShippingMode && consignments.length > 1) {\r\n                // Collapse all consignments into one\r\n                await updateShippingAddress(consignments[0].shippingAddress);\r\n            }\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        } finally {\r\n            this.setState({ isInitializing: false });\r\n        }\r\n\r\n        onToggleMultiShipping();\r\n    };\r\n\r\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\r\n        billingSameAsShipping,\r\n        shippingAddress: addressValues,\r\n        orderComment,\r\n    }) => {\r\n        const {\r\n            customerMessage,\r\n            updateCheckout,\r\n            updateShippingAddress,\r\n            updateBillingAddress,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n            shippingAddress,\r\n            billingAddress,\r\n            methodId,\r\n        } = this.props;\r\n\r\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\r\n        const promises: Array<Promise<CheckoutSelectors>> = [];\r\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\r\n\r\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\r\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\r\n        }\r\n\r\n        if (\r\n            billingSameAsShipping &&\r\n            updatedShippingAddress &&\r\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\r\n            !hasRemoteBilling\r\n        ) {\r\n            promises.push(updateBillingAddress(updatedShippingAddress));\r\n        }\r\n\r\n        if (customerMessage !== orderComment) {\r\n            promises.push(updateCheckout({ customerMessage: orderComment }));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            navigateNextStep(billingSameAsShipping);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\r\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\r\n\r\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\r\n    };\r\n\r\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\r\n        address,\r\n        itemId,\r\n    ) => {\r\n        const { unassignItem, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            await unassignItem({\r\n                address,\r\n                lineItems: [\r\n                    {\r\n                        quantity: 1,\r\n                        itemId,\r\n                    },\r\n                ],\r\n            });\r\n\r\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\r\n        } catch (error) {\r\n            if (error instanceof UnassignItemError) {\r\n                onUnhandledError(new UnassignItemError(error));\r\n            }\r\n        }\r\n    };\r\n\r\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\r\n        orderComment,\r\n    }) => {\r\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            if (customerMessage !== orderComment) {\r\n                await updateCheckout({ customerMessage: orderComment });\r\n            }\r\n\r\n            navigateNextStep(false);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nconst deleteConsignmentsSelector = createSelector(\r\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\r\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\r\n    (deleteConsignment, consignments) => async () => {\r\n        if (!consignments || !consignments.length) {\r\n            return;\r\n        }\r\n\r\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\r\n\r\n        return data.getShippingAddress();\r\n    },\r\n);\r\n\r\n// tslint:disable-next-line:cyclomatic-complexity\r\nexport function mapToShippingProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\r\n    const {\r\n        data: {\r\n            getCart,\r\n            getCheckout,\r\n            getConfig,\r\n            getCustomer,\r\n            getConsignments,\r\n            getShippingAddress,\r\n            getBillingAddress,\r\n            getShippingAddressFields,\r\n            getShippingCountries,\r\n        },\r\n        statuses: {\r\n            isShippingStepPending,\r\n            isSelectingShippingOption,\r\n            isLoadingShippingOptions,\r\n            isUpdatingConsignment,\r\n            isCreatingConsignments,\r\n            isCreatingCustomerAddress,\r\n            isLoadingShippingCountries,\r\n            isUpdatingBillingAddress,\r\n            isUpdatingCheckout,\r\n            isDeletingConsignment,\r\n        },\r\n    } = checkoutState;\r\n\r\n    const checkout = getCheckout();\r\n    const config = getConfig();\r\n    const consignments = getConsignments() || [];\r\n    const customer = getCustomer();\r\n    const cart = getCart();\r\n\r\n    if (!checkout || !config || !customer || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        checkoutSettings: {\r\n            enableOrderComments,\r\n            features,\r\n            hasMultiShippingEnabled,\r\n            googleMapsApiKey,\r\n        },\r\n    } = config;\r\n\r\n    const methodId = getShippingMethodId(checkout, config);\r\n    const isLoading =\r\n        isLoadingShippingOptions() ||\r\n        isSelectingShippingOption() ||\r\n        isUpdatingConsignment() ||\r\n        isCreatingConsignments() ||\r\n        isUpdatingBillingAddress() ||\r\n        isUpdatingCheckout() ||\r\n        isCreatingCustomerAddress() ||\r\n        isDeletingConsignment();\r\n\r\n    const isNewMultiShippingUIEnabled =\r\n        isExperimentEnabled(\r\n            config.checkoutSettings,\r\n            'PROJECT-4159.improve_multi_address_shipping_ui',\r\n        );\r\n    const shippableItemsCount = getShippableItemsCount(cart, isNewMultiShippingUIEnabled);\r\n    const shouldShowMultiShipping =\r\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\r\n\r\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\r\n\r\n    const validateGoogleMapAutoCompleteMaxLength =\r\n        isExperimentEnabled(\r\n            config.checkoutSettings,\r\n            'CHECKOUT-8776.google_autocomplete_max_length_validation',\r\n        ) && Boolean(googleMapsApiKey);\r\n\r\n    const validateAddressFields =\r\n        isExperimentEnabled(\r\n            config.checkoutSettings,\r\n            'CHECKOUT-7560.address_fields_max_length_validation',\r\n        );\r\n\r\n    const shippingAddress =\r\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\r\n\r\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\r\n        config.checkoutSettings.providerWithCustomCheckout,\r\n    );\r\n\r\n    return {\r\n        assignItem: checkoutService.assignItemsToAddress,\r\n        billingAddress: getBillingAddress(),\r\n        cart,\r\n        cartHasPromotionalItems: hasPromotionalItems(cart),\r\n        consignments,\r\n        countries: getShippingCountries() || EMPTY_ARRAY,\r\n        countriesWithAutocomplete,\r\n        customer,\r\n        customerMessage: checkout.customerMessage,\r\n        createCustomerAddress: checkoutService.createCustomerAddress,\r\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\r\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\r\n        getFields: getShippingAddressFields,\r\n        googleMapsApiKey,\r\n        initializeShippingMethod: checkoutService.initializeShipping,\r\n        isGuest: customer.isGuest,\r\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\r\n        isLoading,\r\n        isShippingStepPending: isShippingStepPending(),\r\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\r\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\r\n        loadShippingOptions: checkoutService.loadShippingOptions,\r\n        methodId,\r\n        providerWithCustomCheckout,\r\n        shippingAddress,\r\n        shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\r\n        shouldShowMultiShipping,\r\n        isNewMultiShippingUIEnabled,\r\n        validateGoogleMapAutoCompleteMaxLength,\r\n        validateAddressFields,\r\n        shouldShowOrderComments: enableOrderComments,\r\n        signOut: checkoutService.signOutCustomer,\r\n        unassignItem: checkoutService.unassignItemsToAddress,\r\n        updateBillingAddress: checkoutService.updateBillingAddress,\r\n        updateCheckout: checkoutService.updateCheckout,\r\n        updateShippingAddress: checkoutService.updateShippingAddress,\r\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\r\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToShippingProps)(Shipping);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconChevronUp: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconChevronUp);\r\n","import classNames from 'classnames';\r\nimport React, { ButtonHTMLAttributes, FunctionComponent } from 'react';\r\n\r\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    isFullWidth?: boolean;\r\n    isLoading?: boolean;\r\n    size?: ButtonSize;\r\n    testId?: string;\r\n    variant?: ButtonVariant;\r\n}\r\n\r\nexport enum ButtonVariant {\r\n    Primary = 'primary',\r\n    Secondary = 'secondary',\r\n    Action = 'action',\r\n}\r\n\r\nexport enum ButtonSize {\r\n    Small = 'small',\r\n    Tiny = 'tiny',\r\n    Large = 'large',\r\n}\r\n\r\nfunction getClassName(\r\n    props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>,\r\n) {\r\n    const { className, isFullWidth, isLoading, size, variant } = props;\r\n\r\n    return classNames(\r\n        'button',\r\n        className,\r\n        { 'button--primary': variant === ButtonVariant.Primary },\r\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\r\n        { 'button--action': variant === ButtonVariant.Action },\r\n        { 'button--small': size === ButtonSize.Small },\r\n        { 'button--tiny': size === ButtonSize.Tiny },\r\n        { 'button--large': size === ButtonSize.Large },\r\n        { 'button--slab': isFullWidth },\r\n        {\r\n            'optimizedCheckout-buttonPrimary':\r\n                variant === ButtonVariant.Primary || variant === ButtonVariant.Action,\r\n        },\r\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\r\n        { 'is-loading': isLoading },\r\n    );\r\n}\r\n\r\nconst Button: FunctionComponent<ButtonProps> = ({\r\n    children,\r\n    className,\r\n    disabled,\r\n    isFullWidth,\r\n    isLoading,\r\n    size,\r\n    testId,\r\n    type,\r\n    variant,\r\n    ...rest\r\n}) => (\r\n    <button\r\n        {...rest}\r\n        className={getClassName({ className, isFullWidth, isLoading, size, variant })}\r\n        data-test={testId}\r\n        disabled={disabled || isLoading}\r\n        type={type || 'button'}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default Button;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconClose: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconClose);\r\n","import classNames from 'classnames';\r\nimport { noop } from 'lodash';\r\nimport React, { FunctionComponent, KeyboardEvent, MouseEvent, ReactNode, useCallback } from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport { Omit } from 'utility-types';\r\n\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\n\r\nimport { IconClose } from '../icon';\r\n\r\nexport type ModalProps = Omit<\r\n    ReactModal.Props,\r\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\r\n> & {\r\n    children: ReactNode;\r\n    closeButtonLabel?: string | ReactNode;\r\n    footer?: ReactNode;\r\n    header?: ReactNode;\r\n    additionalHeaderClassName?: string;\r\n    additionalBodyClassName?: string;\r\n    additionalModalClassName?: string;\r\n    shouldShowCloseButton?: boolean;\r\n};\r\n\r\nconst Modal: FunctionComponent<ModalProps> = ({\r\n    children,\r\n    closeButtonLabel = 'Close',\r\n    footer,\r\n    header,\r\n    additionalHeaderClassName,\r\n    additionalBodyClassName,\r\n    additionalModalClassName,\r\n    onRequestClose = noop,\r\n    shouldShowCloseButton = false,\r\n    ...rest\r\n}) => {\r\n    const handleClose = useCallback(\r\n        (event: MouseEvent | KeyboardEvent) => {\r\n            onRequestClose(event);\r\n        },\r\n        [onRequestClose],\r\n    );\r\n\r\n    return (\r\n        <ReactModal\r\n            {...rest}\r\n            ariaHideApp={process.env.NODE_ENV !== 'test'}\r\n            bodyOpenClassName=\"has-activeModal\"\r\n            className={{\r\n                base: classNames(\r\n                    'modal optimizedCheckout-contentPrimary',\r\n                    additionalModalClassName,\r\n                ),\r\n                afterOpen: 'modal--afterOpen',\r\n                beforeClose: 'modal--beforeClose',\r\n            }}\r\n            closeTimeoutMS={200}\r\n            onRequestClose={onRequestClose}\r\n            overlayClassName={{\r\n                base: 'modalOverlay',\r\n                afterOpen: 'modalOverlay--afterOpen',\r\n                beforeClose: 'modalOverlay--beforeClose',\r\n            }}\r\n            shouldCloseOnEsc={true}\r\n            shouldCloseOnOverlayClick={false}\r\n        >\r\n            <div className={classNames('modal-header', additionalHeaderClassName)}>\r\n                {header}\r\n\r\n                {shouldShowCloseButton && (\r\n                    <a\r\n                        className=\"modal-close\"\r\n                        data-test=\"modal-close-button\"\r\n                        href=\"#\"\r\n                        onClick={preventDefault(handleClose)}\r\n                    >\r\n                        {closeButtonLabel && <span className=\"is-srOnly\">{closeButtonLabel}</span>}\r\n\r\n                        <IconClose />\r\n                    </a>\r\n                )}\r\n            </div>\r\n\r\n            <div\r\n                className={classNames('modal-body', additionalBodyClassName)}\r\n                data-test=\"modal-body\"\r\n            >\r\n                {children}\r\n            </div>\r\n\r\n            {Boolean(footer) && (\r\n                <div className=\"modal-footer\" data-test=\"modal-footer\">\r\n                    {footer}\r\n                </div>\r\n            )}\r\n        </ReactModal>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\ninterface ModalHeaderProps {\r\n    children: React.ReactNode;\r\n    additionalClassName?: string;\r\n}\r\n\r\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({ children, additionalClassName }) => (\r\n    <h2\r\n        className={classNames(\r\n            'modal-header-title optimizedCheckout-headingSecondary',\r\n            additionalClassName,\r\n        )}\r\n        data-test=\"modal-heading\"\r\n    >\r\n        {children}\r\n    </h2>\r\n);\r\n\r\nexport default ModalHeader;\r\n","import { noop } from 'lodash';\r\nimport React, { ReactNode } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { Button, ButtonSize, ButtonVariant } from '../button';\r\n\r\nimport Modal from './Modal';\r\nimport ModalHeader from './ModalHeader';\r\n\r\ninterface ConfirmationModalProps {\r\n    headerId: string;\r\n    messageId: string;\r\n    isModalOpen: boolean;\r\n    onRequestClose?: () => void;\r\n    action: () => void;\r\n    actionButtonLabel?: ReactNode;\r\n    shouldShowCloseButton?: boolean;\r\n}\r\n\r\nconst ConfirmationModal = ({\r\n    headerId,\r\n    messageId,\r\n    isModalOpen,\r\n    action,\r\n    actionButtonLabel,\r\n    onRequestClose = noop,\r\n    shouldShowCloseButton = true,\r\n}: ConfirmationModalProps) => {\r\n    return (\r\n        <Modal\r\n            additionalModalClassName=\"modal--confirm\"\r\n            footer={\r\n                <Button onClick={action} size={ButtonSize.Small} variant={ButtonVariant.Primary}>\r\n                    {actionButtonLabel ?? <TranslatedString id=\"common.confirm_action\" />}\r\n                </Button>\r\n            }\r\n            header={\r\n                <ModalHeader>\r\n                    <span aria-live=\"assertive\" role=\"alert\">\r\n                        <TranslatedString id={headerId} />\r\n                    </span>\r\n                </ModalHeader>\r\n            }\r\n            isOpen={isModalOpen}\r\n            onRequestClose={onRequestClose}\r\n            shouldShowCloseButton={shouldShowCloseButton}\r\n        >\r\n            <p aria-live=\"assertive\" role=\"alert\">\r\n                <TranslatedString id={messageId} />\r\n            </p>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n"],"names":["mapAddressFromFormValues","formValues","customFields","address","shouldSaveAddress","mapCustomFormFieldsFromFormValues","isEqualAddress","address1","address2","isEqual","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","omit","filter","data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippableItemsCount","cart","isNewMultiShippingUIEnabled","getLineItemsCount","lineItems","physicalItems","item","addedByPromotion","parentId","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","AmazonPay","BraintreeAcceleratedCheckout","PayPalCommerceAcceleratedCheckout","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","payments","find","payment","isGiftCertificatePayment","isStoreCreditPayment","providerId","getPreselectedPayment","indexOf","undefined","hasPromotionalItems","digitalItems","length","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","field","types","create","autocompleteData","countryComponent","component","short_name","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","props","menuProps","items","map","key","id","content","stateReducer","state","changes","onChange","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","noop","render","inputProps","initialValue","initialHighlightedIndex","defaultHighlightedIndex","onSelect","listTestId","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","labelText","includes","Label","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","value","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","maxLength","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","language","default","Component","withLanguage","AddressForm","SaveAddressForm","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","validationSchema","getFields","getAddressFormFieldsValidationSchema","isLoading","onRequestClose","Form","LoadingOverlay","Button","onClick","variant","Secondary","disabled","Primary","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","withFormikExtended","OriginalComponent","DecoratedComponent","resetForm","isInitialValueLoaded","previousIsInitialValueLoadedRef","useRef","useEffect","displayName","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","consignment","lineItemIds","getShippableLineItems","isNil","concat","lineItemIndex","splitItems","quantity","variantId","productId","splitItem","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","getRootElement","addEventListener","removeEventListener","componentWillUnmount","placement","dropdown","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","getAddressContent","getConfig","getBillingAddressFields","getShippingAddressFields","validateAddressFields","isExperimentEnabled","AddressType","A","Billing","Shipping","isValidStaticAddress","selectedAddress","showSingleLineAddress","placeholderText","useState","ariaExpanded","setAriaExpanded","href","onBlur","preventDefault","StaticAddress","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","newAddress","PoweredByPayPalFastlaneLabel","imageUrl","options","handleUseNewAddress","handleSelectAddress","alt","src","optionName","nameId","shippingAddress","hidden","TextInput","legend","Legend","getRecommendedShippingOption","availableShippingOptions","createContext","onToggle","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","useContext","isSelected","transitionEndListener","done","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","defaultSelectedItemId","isDisabled","selectedItemId","setSelectedItemId","handleToggleItem","getContextValue","memoizeOne","newSelectedItemId","Provider","connectFormik","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","connect","ChecklistContext","handleSelect","contextValue","Input","checked","htmlId","kebabCase","rest","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","StaticShippingOption","displayAdditionalInformation","method","Extension","region","inputName","shippingOptions","onSelectedOption","selectDefaultShippingOptions","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticConsignmentItemList","withAnalytics","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","withCheckout","checkoutService","checkoutState","getCart","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Alert","ShippingOptions","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","newId","matchingCartItems","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","withIconContainer","height","viewBox","xmlns","d","AlertType","icon","Info","Success","Warning","renderDefaultIcon","setRecommendedOrMissingShippingOption","previousConsignment","currentConsignments","previousShippingOptions","Map","previousShippingOptionId","get","option","isRecommended","setConsignmentRequest","isOpenNewAddressModal","setIsOpenNewAddressModal","setCreateCustomerAddressError","getShippingCountries","getPreviousConsignments","updateConsignment","isFloatingLabelEnabledFlag","addressFormValues","handleShow","handleHide","tooltip","onFocus","onMouseEnter","onMouseLeave","ItemSplitTooltip","assignedItems","onUnassignItem","count","shippableItemsCount","hasSplitItems","toString","IconClose","isMobileView","min","formErrors","LineItemType","onAllocateItems","Object","keys","lineItemId","unassignedItems","createItemSchema","baseSchema","required","integer","max","Custom","oneOf","schemaObject","fromEntries","shape","validateOnBlur","validateOnChange","consignmentNumber","setValues","dirty","submitForm","errors","allocatedOrSelectedItemsMessage","leftItemsTotal","selectedItems","acc","Array","from","Set","hasItemsAssigned","hasUnassignedItems","modalFooter","footer","hasDigitalItems","generateHash","btoa","encodeURIComponent","calculateShippableItemsCount","total","hasSplitItem","itemHashMap","processedHashes","hash","has","add","mapConsignmentsItems","unassignedItemsMap","digitalItemsMap","consignmentList","set","Physical","sku","valueId","generateItemHash","customItems","Digital","consignmentLineItems","delete","unassignedItemsList","size","defaultMultiShippingConsignmentItems","useMultiShippingConsignmentItems","nonBundledLineItems","removeBundledItems","isOpenAllocateItemsModal","setIsOpenAllocateItemsModal","showItems","setShowItems","deleteItem","createConsignments","deleteConsignment","consignmentRequest","consignmentIdToBeDeleted","checkoutResponse","consignmentsReponse","useDeallocateItem","toggleAllocateItemsModal","itemsCount","itemToDelete","IconChevronUp","IconChevronDown","ConsignmentLineItemDetail","hideContentWhenLoading","unmountContentWhenLoading","display","forwardRef","MultiShippingOptionsListItemV2","ShopperCurrency","amount","cost","readOnly","MultiShippingOptionsV2","resetErrorConsignmentNumber","shippingQuoteFailedMessage","isLoadingOptions","shippingOptionId","Small","setIsAddShippingDestination","errorConsignmentNumber","setErrorConsignmentNumber","unassignedLineItems","isAddShippingDestination","isEveryConsignmentHasShippingOption","renderAllocatedBanner","errorConsignmentIndex","onSignIn","onCreateAccount","TranslatedLink","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","padding","Tiny","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","defaultOptions","editAddressButtonId","amazonpay","hasError","FormContext","Consumer","isSubmitted","prevField","isDate","getTime","InnerField","form","InnerFieldInput","getIn","prevForm","nextForm","nextField","renderInnerField","Field","errorId","renderMessage","ErrorMessage","renderField","appearFocused","withDate","inputDateFormat","inputFormat","handleDateChange","dateValue","target","DROPDOWM","optionValue","RADIO","CHECKBOX","isArray","DATE","calendarClassName","dateFormat","maxDate","Date","minDate","toUpperCase","popperClassName","selected","MULTILINE","PASSWORD","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","MultiCheckboxFormField","remove","handleSelectAll","checkedValues","difference","val","handleSelectNone","handleInputChange","renderProps","pick","FieldArray","secret","fieldLabel","fieldInputId","labelComponent","dynamicFormFieldType","NUMBER","TELEPHONE","TEXT","helperLabel","addressWithoutLocalization","paypalFastlaneShippingComponentRef","localizeAddress","localizedProvince","localizedCountry","showAddressSelector","onAddressSelect","fieldValue","formFieldName","handleAutocompleteToggle","formAddress","hasAddresses","hasValidCustomerAddress","some","customerAddress","isValidCustomerAddress","ShippingAddressForm","PayPalFastlaneShippingAddress","handleFieldChange","isLoadingStrategy","setIsLoadingStrategyStrategy","paypalFastlaneShippingComponent","fastlaneOptions","provider","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","initializationOptions","shouldShowPayPalFastlaneShippingForm","hasRequestedShippingOptions","setSubmitted","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","include","shippingAutosaveDelay","addressForm","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","validateGoogleMapAutoCompleteMaxLength","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","isGuest","onMultiShippingSubmit","onSingleShippingSubmit","signOut","onMultiShippingChange","shouldShowMultiShipping","cartHasPromotionalItems","isSingleShippingConfirmationModalOpen","setIsSingleShippingConfirmationModalOpen","isMultiShippingUnavailableModalOpen","setIsMultiShippingUnavailableModalOpen","showConfirmationModal","showMultiShippingUnavailableModal","ConfirmationModal","action","actionButtonLabel","headerId","isModalOpen","messageId","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","isValid","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","email","renderWhileLoading","deleteConsignmentsSelector","getShippingAddress","mapToShippingProps","getBillingAddress","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","isDeletingConsignment","enableOrderComments","features","hasMultiShippingEnabled","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","StripeUPE","shouldUseStripeLinkByMinimumAmount","ButtonVariant","ButtonSize","getClassName","isFullWidth","Action","Large","closeButtonLabel","additionalHeaderClassName","additionalBodyClassName","ariaHideApp","bodyOpenClassName","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnEsc","shouldCloseOnOverlayClick"],"sourceRoot":""}