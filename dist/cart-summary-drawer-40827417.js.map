{"version":3,"file":"cart-summary-drawer-40827417.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/cart/CartSummaryDrawer.tsx","webpack://checkout/./packages/core/src/app/order/getLineItemsCount.ts","webpack://checkout/./packages/ui/src/icon/IconCloseWithBorder.tsx","webpack://checkout/./packages/core/src/app/order/OrderModalSummarySubheader.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryModal.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryDrawer.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx"],"sourcesContent":["import React, { FunctionComponent, memo } from 'react';\r\n\r\nimport { withCheckout } from '../checkout';\r\nimport OrderSummaryDrawer from '../order/OrderSummaryDrawer';\r\n\r\nimport { WithCheckoutCartSummaryProps } from './CartSummary';\r\nimport EditLink from './EditLink';\r\nimport mapToCartSummaryProps from './mapToCartSummaryProps';\r\nimport withRedeemable from './withRedeemable';\r\n\r\nconst CartSummaryDrawer: FunctionComponent<\r\n    WithCheckoutCartSummaryProps & {\r\n        isMultiShippingMode: boolean;\r\n    }\r\n> = ({ cartUrl, isMultiShippingMode, isNewMultiShippingUIEnabled, ...props }) =>\r\n    withRedeemable(OrderSummaryDrawer)({\r\n        ...props,\r\n        cartUrl,\r\n        headerLink: (\r\n            <EditLink\r\n                className=\"modal-header-link cart-modal-link\"\r\n                isMultiShippingMode={isNewMultiShippingUIEnabled && isMultiShippingMode}\r\n                url={cartUrl}\r\n            />\r\n        ),\r\n        isNewMultiShippingUIEnabled,\r\n    });\r\n\r\nexport default withCheckout(mapToCartSummaryProps)(memo(CartSummaryDrawer));\r\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function getLineItemsCount({\r\n    physicalItems,\r\n    digitalItems,\r\n    giftCertificates,\r\n    customItems,\r\n}: LineItemMap): number {\r\n    return (\r\n        physicalItems.length +\r\n        digitalItems.length +\r\n        giftCertificates.length +\r\n        (customItems || []).length\r\n    );\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconCloseWithBorder: FunctionComponent = () => (\r\n    <svg fill=\"none\" height=\"37\" viewBox=\"0 0 38 37\" width=\"38\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n            d=\"M38 18.5C38 28.7173 29.7173 37 19.5 37C9.28273 37 1 28.7173 1 18.5C1 8.28273 9.28273 0 19.5 0C29.7173 0 38 8.28273 38 18.5Z\"\r\n            fill=\"#F3F3F3\"\r\n        />\r\n        <path\r\n            clipRule=\"evenodd\"\r\n            d=\"M24.6671 24.6674L12.9998 13.0002L14.4141 11.5859L26.0813 23.2532L24.6671 24.6674Z\"\r\n            fill=\"black\"\r\n            fillRule=\"evenodd\"\r\n        />\r\n        <path\r\n            clipRule=\"evenodd\"\r\n            d=\"M25.6674 13.0004L14.0002 24.6676L12.5859 23.2534L24.2532 11.5862L25.6674 13.0004Z\"\r\n            fill=\"black\"\r\n            fillRule=\"evenodd\"\r\n        />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconCloseWithBorder);\r\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport getItemsCount from './getItemsCount';\r\n\r\nexport interface OrderModalSummarySubheaderProps {\r\n    items: LineItemMap;\r\n}\r\n\r\nconst OrderModalSummarySubheader: FunctionComponent<OrderModalSummarySubheaderProps> = ({\r\n    items,\r\n}) => {\r\n    const itemsCount = getItemsCount(items);\r\n    const itemsText = itemsCount === 1 ? 'cart.item' : 'cart.items';\r\n\r\n    return <>\r\n        {itemsCount} <TranslatedString id={itemsText} />\r\n    </>;\r\n};\r\n\r\nexport default memo(OrderModalSummarySubheader);\r\n","import {\r\n    LineItemMap,\r\n    ShopperCurrency as ShopperCurrencyType,\r\n    StoreCurrency,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React, { cloneElement, FunctionComponent, isValidElement, ReactNode } from 'react';\r\n\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { Button, IconCloseWithBorder } from '@bigcommerce/checkout/ui';\r\n\r\n// import { ShopperCurrency } from '../currency';\r\nimport { Modal, ModalHeader } from '../ui/modal';\r\nimport { isSmallScreen } from '../ui/responsive';\r\n\r\nimport OrderModalSummarySubheader from './OrderModalSummarySubheader';\r\nimport OrderSummaryItems from './OrderSummaryItems';\r\n// import OrderSummaryPrice from './OrderSummaryPrice';\r\nimport OrderSummarySection from './OrderSummarySection';\r\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\r\n// import OrderSummaryTotal from './OrderSummaryTotal';\r\n\r\nexport interface OrderSummaryDrawerProps {\r\n    additionalLineItems?: ReactNode;\r\n    items: LineItemMap;\r\n    total: number;\r\n    storeCurrency: StoreCurrency;\r\n    shopperCurrency: ShopperCurrencyType;\r\n    isOpen: boolean;\r\n    headerLink?: ReactNode & React.HTMLProps<HTMLDivElement>;\r\n    onRequestClose?(): void;\r\n    onAfterOpen?(): void;\r\n}\r\n\r\nconst OrderSummaryModal: FunctionComponent<\r\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\r\n> = ({\r\n    // additionalLineItems,\r\n    // children,\r\n    // isTaxIncluded,\r\n    // taxes,\r\n    onRequestClose,\r\n    onAfterOpen,\r\n    // storeCurrency,\r\n    // shopperCurrency,\r\n    isOpen,\r\n    headerLink,\r\n    items,\r\n    // total,\r\n    // ...orderSummarySubtotalsProps\r\n}) => {\r\n    // const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\r\n\r\n    const subHeaderText = <OrderModalSummarySubheader\r\n        // amountWithCurrency={<ShopperCurrency amount={total} />}\r\n        items={items}\r\n        // shopperCurrencyCode={shopperCurrency.code}\r\n        // storeCurrencyCode={storeCurrency.code}\r\n    />;\r\n\r\n    const continueButton = isSmallScreen() && <Button\r\n        className='cart-modal-continue'\r\n        data-test=\"manage-instrument-cancel-button\"\r\n        onClick={preventDefault(onRequestClose)}>\r\n            <TranslatedString id=\"cart.return_to_checkout\" />\r\n    </Button>;\r\n\r\n    return <Modal\r\n        additionalBodyClassName=\"cart-modal-body optimizedCheckout-orderSummary\"\r\n        additionalHeaderClassName=\"cart-modal-header optimizedCheckout-orderSummary with-continue-button\"\r\n        additionalModalClassName=\"optimizedCheckout-cart-modal\"\r\n        footer={continueButton}\r\n        header={renderHeader({\r\n            headerLink,\r\n            subHeaderText,\r\n            onRequestClose,\r\n        })}\r\n        isOpen={isOpen}\r\n        onAfterOpen={onAfterOpen}\r\n        onRequestClose={onRequestClose}\r\n    >\r\n        <OrderSummarySection>\r\n            <OrderSummaryItems displayLineItemsCount={false} items={items} />\r\n        </OrderSummarySection>\r\n        {/* <OrderSummarySection>\r\n            <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\r\n            {additionalLineItems}\r\n        </OrderSummarySection>\r\n        <OrderSummarySection>\r\n            <OrderSummaryTotal\r\n                orderAmount={total}\r\n                shopperCurrencyCode={shopperCurrency.code}\r\n                storeCurrencyCode={storeCurrency.code}\r\n            />\r\n        </OrderSummarySection>\r\n        {displayInclusiveTax && <OrderSummarySection>\r\n                <h5\r\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\r\n                    data-test=\"tax-text\"\r\n                >\r\n                    <TranslatedString\r\n                        id=\"tax.inclusive_label\"\r\n                    />\r\n                </h5>\r\n                {(taxes || []).map((tax, index) => (\r\n                    <OrderSummaryPrice\r\n                        amount={tax.amount}\r\n                        key={index}\r\n                        label={tax.name}\r\n                        testId=\"cart-taxes\"\r\n                    />\r\n                ))}\r\n            </OrderSummarySection>} */}\r\n    </Modal>\r\n};\r\n\r\nconst renderHeader: FunctionComponent<{\r\n    headerLink?: ReactNode & React.HTMLProps<HTMLDivElement>;\r\n    subHeaderText: ReactNode;\r\n    onRequestClose?(): void;\r\n}> = ({ onRequestClose, headerLink, subHeaderText }) => {\r\n    let newHeaderLink;\r\n\r\n    if (isValidElement(headerLink)) {\r\n        newHeaderLink = cloneElement(headerLink, { className: 'modal-header-link cart-modal-link test' });\r\n    }\r\n\r\n    return <>\r\n        {newHeaderLink ?? headerLink}\r\n        <ModalHeader additionalClassName=\"cart-modal-title\">\r\n            <div>\r\n                <TranslatedString id=\"cart.cart_heading\" />\r\n                <div className='cart-heading-subheader'>{subHeaderText}</div>\r\n            </div>\r\n        </ModalHeader>\r\n        <a className=\"cart-modal-close\" href=\"#\" onClick={preventDefault(onRequestClose)}>\r\n            <span className=\"is-srOnly\">\r\n                <TranslatedString id=\"common.close_action\" />\r\n            </span>\r\n            <IconCloseWithBorder />\r\n        </a>\r\n    </>\r\n};\r\n\r\nexport default OrderSummaryModal;\r\n","import {\r\n    LineItemMap,\r\n    ShopperCurrency as ShopperCurrencyType,\r\n    StoreCurrency,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\n// import { ShopperCurrency } from '../currency';\r\nimport { IconGiftCertificate } from '../ui/icon';\r\nimport { ModalTrigger } from '../ui/modal';\r\n\r\nimport getItemsCount from './getItemsCount';\r\nimport getLineItemsCount from './getLineItemsCount';\r\nimport OrderSummaryModal from './OrderSummaryModal';\r\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\r\nimport removeBundledItems from './removeBundledItems';\r\n\r\nexport interface OrderSummaryDrawerProps {\r\n    lineItems: LineItemMap;\r\n    total: number;\r\n    headerLink: ReactNode;\r\n    storeCurrency: StoreCurrency;\r\n    shopperCurrency: ShopperCurrencyType;\r\n    additionalLineItems?: ReactNode;\r\n}\r\n\r\nconst OrderSummaryDrawer: FunctionComponent<\r\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\r\n> = ({\r\n    additionalLineItems,\r\n    coupons,\r\n    discountAmount,\r\n    giftCertificates,\r\n    handlingAmount,\r\n    headerLink,\r\n    isTaxIncluded,\r\n    lineItems,\r\n    onRemovedCoupon,\r\n    onRemovedGiftCertificate,\r\n    shippingAmount,\r\n    shopperCurrency,\r\n    storeCreditAmount,\r\n    giftWrappingAmount,\r\n    storeCurrency,\r\n    subtotalAmount,\r\n    taxes,\r\n    total,\r\n    fees,\r\n}) => {\r\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\r\n\r\n    const renderModal = useCallback(\r\n        (props) => (\r\n            <OrderSummaryModal\r\n                {...props}\r\n                additionalLineItems={additionalLineItems}\r\n                coupons={coupons}\r\n                discountAmount={discountAmount}\r\n                fees={fees}\r\n                giftCertificates={giftCertificates}\r\n                giftWrappingAmount={giftWrappingAmount}\r\n                handlingAmount={handlingAmount}\r\n                headerLink={headerLink}\r\n                isTaxIncluded={isTaxIncluded}\r\n                items={nonBundledLineItems}\r\n                onRemovedCoupon={onRemovedCoupon}\r\n                onRemovedGiftCertificate={onRemovedGiftCertificate}\r\n                shippingAmount={shippingAmount}\r\n                shopperCurrency={shopperCurrency}\r\n                storeCreditAmount={storeCreditAmount}\r\n                storeCurrency={storeCurrency}\r\n                subtotalAmount={subtotalAmount}\r\n                taxes={taxes}\r\n                total={total}\r\n            />\r\n        ),\r\n        [\r\n            additionalLineItems,\r\n            coupons,\r\n            discountAmount,\r\n            giftCertificates,\r\n            handlingAmount,\r\n            headerLink,\r\n            isTaxIncluded,\r\n            nonBundledLineItems,\r\n            onRemovedCoupon,\r\n            onRemovedGiftCertificate,\r\n            giftWrappingAmount,\r\n            shippingAmount,\r\n            shopperCurrency,\r\n            storeCreditAmount,\r\n            storeCurrency,\r\n            subtotalAmount,\r\n            taxes,\r\n            total,\r\n            fees,\r\n        ],\r\n    );\r\n\r\n    return (\r\n        <ModalTrigger modal={renderModal}>\r\n            {({ onClick, onKeyPress }) => (\r\n                <div\r\n                    className=\"cartDrawer optimizedCheckout-orderSummary\"\r\n                    onClick={onClick}\r\n                    onKeyPress={onKeyPress}\r\n                    tabIndex={0}\r\n                >\r\n                    <figure\r\n                        className={classNames('cartDrawer-figure', {\r\n                            'cartDrawer-figure--stack': getLineItemsCount(nonBundledLineItems) > 1,\r\n                        })}\r\n                    >\r\n                        <div className=\"cartDrawer-imageWrapper\">{getImage(nonBundledLineItems)}</div>\r\n                    </figure>\r\n                    <div className=\"cartDrawer-body\">\r\n                        <h3 className=\"cartDrawer-items optimizedCheckout-headingPrimary\">\r\n                            <TranslatedString\r\n                                data={{ count: getItemsCount(nonBundledLineItems) }}\r\n                                id=\"cart.item_count_text\"\r\n                            />\r\n                        </h3>\r\n                        <a>\r\n                            <TranslatedString id=\"cart.show_details_action\" />\r\n                        </a>\r\n                    </div>\r\n                    {/* <div className=\"cartDrawer-actions\">\r\n                        <h3 className=\"cartDrawer-total optimizedCheckout-headingPrimary\">\r\n                            Testing\r\n                        </h3>\r\n                    </div> */}\r\n                </div>\r\n            )}\r\n        </ModalTrigger>\r\n    );\r\n};\r\n\r\nfunction getImage(lineItems: LineItemMap): ReactNode {\r\n    const productWithImage = lineItems.physicalItems[0] || lineItems.digitalItems[0];\r\n\r\n    if (productWithImage && productWithImage.imageUrl) {\r\n        return (\r\n            <img\r\n                alt={productWithImage.name}\r\n                data-test=\"cart-item-image\"\r\n                src={productWithImage.imageUrl}\r\n            />\r\n        );\r\n    }\r\n\r\n    if (lineItems.giftCertificates.length) {\r\n        return <IconGiftCertificate />;\r\n    }\r\n}\r\n\r\nexport default memo(OrderSummaryDrawer);\r\n","import React, {\r\n    Component,\r\n    KeyboardEvent,\r\n    KeyboardEventHandler,\r\n    MouseEventHandler,\r\n    ReactNode,\r\n} from 'react';\r\n\r\nexport interface ModalTriggerProps {\r\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\r\n    modal(props: ModalTriggerModalProps): ReactNode;\r\n}\r\n\r\nexport interface ModalTriggerModalProps {\r\n    isOpen: boolean;\r\n    onRequestClose(): void;\r\n}\r\n\r\nexport interface ModalTriggerState {\r\n    isOpen: boolean;\r\n}\r\n\r\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    private canHandleEvent = false;\r\n\r\n    componentDidMount(): void {\r\n        this.canHandleEvent = true;\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        this.canHandleEvent = false;\r\n    }\r\n\r\n    render() {\r\n        const { children, modal } = this.props;\r\n        const { isOpen } = this.state;\r\n\r\n        return (\r\n            <>\r\n                {children({\r\n                    onClick: this.handleOpen,\r\n                    onKeyPress: this.handleKeyOpen,\r\n                })}\r\n\r\n                {modal({\r\n                    isOpen,\r\n                    onRequestClose: this.handleClose,\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private handleOpen: () => void = () => {\r\n        if (!this.canHandleEvent) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            isOpen: true,\r\n        });\r\n    };\r\n\r\n    private handleClose: () => void = () => {\r\n        if (!this.canHandleEvent) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            isOpen: false,\r\n        });\r\n    };\r\n\r\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\r\n        keyboardEvent,\r\n    ) => {\r\n        if (keyboardEvent.key === 'Enter') {\r\n            this.handleOpen();\r\n        }\r\n    };\r\n}\r\n"],"names":["memo","cartUrl","isMultiShippingMode","isNewMultiShippingUIEnabled","props","headerLink","className","url","getLineItemsCount","physicalItems","digitalItems","giftCertificates","customItems","length","fill","height","viewBox","width","xmlns","d","clipRule","fillRule","items","itemsCount","getItemsCount","itemsText","TranslatedString","id","renderHeader","newHeaderLink","onRequestClose","subHeaderText","isValidElement","cloneElement","ModalHeader","additionalClassName","href","onClick","preventDefault","onAfterOpen","isOpen","continueButton","isSmallScreen","Button","Modal","additionalBodyClassName","additionalHeaderClassName","additionalModalClassName","footer","header","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","additionalLineItems","coupons","discountAmount","handlingAmount","isTaxIncluded","lineItems","onRemovedCoupon","onRemovedGiftCertificate","shippingAmount","shopperCurrency","storeCreditAmount","giftWrappingAmount","storeCurrency","subtotalAmount","taxes","total","fees","nonBundledLineItems","useMemo","removeBundledItems","renderModal","useCallback","ModalTrigger","modal","onKeyPress","tabIndex","productWithImage","imageUrl","alt","name","src","IconGiftCertificate","getImage","data","count","state","canHandleEvent","handleOpen","setState","handleClose","handleKeyOpen","keyboardEvent","key","componentDidMount","this","componentWillUnmount","render","children","Component"],"sourceRoot":""}